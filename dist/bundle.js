!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!w[e]||!b[e])return;for(var n in b[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(d[n]=t[n]);0==--v&&0===m&&O()}(e,n),t&&t(e,n)};var n,r=!0,o="76df362e2533556fb387",i={},s=[],a=[];function u(e){var t=R[e];if(!t)return B;var r=function(r){return t.hot.active?(R[r]?-1===R[r].parents.indexOf(e)&&R[r].parents.push(e):(s=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),B(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return B[e]},set:function(t){B[e]=t}}};for(var i in B)Object.prototype.hasOwnProperty.call(B,i)&&"e"!==i&&"t"!==i&&Object.defineProperty(r,i,o(i));return r.e=function(e){return"ready"===l&&p("prepare"),m++,B.e(e).then(t,(function(e){throw t(),e}));function t(){m--,"prepare"===l&&(_[e]||S(e),0===m&&0===v&&O())}},r.t=function(e,t){return 1&t&&(e=r(e)),B.t(e,-2&t)},r}function c(t){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(e,t){if(void 0===e)r._selfAccepted=!0;else if("function"==typeof e)r._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)r._acceptedDependencies[e[n]]=t||function(){};else r._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)r._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)r._declinedDependencies[e[t]]=!0;else r._declinedDependencies[e]=!0},dispose:function(e){r._disposeHandlers.push(e)},addDisposeHandler:function(e){r._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=r._disposeHandlers.indexOf(e);t>=0&&r._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":(d={})[t]=e[t],p("ready");break;case"ready":N(t);break;case"prepare":case"check":case"dispose":case"apply":(g=g||[]).push(t)}},check:E,apply:I,status:function(e){if(!e)return l;f.push(e)},addStatusHandler:function(e){f.push(e)},removeStatusHandler:function(e){var t=f.indexOf(e);t>=0&&f.splice(t,1)},data:i[t]};return n=void 0,r}var f=[],l="idle";function p(e){l=e;for(var t=0;t<f.length;t++)f[t].call(null,e)}var h,d,y,g,v=0,m=0,_={},b={},w={};function A(e){return+e+""===e?+e:e}function E(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=e,p("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,i=B.p+""+o+".hot-update.json";r.open("GET",i,!0),r.timeout=t,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+i+" timed out."));else if(404===r.status)e();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(r.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return p(T()?"ready":"idle"),null;b={},_={},w=e.c,y=e.h,p("prepare");var t=new Promise((function(e,t){h={resolve:e,reject:t}}));d={};return S(0),"prepare"===l&&0===m&&0===v&&O(),t}));var t}function S(e){w[e]?(b[e]=!0,v++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=B.p+""+e+"."+o+".hot-update.js",document.head.appendChild(t)}(e)):_[e]=!0}function O(){p("ready");var e=h;if(h=null,e)if(r)Promise.resolve().then((function(){return I(r)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in d)Object.prototype.hasOwnProperty.call(d,n)&&t.push(A(n));e.resolve(t)}}function I(t){if("ready"!==l)throw new Error("apply() is only allowed in ready status");return function t(r){var a,u,c,f,l;function h(e){for(var t=[e],n={},r=t.map((function(e){return{chain:[e],id:e}}));r.length>0;){var o=r.pop(),i=o.id,s=o.chain;if((f=R[i])&&(!f.hot._selfAccepted||f.hot._selfInvalidated)){if(f.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(f.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var a=0;a<f.parents.length;a++){var u=f.parents[a],c=R[u];if(c){if(c.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([u]),moduleId:i,parentId:u};-1===t.indexOf(u)&&(c.hot._acceptedDependencies[i]?(n[u]||(n[u]=[]),v(n[u],[i])):(delete n[u],t.push(u),r.push({chain:s.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function v(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}T();var m={},_=[],b={},E=function(){console.warn("[HMR] unexpected require("+O.moduleId+") to disposed module")};for(var S in d)if(Object.prototype.hasOwnProperty.call(d,S)){var O;l=A(S),O=d[S]?h(l):{type:"disposed",moduleId:S};var I=!1,N=!1,D=!1,P="";switch(O.chain&&(P="\nUpdate propagation: "+O.chain.join(" -> ")),O.type){case"self-declined":r.onDeclined&&r.onDeclined(O),r.ignoreDeclined||(I=new Error("Aborted because of self decline: "+O.moduleId+P));break;case"declined":r.onDeclined&&r.onDeclined(O),r.ignoreDeclined||(I=new Error("Aborted because of declined dependency: "+O.moduleId+" in "+O.parentId+P));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(O),r.ignoreUnaccepted||(I=new Error("Aborted because "+l+" is not accepted"+P));break;case"accepted":r.onAccepted&&r.onAccepted(O),N=!0;break;case"disposed":r.onDisposed&&r.onDisposed(O),D=!0;break;default:throw new Error("Unexception type "+O.type)}if(I)return p("abort"),Promise.reject(I);if(N)for(l in b[l]=d[l],v(_,O.outdatedModules),O.outdatedDependencies)Object.prototype.hasOwnProperty.call(O.outdatedDependencies,l)&&(m[l]||(m[l]=[]),v(m[l],O.outdatedDependencies[l]));D&&(v(_,[O.moduleId]),b[l]=E)}var x,C=[];for(u=0;u<_.length;u++)l=_[u],R[l]&&R[l].hot._selfAccepted&&b[l]!==E&&!R[l].hot._selfInvalidated&&C.push({module:l,parents:R[l].parents.slice(),errorHandler:R[l].hot._selfAccepted});p("dispose"),Object.keys(w).forEach((function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)}));var L,k,M=_.slice();for(;M.length>0;)if(l=M.pop(),f=R[l]){var j={},U=f.hot._disposeHandlers;for(c=0;c<U.length;c++)(a=U[c])(j);for(i[l]=j,f.hot.active=!1,delete R[l],delete m[l],c=0;c<f.children.length;c++){var $=R[f.children[c]];$&&((x=$.parents.indexOf(l))>=0&&$.parents.splice(x,1))}}for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(f=R[l]))for(k=m[l],c=0;c<k.length;c++)L=k[c],(x=f.children.indexOf(L))>=0&&f.children.splice(x,1);p("apply"),void 0!==y&&(o=y,y=void 0);for(l in d=void 0,b)Object.prototype.hasOwnProperty.call(b,l)&&(e[l]=b[l]);var F=null;for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(f=R[l])){k=m[l];var q=[];for(u=0;u<k.length;u++)if(L=k[u],a=f.hot._acceptedDependencies[L]){if(-1!==q.indexOf(a))continue;q.push(a)}for(u=0;u<q.length;u++){a=q[u];try{a(k)}catch(e){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:l,dependencyId:k[u],error:e}),r.ignoreErrored||F||(F=e)}}}for(u=0;u<C.length;u++){var W=C[u];l=W.module,s=W.parents,n=l;try{B(l)}catch(e){if("function"==typeof W.errorHandler)try{W.errorHandler(e)}catch(t){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:t,originalError:e}),r.ignoreErrored||F||(F=t),F||(F=e)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:l,error:e}),r.ignoreErrored||F||(F=e)}}if(F)return p("fail"),Promise.reject(F);if(g)return t(r).then((function(e){return _.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return p("idle"),new Promise((function(e){e(_)}))}(t=t||{})}function T(){if(g)return d||(d={}),g.forEach(N),g=void 0,!0}function N(t){Object.prototype.hasOwnProperty.call(d,t)||(d[t]=e[t])}var R={};function B(t){if(R[t])return R[t].exports;var n=R[t]={i:t,l:!1,exports:{},hot:c(t),parents:(a=s,s=[],a),children:[]};return e[t].call(n.exports,n,n.exports,u(t)),n.l=!0,n.exports}B.m=e,B.c=R,B.d=function(e,t,n){B.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},B.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},B.t=function(e,t){if(1&t&&(e=B(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(B.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)B.d(n,r,function(t){return e[t]}.bind(null,r));return n},B.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return B.d(t,"a",t),t},B.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},B.p="",B.h=function(){return o},u(34)(B.s=34)}([function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.helpers=t.utils=t.events=t.cache=t.adapters=t.constants=void 0;var s=i(n(7));t.constants=s;var a=i(n(16));t.adapters=a;var u=i(n(23));t.cache=u;var c=i(n(24));t.events=c;var f=i(n(5));t.utils=f;var l=i(n(25));t.helpers=l},function(e,t,n){"use strict";(function(e,r){n.d(t,"a",(function(){return Ee}));var o="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{};function i(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function s(e,t){return e(t={exports:{}},t.exports),t.exports}for(var a=function(e){var t=g(e),n=t[0],r=t[1];return 3*(n+r)/4-r},u=function(e){var t,n,r=g(e),o=r[0],i=r[1],s=new p(function(e,t,n){return 3*(t+n)/4-n}(0,o,i)),a=0,u=i>0?o-4:o;for(n=0;n<u;n+=4)t=l[e.charCodeAt(n)]<<18|l[e.charCodeAt(n+1)]<<12|l[e.charCodeAt(n+2)]<<6|l[e.charCodeAt(n+3)],s[a++]=t>>16&255,s[a++]=t>>8&255,s[a++]=255&t;2===i&&(t=l[e.charCodeAt(n)]<<2|l[e.charCodeAt(n+1)]>>4,s[a++]=255&t);1===i&&(t=l[e.charCodeAt(n)]<<10|l[e.charCodeAt(n+1)]<<4|l[e.charCodeAt(n+2)]>>2,s[a++]=t>>8&255,s[a++]=255&t);return s},c=function(e){for(var t,n=e.length,r=n%3,o=[],i=0,s=n-r;i<s;i+=16383)o.push(v(e,i,i+16383>s?s:i+16383));1===r?(t=e[n-1],o.push(f[t>>2]+f[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],o.push(f[t>>10]+f[t>>4&63]+f[t<<2&63]+"="));return o.join("")},f=[],l=[],p="undefined"!=typeof Uint8Array?Uint8Array:Array,h="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",d=0,y=h.length;d<y;++d)f[d]=h[d],l[h.charCodeAt(d)]=d;function g(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function v(e,t,n){for(var r,o,i=[],s=t;s<n;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),i.push(f[(o=r)>>18&63]+f[o>>12&63]+f[o>>6&63]+f[63&o]);return i.join("")}l["-".charCodeAt(0)]=62,l["_".charCodeAt(0)]=63;var m={byteLength:a,toByteArray:u,fromByteArray:c},_=function(e,t,n,r,o){var i,s,a=8*o-r-1,u=(1<<a)-1,c=u>>1,f=-7,l=n?o-1:0,p=n?-1:1,h=e[t+l];for(l+=p,i=h&(1<<-f)-1,h>>=-f,f+=a;f>0;i=256*i+e[t+l],l+=p,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=r;f>0;s=256*s+e[t+l],l+=p,f-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,r),i-=c}return(h?-1:1)*s*Math.pow(2,i-r)},b=function(e,t,n,r,o,i){var s,a,u,c=8*i-o-1,f=(1<<c)-1,l=f>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,d=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=f):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+l>=1?p/u:p*Math.pow(2,1-l))*u>=2&&(s++,u/=2),s+l>=f?(a=0,s=f):s+l>=1?(a=(t*u-1)*Math.pow(2,o),s+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,o),s=0));o>=8;e[n+h]=255&a,h+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[n+h]=255&s,h+=d,s/=256,c-=8);e[n+h-d]|=128*y},w=s((function(e,t){var n="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=o,t.SlowBuffer=function(e){+e!=e&&(e=0);return o.alloc(+e)},t.INSPECT_MAX_BYTES=50;function r(e){if(e>2147483647)throw new RangeError('The value "'+e+'" is invalid for option "size"');var t=new Uint8Array(e);return Object.setPrototypeOf(t,o.prototype),t}function o(e,t,n){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return a(e)}return i(e,t,n)}function i(e,t,n){if("string"==typeof e)return function(e,t){"string"==typeof t&&""!==t||(t="utf8");if(!o.isEncoding(t))throw new TypeError("Unknown encoding: "+t);var n=0|l(e,t),i=r(n),s=i.write(e,t);s!==n&&(i=i.slice(0,s));return i}(e,t);if(ArrayBuffer.isView(e))return u(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+babelHelpers.typeof(e));if($(e,ArrayBuffer)||e&&$(e.buffer,ArrayBuffer))return c(e,t,n);if("undefined"!=typeof SharedArrayBuffer&&($(e,SharedArrayBuffer)||e&&$(e.buffer,SharedArrayBuffer)))return c(e,t,n);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');var i=e.valueOf&&e.valueOf();if(null!=i&&i!==e)return o.from(i,t,n);var s=function(e){if(o.isBuffer(e)){var t=0|f(e.length),n=r(t);return 0===n.length||e.copy(n,0,0,t),n}if(void 0!==e.length)return"number"!=typeof e.length||F(e.length)?r(0):u(e);if("Buffer"===e.type&&Array.isArray(e.data))return u(e.data)}(e);if(s)return s;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return o.from(e[Symbol.toPrimitive]("string"),t,n);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+babelHelpers.typeof(e))}function s(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function a(e){return s(e),r(e<0?0:0|f(e))}function u(e){for(var t=e.length<0?0:0|f(e.length),n=r(t),o=0;o<t;o+=1)n[o]=255&e[o];return n}function c(e,t,n){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(n||0))throw new RangeError('"length" is outside of buffer bounds');var r;return r=void 0===t&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,t):new Uint8Array(e,t,n),Object.setPrototypeOf(r,o.prototype),r}function f(e){if(e>=2147483647)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+2147483647..toString(16)+" bytes");return 0|e}function l(e,t){if(o.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||$(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+babelHelpers.typeof(e));var n=e.length,r=arguments.length>2&&!0===arguments[2];if(!r&&0===n)return 0;for(var i=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":return M(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return j(e).length;default:if(i)return r?-1:M(e).length;t=(""+t).toLowerCase(),i=!0}}function p(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,n);case"utf8":case"utf-8":return I(this,t,n);case"ascii":return T(this,t,n);case"latin1":case"binary":return N(this,t,n);case"base64":return O(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function h(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function d(e,t,n,r,i){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),F(n=+n)&&(n=i?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(i)return-1;n=e.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof t&&(t=o.from(t,r)),o.isBuffer(t))return 0===t.length?-1:y(e,t,n,r,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):y(e,[t],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(e,t,n,r,o){var i,s=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var f=-1;for(i=n;i<a;i++)if(c(e,i)===c(t,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===u)return f*s}else-1!==f&&(i-=i-f),f=-1}else for(n+u>a&&(n=a-u),i=n;i>=0;i--){for(var l=!0,p=0;p<u;p++)if(c(e,i+p)!==c(t,p)){l=!1;break}if(l)return i}return-1}function g(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(F(a))return s;e[n+s]=a}return s}function v(e,t,n,r){return U(M(t,e.length-n),e,n,r)}function w(e,t,n,r){return U(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function A(e,t,n,r){return w(e,t,n,r)}function E(e,t,n,r){return U(j(t),e,n,r)}function S(e,t,n,r){return U(function(e,t){for(var n,r,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function O(e,t,n){return 0===t&&n===e.length?m.fromByteArray(e):m.fromByteArray(e.slice(t,n))}function I(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,s,a,u,c=e[o],f=null,l=c>239?4:c>223?3:c>191?2:1;if(o+l<=n)switch(l){case 1:c<128&&(f=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(f=u);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(f=u);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(f=u)}null===f?(f=65533,l=1):f>65535&&(f-=65536,r.push(f>>>10&1023|55296),f=56320|1023&f),r.push(f),o+=l}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}t.kMaxLength=2147483647,o.TYPED_ARRAY_SUPPORT=function(){try{var e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),o.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(o.prototype,"parent",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.buffer}}),Object.defineProperty(o.prototype,"offset",{enumerable:!0,get:function(){if(o.isBuffer(this))return this.byteOffset}}),o.poolSize=8192,o.from=function(e,t,n){return i(e,t,n)},Object.setPrototypeOf(o.prototype,Uint8Array.prototype),Object.setPrototypeOf(o,Uint8Array),o.alloc=function(e,t,n){return function(e,t,n){return s(e),e<=0?r(e):void 0!==t?"string"==typeof n?r(e).fill(t,n):r(e).fill(t):r(e)}(e,t,n)},o.allocUnsafe=function(e){return a(e)},o.allocUnsafeSlow=function(e){return a(e)},o.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==o.prototype},o.compare=function(e,t){if($(e,Uint8Array)&&(e=o.from(e,e.offset,e.byteLength)),$(t,Uint8Array)&&(t=o.from(t,t.offset,t.byteLength)),!o.isBuffer(e)||!o.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;for(var n=e.length,r=t.length,i=0,s=Math.min(n,r);i<s;++i)if(e[i]!==t[i]){n=e[i],r=t[i];break}return n<r?-1:r<n?1:0},o.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},o.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return o.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=o.allocUnsafe(t),i=0;for(n=0;n<e.length;++n){var s=e[n];if($(s,Uint8Array)&&(s=o.from(s)),!o.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,i),i+=s.length}return r},o.byteLength=l,o.prototype._isBuffer=!0,o.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)h(this,t,t+1);return this},o.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)h(this,t,t+3),h(this,t+1,t+2);return this},o.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)h(this,t,t+7),h(this,t+1,t+6),h(this,t+2,t+5),h(this,t+3,t+4);return this},o.prototype.toString=function(){var e=this.length;return 0===e?"":0===arguments.length?I(this,0,e):p.apply(this,arguments)},o.prototype.toLocaleString=o.prototype.toString,o.prototype.equals=function(e){if(!o.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===o.compare(this,e)},o.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,n).replace(/(.{2})/g,"$1 ").trim(),this.length>n&&(e+=" ... "),"<Buffer "+e+">"},n&&(o.prototype[n]=o.prototype.inspect),o.prototype.compare=function(e,t,n,r,i){if($(e,Uint8Array)&&(e=o.from(e,e.offset,e.byteLength)),!o.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+babelHelpers.typeof(e));if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),t<0||n>e.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&t>=n)return 0;if(r>=i)return-1;if(t>=n)return 1;if(this===e)return 0;for(var s=(i>>>=0)-(r>>>=0),a=(n>>>=0)-(t>>>=0),u=Math.min(s,a),c=this.slice(r,i),f=e.slice(t,n),l=0;l<u;++l)if(c[l]!==f[l]){s=c[l],a=f[l];break}return s<a?-1:a<s?1:0},o.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},o.prototype.indexOf=function(e,t,n){return d(this,e,t,n,!0)},o.prototype.lastIndexOf=function(e,t,n){return d(this,e,t,n,!1)},o.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(n)?(n>>>=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return g(this,e,t,n);case"utf8":case"utf-8":return v(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return A(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},o.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function T(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function N(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function R(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=q[e[i]];return o}function B(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function D(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function P(e,t,n,r,i,s){if(!o.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<s)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function x(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function C(e,t,n,r,o){return t=+t,n>>>=0,o||x(e,0,n,4),b(e,t,n,r,23,4),n+4}function L(e,t,n,r,o){return t=+t,n>>>=0,o||x(e,0,n,8),b(e,t,n,r,52,8),n+8}o.prototype.slice=function(e,t){var n=this.length;(e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e);var r=this.subarray(e,t);return Object.setPrototypeOf(r,o.prototype),r},o.prototype.readUIntLE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},o.prototype.readUIntBE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},o.prototype.readUInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),this[e]},o.prototype.readUInt16LE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]|this[e+1]<<8},o.prototype.readUInt16BE=function(e,t){return e>>>=0,t||D(e,2,this.length),this[e]<<8|this[e+1]},o.prototype.readUInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},o.prototype.readUInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},o.prototype.readIntLE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},o.prototype.readIntBE=function(e,t,n){e>>>=0,t>>>=0,n||D(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},o.prototype.readInt8=function(e,t){return e>>>=0,t||D(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},o.prototype.readInt16LE=function(e,t){e>>>=0,t||D(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},o.prototype.readInt16BE=function(e,t){e>>>=0,t||D(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},o.prototype.readInt32LE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},o.prototype.readInt32BE=function(e,t){return e>>>=0,t||D(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},o.prototype.readFloatLE=function(e,t){return e>>>=0,t||D(e,4,this.length),_(this,e,!0,23,4)},o.prototype.readFloatBE=function(e,t){return e>>>=0,t||D(e,4,this.length),_(this,e,!1,23,4)},o.prototype.readDoubleLE=function(e,t){return e>>>=0,t||D(e,8,this.length),_(this,e,!0,52,8)},o.prototype.readDoubleBE=function(e,t){return e>>>=0,t||D(e,8,this.length),_(this,e,!1,52,8)},o.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t>>>=0,n>>>=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},o.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t>>>=0,n>>>=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},o.prototype.writeUInt8=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,1,255,0),this[t]=255&e,t+1},o.prototype.writeUInt16LE=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},o.prototype.writeUInt16BE=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},o.prototype.writeUInt32LE=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},o.prototype.writeUInt32BE=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},o.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t>>>=0,!r){var o=Math.pow(2,8*n-1);P(this,e,t,n,o-1,-o)}var i=0,s=1,a=0;for(this[t]=255&e;++i<n&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},o.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t>>>=0,!r){var o=Math.pow(2,8*n-1);P(this,e,t,n,o-1,-o)}var i=n-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},o.prototype.writeInt8=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},o.prototype.writeInt16LE=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},o.prototype.writeInt16BE=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},o.prototype.writeInt32LE=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},o.prototype.writeInt32BE=function(e,t,n){return e=+e,t>>>=0,n||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},o.prototype.writeFloatLE=function(e,t,n){return C(this,e,t,!0,n)},o.prototype.writeFloatBE=function(e,t,n){return C(this,e,t,!1,n)},o.prototype.writeDoubleLE=function(e,t,n){return L(this,e,t,!0,n)},o.prototype.writeDoubleBE=function(e,t,n){return L(this,e,t,!1,n)},o.prototype.copy=function(e,t,n,r){if(!o.isBuffer(e))throw new TypeError("argument should be a Buffer");if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var i=r-n;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,n,r);else if(this===e&&n<t&&t<r)for(var s=i-1;s>=0;--s)e[s+t]=this[s+n];else Uint8Array.prototype.set.call(e,this.subarray(n,r),t);return i},o.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!o.isEncoding(r))throw new TypeError("Unknown encoding: "+r);if(1===e.length){var i=e.charCodeAt(0);("utf8"===r&&i<128||"latin1"===r)&&(e=i)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var s;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=t;s<n;++s)this[s]=e;else{var a=o.isBuffer(e)?e:o.from(e,r),u=a.length;if(0===u)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(s=0;s<n-t;++s)this[s+t]=a[s%u]}return this};var k=/[^+/0-9A-Za-z-_]/g;function M(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function j(e){return m.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(k,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function U(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}function $(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function F(e){return e!=e}var q=function(){for(var e=new Array(256),t=0;t<16;++t)for(var n=16*t,r=0;r<16;++r)e[n+r]="0123456789abcdef"[t]+"0123456789abcdef"[r];return e}()})),A=(w.Buffer,w.SlowBuffer,w.INSPECT_MAX_BYTES,w.kMaxLength,s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.ensureBuffer=void 0,t.ensureBuffer=function(e){if(w.Buffer.isBuffer(e))return e;if(ArrayBuffer.isView(e))return w.Buffer.from(e.buffer);if(e instanceof ArrayBuffer)return w.Buffer.from(e);throw new TypeError("Must use either Buffer or TypedArray")}})));i(A);A.ensureBuffer;var E=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.parseUUID=void 0;const n=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;t.parseUUID=function(e){if("string"!=typeof e)throw new TypeError("Invalid type for UUID, expected string but got "+typeof e);if(!n.test(e))throw new TypeError("Invalid format for UUID: "+e);let t;const r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r}}));i(E);E.parseUUID;var S=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Binary=void 0;class n{constructor(e,t){if(!(null==e||"string"==typeof e||ArrayBuffer.isView(e)||e instanceof ArrayBuffer||Array.isArray(e)))throw new TypeError("Binary can only be constructed from string, Buffer, TypedArray, or Array<number>");this.sub_type=null!=t?t:n.BSON_BINARY_SUBTYPE_DEFAULT,null==e?(this.buffer=w.Buffer.alloc(n.BUFFER_SIZE),this.position=0):("string"==typeof e?this.buffer=w.Buffer.from(e,"binary"):Array.isArray(e)?this.buffer=w.Buffer.from(e):this.buffer=A.ensureBuffer(e),this.position=this.buffer.byteLength)}put(e){if("string"==typeof e&&1!==e.length)throw new TypeError("only accepts single character String");if("number"!=typeof e&&1!==e.length)throw new TypeError("only accepts single character Uint8Array or Array");let t;if(t="string"==typeof e?e.charCodeAt(0):"number"==typeof e?e:e[0],t<0||t>255)throw new TypeError("only accepts number in a valid unsigned byte range 0-255");if(this.buffer.length>this.position)this.buffer[this.position++]=t;else{const e=w.Buffer.alloc(n.BUFFER_SIZE+this.buffer.length);this.buffer.copy(e,0,0,this.buffer.length),this.buffer=e,this.buffer[this.position++]=t}}write(e,t){if(t="number"==typeof t?t:this.position,this.buffer.length<t+e.length){const t=w.Buffer.alloc(this.buffer.length+e.length);this.buffer.copy(t,0,0,this.buffer.length),this.buffer=t}ArrayBuffer.isView(e)?(this.buffer.set(A.ensureBuffer(e),t),this.position=t+e.byteLength>this.position?t+e.length:this.position):"string"==typeof e&&(this.buffer.write(e,t,e.length,"binary"),this.position=t+e.length>this.position?t+e.length:this.position)}read(e,t){return t=t&&t>0?t:this.position,this.buffer.slice(e,e+t)}value(e){return(e=!!e)&&this.buffer.length===this.position?this.buffer:e?this.buffer.slice(0,this.position):this.buffer.toString("binary",0,this.position)}length(){return this.position}toJSON(){return this.buffer.toString("base64")}toString(e){return this.buffer.toString(e)}toExtendedJSON(e){e=e||{};const t=this.buffer.toString("base64"),n=Number(this.sub_type).toString(16);return e.legacy?{$binary:t,$type:1===n.length?"0"+n:n}:{$binary:{base64:t,subType:1===n.length?"0"+n:n}}}static fromExtendedJSON(e,t){let r,o;if(t=t||{},"$binary"in e?t.legacy&&"string"==typeof e.$binary&&"$type"in e?(o=e.$type?parseInt(e.$type,16):0,r=w.Buffer.from(e.$binary,"base64")):"string"!=typeof e.$binary&&(o=e.$binary.subType?parseInt(e.$binary.subType,16):0,r=w.Buffer.from(e.$binary.base64,"base64")):"$uuid"in e&&(o=4,r=w.Buffer.from(E.parseUUID(e.$uuid))),!r)throw new TypeError("Unexpected Binary Extended JSON format "+JSON.stringify(e));return new n(r,o)}}t.Binary=n,n.BSON_BINARY_SUBTYPE_DEFAULT=0,n.BUFFER_SIZE=256,n.SUBTYPE_DEFAULT=0,n.SUBTYPE_FUNCTION=1,n.SUBTYPE_BYTE_ARRAY=2,n.SUBTYPE_UUID_OLD=3,n.SUBTYPE_UUID=4,n.SUBTYPE_MD5=5,n.SUBTYPE_USER_DEFINED=128,Object.defineProperty(n.prototype,"_bsontype",{value:"Binary"})}));i(S);S.Binary;var O=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Code=void 0;class n{constructor(e,t){this.code=e,this.scope=t}toJSON(){return{code:this.code,scope:this.scope}}toExtendedJSON(){return this.scope?{$code:this.code,$scope:this.scope}:{$code:this.code}}static fromExtendedJSON(e){return new n(e.$code,e.$scope)}}t.Code=n,Object.defineProperty(n.prototype,"_bsontype",{value:"Code"})}));i(O);O.Code;var I={},T="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e},N=/%[sdj%]/g;function R(e){if(!q(e)){for(var t=[],n=0;n<arguments.length;n++)t.push(P(arguments[n]));return t.join(" ")}n=1;for(var r=arguments,o=r.length,i=String(e).replace(N,(function(e){if("%%"===e)return"%";if(n>=o)return e;switch(e){case"%s":return String(r[n++]);case"%d":return Number(r[n++]);case"%j":try{return JSON.stringify(r[n++])}catch(e){return"[Circular]"}default:return e}})),s=r[n];n<o;s=r[++n])$(s)||!H(s)?i+=" "+s:i+=" "+P(s);return i}var B,D={};function P(e,t){var n={seen:[],stylize:C};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),U(t)?n.showHidden=t:t&&Q(n,t),W(n.showHidden)&&(n.showHidden=!1),W(n.depth)&&(n.depth=2),W(n.colors)&&(n.colors=!1),W(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=x),L(n,e,n.depth)}function x(e,t){var n=P.styles[t];return n?"["+P.colors[n][0]+"m"+e+"["+P.colors[n][1]+"m":e}function C(e,t){return e}function L(e,t,n){if(e.customInspect&&t&&V(t.inspect)&&t.inspect!==P&&(!t.constructor||t.constructor.prototype!==t)){var r=t.inspect(n,e);return q(r)||(r=L(e,r,n)),r}var o=function(e,t){if(W(t))return e.stylize("undefined","undefined");if(q(t)){var n="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(n,"string")}if(F(t))return e.stylize(""+t,"number");if(U(t))return e.stylize(""+t,"boolean");if($(t))return e.stylize("null","null")}(e,t);if(o)return o;var i=Object.keys(t),s=function(e){var t={};return e.forEach((function(e,n){t[e]=!0})),t}(i);if(e.showHidden&&(i=Object.getOwnPropertyNames(t)),G(t)&&(i.indexOf("message")>=0||i.indexOf("description")>=0))return k(t);if(0===i.length){if(V(t)){var a=t.name?": "+t.name:"";return e.stylize("[Function"+a+"]","special")}if(Y(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(K(t))return e.stylize(Date.prototype.toString.call(t),"date");if(G(t))return k(t)}var u,c="",f=!1,l=["{","}"];(j(t)&&(f=!0,l=["[","]"]),V(t))&&(c=" [Function"+(t.name?": "+t.name:"")+"]");return Y(t)&&(c=" "+RegExp.prototype.toString.call(t)),K(t)&&(c=" "+Date.prototype.toUTCString.call(t)),G(t)&&(c=" "+k(t)),0!==i.length||f&&0!=t.length?n<0?Y(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),u=f?function(e,t,n,r,o){for(var i=[],s=0,a=t.length;s<a;++s)ee(t,String(s))?i.push(M(e,t,n,r,String(s),!0)):i.push("");return o.forEach((function(o){o.match(/^\d+$/)||i.push(M(e,t,n,r,o,!0))})),i}(e,t,n,s,i):i.map((function(r){return M(e,t,n,s,r,f)})),e.seen.pop(),function(e,t,n){if(e.reduce((function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1}),0)>60)return n[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+n[1];return n[0]+t+" "+e.join(", ")+" "+n[1]}(u,c,l)):l[0]+c+l[1]}function k(e){return"["+Error.prototype.toString.call(e)+"]"}function M(e,t,n,r,o,i){var s,a,u;if((u=Object.getOwnPropertyDescriptor(t,o)||{value:t[o]}).get?a=u.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):u.set&&(a=e.stylize("[Setter]","special")),ee(r,o)||(s="["+o+"]"),a||(e.seen.indexOf(u.value)<0?(a=$(n)?L(e,u.value,null):L(e,u.value,n-1)).indexOf("\n")>-1&&(a=i?a.split("\n").map((function(e){return"  "+e})).join("\n").substr(2):"\n"+a.split("\n").map((function(e){return"   "+e})).join("\n")):a=e.stylize("[Circular]","special")),W(s)){if(i&&o.match(/^\d+$/))return a;(s=JSON.stringify(""+o)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(s=s.substr(1,s.length-2),s=e.stylize(s,"name")):(s=s.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),s=e.stylize(s,"string"))}return s+": "+a}function j(e){return Array.isArray(e)}function U(e){return"boolean"==typeof e}function $(e){return null===e}function F(e){return"number"==typeof e}function q(e){return"string"==typeof e}function W(e){return void 0===e}function Y(e){return H(e)&&"[object RegExp]"===J(e)}function H(e){return"object"===babelHelpers.typeof(e)&&null!==e}function K(e){return H(e)&&"[object Date]"===J(e)}function G(e){return H(e)&&("[object Error]"===J(e)||e instanceof Error)}function V(e){return"function"==typeof e}function J(e){return Object.prototype.toString.call(e)}function z(e){return e<10?"0"+e.toString(10):e.toString(10)}P.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},P.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var X=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function Z(){var e=new Date,t=[z(e.getHours()),z(e.getMinutes()),z(e.getSeconds())].join(":");return[e.getDate(),X[e.getMonth()],t].join(" ")}function Q(e,t){if(!t||!H(t))return e;for(var n=Object.keys(t),r=n.length;r--;)e[n[r]]=t[n[r]];return e}function ee(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var te={inherits:T,_extend:Q,log:function(){console.log("%s - %s",Z(),R.apply(null,arguments))},isBuffer:function(e){return r.isBuffer(e)},isPrimitive:function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"===babelHelpers.typeof(e)||void 0===e},isFunction:V,isError:G,isDate:K,isObject:H,isRegExp:Y,isUndefined:W,isSymbol:function(e){return"symbol"===babelHelpers.typeof(e)},isString:q,isNumber:F,isNullOrUndefined:function(e){return null==e},isNull:$,isBoolean:U,isArray:j,inspect:P,deprecate:function t(n,r){if(W(e.process))return function(){return t(n,r).apply(this,arguments)};var o=!1;return function(){return o||(console.error(r),o=!0),n.apply(this,arguments)}},format:R,debuglog:function(e){if(W(B)&&(B=""),e=e.toUpperCase(),!D[e])if(new RegExp("\\b"+e+"\\b","i").test(B)){D[e]=function(){var t=R.apply(null,arguments);console.error("%s %d: %s",e,0,t)}}else D[e]=function(){};return D[e]}},ne=s((function(e,t){function n(e){const t=w.Buffer.alloc(e);for(let n=0;n<e;++n)t[n]=Math.floor(256*Math.random());return t}if(Object.defineProperty(t,"__esModule",{value:!0}),t.deprecate=t.isObjectLike=t.isDate=t.isBuffer=t.haveBuffer=t.isBigUInt64Array=t.isBigInt64Array=t.isUint8Array=t.randomBytes=t.normalizedFunctionString=void 0,t.normalizedFunctionString=function(e){return e.toString().replace("function(","function (")},t.randomBytes=n,"undefined"!=typeof window&&window.crypto&&window.crypto.getRandomValues)t.randomBytes=e=>window.crypto.getRandomValues(w.Buffer.alloc(e));else{try{t.randomBytes=I.randomBytes}catch(e){}null==t.randomBytes&&(t.randomBytes=n)}function r(){return void 0!==o&&void 0!==o.Buffer}function i(e){return"object"==typeof e&&null!==e}t.isUint8Array=function(e){return"[object Uint8Array]"===Object.prototype.toString.call(e)},t.isBigInt64Array=function(e){return"[object BigInt64Array]"===Object.prototype.toString.call(e)},t.isBigUInt64Array=function(e){return"[object BigUint64Array]"===Object.prototype.toString.call(e)},t.haveBuffer=r,t.isBuffer=function(e){return r()&&w.Buffer.isBuffer(e)},t.isDate=function(e){return i(e)&&"[object Date]"===Object.prototype.toString.call(e)},t.isObjectLike=i,t.deprecate=function(e,t){if("undefined"==typeof window||"undefined"==typeof self)return te.deprecate(e,t);let n=!1;return function(...r){return n||(console.warn(t),n=!0),e.apply(this,...r)}}}));i(ne);ne.deprecate,ne.isObjectLike,ne.isDate,ne.isBuffer,ne.haveBuffer,ne.isBigUInt64Array,ne.isBigInt64Array,ne.isUint8Array,ne.randomBytes,ne.normalizedFunctionString;var re=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.DBRef=t.isDBRefLike=void 0,t.isDBRefLike=function(e){return ne.isObjectLike(e)&&null!=e.$id&&null!=e.$ref};class n{constructor(e,t,n,r){const o=e.split(".");2===o.length&&(n=o.shift(),e=o.shift()),this.collection=e,this.oid=t,this.db=n,this.fields=r||{}}get namespace(){return this.collection}set namespace(e){this.collection=e}toJSON(){const e=Object.assign({$ref:this.collection,$id:this.oid},this.fields);return null!=this.db&&(e.$db=this.db),e}toExtendedJSON(e){e=e||{};let t={$ref:this.collection,$id:this.oid};return e.legacy||(this.db&&(t.$db=this.db),t=Object.assign(t,this.fields)),t}static fromExtendedJSON(e){const t=Object.assign({},e);return delete t.$ref,delete t.$id,delete t.$db,new n(e.$ref,e.$id,e.$db,t)}}t.DBRef=n,Object.defineProperty(n.prototype,"_bsontype",{value:"DBRef"})}));i(re);re.DBRef,re.isDBRefLike;var oe=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Long=void 0;let n=void 0;try{n=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}const r={},o={};class i{constructor(e=0,t=0,n){this.comp=i.prototype.compare,this.div=i.prototype.divide,this.eq=i.prototype.equals,this.gt=i.prototype.greaterThan,this.gte=i.prototype.greaterThanOrEqual,this.ge=i.prototype.greaterThanOrEqual,this.lt=i.prototype.lessThan,this.lte=i.prototype.lessThanOrEqual,this.mod=i.prototype.modulo,this.rem=i.prototype.modulo,this.mul=i.prototype.multiply,this.neg=i.prototype.negate,this.neq=i.prototype.notEquals,this.ne=i.prototype.notEquals,this.shl=i.prototype.shiftLeft,this.shr=i.prototype.shiftRight,this.shr_u=i.prototype.shiftRightUnsigned,this.shru=i.prototype.shiftRightUnsigned,this.sub=i.prototype.subtract,this.eqz=i.prototype.isZero,this.le=i.prototype.lessThanOrEqual,this.low=0|e,this.high=0|t,this.unsigned=!!n,Object.defineProperty(this,"__isLong__",{value:!0,configurable:!1,writable:!1,enumerable:!1})}static fromBits(e,t,n){return new i(e,t,n)}static fromInt(e,t){let n,s,a;return t?(a=0<=(e>>>=0)&&e<256)&&(s=o[e],s)?s:(n=i.fromBits(e,(0|e)<0?-1:0,!0),a&&(o[e]=n),n):(a=-128<=(e|=0)&&e<128)&&(s=r[e],s)?s:(n=i.fromBits(e,e<0?-1:0,!1),a&&(r[e]=n),n)}static fromNumber(e,t){if(isNaN(e))return t?i.UZERO:i.ZERO;if(t){if(e<0)return i.UZERO;if(e>=0x10000000000000000)return i.MAX_UNSIGNED_VALUE}else{if(e<=-0x8000000000000000)return i.MIN_VALUE;if(e+1>=0x8000000000000000)return i.MAX_VALUE}return e<0?i.fromNumber(-e,t).neg():i.fromBits(e%4294967296|0,e/4294967296|0,t)}static fromBigInt(e,t){return i.fromString(e.toString(),t)}static fromString(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return i.ZERO;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");let r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return i.fromString(e.substring(1),t,n).neg();const o=i.fromNumber(Math.pow(n,8));let s=i.ZERO;for(let t=0;t<e.length;t+=8){const r=Math.min(8,e.length-t),a=parseInt(e.substring(t,t+r),n);if(r<8){const e=i.fromNumber(Math.pow(n,r));s=s.mul(e).add(i.fromNumber(a))}else s=s.mul(o),s=s.add(i.fromNumber(a))}return s.unsigned=t,s}static fromBytes(e,t,n){return n?i.fromBytesLE(e,t):i.fromBytesBE(e,t)}static fromBytesLE(e,t){return new i(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)}static fromBytesBE(e,t){return new i(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}static isLong(e){return ne.isObjectLike(e)&&!0===e.__isLong__}static fromValue(e,t){return"number"==typeof e?i.fromNumber(e,t):"string"==typeof e?i.fromString(e,t):i.fromBits(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}add(e){i.isLong(e)||(e=i.fromValue(e));const t=this.high>>>16,n=65535&this.high,r=this.low>>>16,o=65535&this.low,s=e.high>>>16,a=65535&e.high,u=e.low>>>16;let c=0,f=0,l=0,p=0;return p+=o+(65535&e.low),l+=p>>>16,p&=65535,l+=r+u,f+=l>>>16,l&=65535,f+=n+a,c+=f>>>16,f&=65535,c+=t+s,c&=65535,i.fromBits(l<<16|p,c<<16|f,this.unsigned)}and(e){return i.isLong(e)||(e=i.fromValue(e)),i.fromBits(this.low&e.low,this.high&e.high,this.unsigned)}compare(e){if(i.isLong(e)||(e=i.fromValue(e)),this.eq(e))return 0;const t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1}divide(e){if(i.isLong(e)||(e=i.fromValue(e)),e.isZero())throw Error("division by zero");if(n){if(!this.unsigned&&-2147483648===this.high&&-1===e.low&&-1===e.high)return this;const t=(this.unsigned?n.div_u:n.div_s)(this.low,this.high,e.low,e.high);return i.fromBits(t,n.get_high(),this.unsigned)}if(this.isZero())return this.unsigned?i.UZERO:i.ZERO;let t,r,o;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return i.UZERO;if(e.gt(this.shru(1)))return i.UONE;o=i.UZERO}else{if(this.eq(i.MIN_VALUE)){if(e.eq(i.ONE)||e.eq(i.NEG_ONE))return i.MIN_VALUE;if(e.eq(i.MIN_VALUE))return i.ONE;return t=this.shr(1).div(e).shl(1),t.eq(i.ZERO)?e.isNegative()?i.ONE:i.NEG_ONE:(r=this.sub(e.mul(t)),o=t.add(r.div(e)),o)}if(e.eq(i.MIN_VALUE))return this.unsigned?i.UZERO:i.ZERO;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();o=i.ZERO}for(r=this;r.gte(e);){t=Math.max(1,Math.floor(r.toNumber()/e.toNumber()));const n=Math.ceil(Math.log(t)/Math.LN2),s=n<=48?1:Math.pow(2,n-48);let a=i.fromNumber(t),u=a.mul(e);for(;u.isNegative()||u.gt(r);)t-=s,a=i.fromNumber(t,this.unsigned),u=a.mul(e);a.isZero()&&(a=i.ONE),o=o.add(a),r=r.sub(u)}return o}equals(e){return i.isLong(e)||(e=i.fromValue(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&(this.high===e.high&&this.low===e.low)}getHighBits(){return this.high}getHighBitsUnsigned(){return this.high>>>0}getLowBits(){return this.low}getLowBitsUnsigned(){return this.low>>>0}getNumBitsAbs(){if(this.isNegative())return this.eq(i.MIN_VALUE)?64:this.neg().getNumBitsAbs();const e=0!==this.high?this.high:this.low;let t;for(t=31;t>0&&0==(e&1<<t);t--);return 0!==this.high?t+33:t+1}greaterThan(e){return this.comp(e)>0}greaterThanOrEqual(e){return this.comp(e)>=0}isEven(){return 0==(1&this.low)}isNegative(){return!this.unsigned&&this.high<0}isOdd(){return 1==(1&this.low)}isPositive(){return this.unsigned||this.high>=0}isZero(){return 0===this.high&&0===this.low}lessThan(e){return this.comp(e)<0}lessThanOrEqual(e){return this.comp(e)<=0}modulo(e){if(i.isLong(e)||(e=i.fromValue(e)),n){const t=(this.unsigned?n.rem_u:n.rem_s)(this.low,this.high,e.low,e.high);return i.fromBits(t,n.get_high(),this.unsigned)}return this.sub(this.div(e).mul(e))}multiply(e){if(this.isZero())return i.ZERO;if(i.isLong(e)||(e=i.fromValue(e)),n){const t=n.mul(this.low,this.high,e.low,e.high);return i.fromBits(t,n.get_high(),this.unsigned)}if(e.isZero())return i.ZERO;if(this.eq(i.MIN_VALUE))return e.isOdd()?i.MIN_VALUE:i.ZERO;if(e.eq(i.MIN_VALUE))return this.isOdd()?i.MIN_VALUE:i.ZERO;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(i.TWO_PWR_24)&&e.lt(i.TWO_PWR_24))return i.fromNumber(this.toNumber()*e.toNumber(),this.unsigned);const t=this.high>>>16,r=65535&this.high,o=this.low>>>16,s=65535&this.low,a=e.high>>>16,u=65535&e.high,c=e.low>>>16,f=65535&e.low;let l=0,p=0,h=0,d=0;return d+=s*f,h+=d>>>16,d&=65535,h+=o*f,p+=h>>>16,h&=65535,h+=s*c,p+=h>>>16,h&=65535,p+=r*f,l+=p>>>16,p&=65535,p+=o*c,l+=p>>>16,p&=65535,p+=s*u,l+=p>>>16,p&=65535,l+=t*f+r*c+o*u+s*a,l&=65535,i.fromBits(h<<16|d,l<<16|p,this.unsigned)}negate(){return!this.unsigned&&this.eq(i.MIN_VALUE)?i.MIN_VALUE:this.not().add(i.ONE)}not(){return i.fromBits(~this.low,~this.high,this.unsigned)}notEquals(e){return!this.equals(e)}or(e){return i.isLong(e)||(e=i.fromValue(e)),i.fromBits(this.low|e.low,this.high|e.high,this.unsigned)}shiftLeft(e){return i.isLong(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?i.fromBits(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):i.fromBits(0,this.low<<e-32,this.unsigned)}shiftRight(e){return i.isLong(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?i.fromBits(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):i.fromBits(this.high>>e-32,this.high>=0?0:-1,this.unsigned)}shiftRightUnsigned(e){if(i.isLong(e)&&(e=e.toInt()),0===(e&=63))return this;{const t=this.high;if(e<32){const n=this.low;return i.fromBits(n>>>e|t<<32-e,t>>>e,this.unsigned)}return 32===e?i.fromBits(t,0,this.unsigned):i.fromBits(t>>>e-32,0,this.unsigned)}}subtract(e){return i.isLong(e)||(e=i.fromValue(e)),this.add(e.neg())}toInt(){return this.unsigned?this.low>>>0:this.low}toNumber(){return this.unsigned?4294967296*(this.high>>>0)+(this.low>>>0):4294967296*this.high+(this.low>>>0)}toBigInt(){return BigInt(this.toString())}toBytes(e){return e?this.toBytesLE():this.toBytesBE()}toBytesLE(){const e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]}toBytesBE(){const e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]}toSigned(){return this.unsigned?i.fromBits(this.low,this.high,!1):this}toString(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(i.MIN_VALUE)){const t=i.fromNumber(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}const t=i.fromNumber(Math.pow(e,6),this.unsigned);let n=this,r="";for(;;){const o=n.div(t);let i=(n.sub(o.mul(t)).toInt()>>>0).toString(e);if(n=o,n.isZero())return i+r;for(;i.length<6;)i="0"+i;r=""+i+r}}toUnsigned(){return this.unsigned?this:i.fromBits(this.low,this.high,!0)}xor(e){return i.isLong(e)||(e=i.fromValue(e)),i.fromBits(this.low^e.low,this.high^e.high,this.unsigned)}toExtendedJSON(e){return e&&e.relaxed?this.toNumber():{$numberLong:this.toString()}}static fromExtendedJSON(e,t){const n=i.fromString(e.$numberLong);return t&&t.relaxed?n.toNumber():n}}t.Long=i,i.TWO_PWR_24=i.fromInt(1<<24),i.MAX_UNSIGNED_VALUE=i.fromBits(-1,-1,!0),i.ZERO=i.fromInt(0),i.UZERO=i.fromInt(0,!0),i.ONE=i.fromInt(1),i.UONE=i.fromInt(1,!0),i.NEG_ONE=i.fromInt(-1),i.MAX_VALUE=i.fromBits(-1,2147483647,!1),i.MIN_VALUE=i.fromBits(0,-2147483648,!1),Object.defineProperty(i.prototype,"__isLong__",{value:!0}),Object.defineProperty(i.prototype,"_bsontype",{value:"Long"})}));i(oe);oe.Long;var ie=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Decimal128=void 0;const n=/^(\+|-)?(\d+|(\d*\.\d*))?(E|e)?([-+])?(\d+)?$/,r=/^(\+|-)?(Infinity|inf)$/i,o=/^(\+|-)?NaN$/i,i=[124,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),s=[248,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),a=[120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0].reverse(),u=/^([-+])?(\d+)?$/;function c(e){return!isNaN(parseInt(e,10))}function f(e){const t=oe.Long.fromNumber(1e9);let n=oe.Long.fromNumber(0);if(!(e.parts[0]||e.parts[1]||e.parts[2]||e.parts[3]))return{quotient:e,rem:n};for(let r=0;r<=3;r++)n=n.shiftLeft(32),n=n.add(new oe.Long(e.parts[r],0)),e.parts[r]=n.div(t).low,n=n.modulo(t);return{quotient:e,rem:n}}function l(e,t){throw new TypeError(`"${e}" is not a valid Decimal128 string - ${t}`)}class p{constructor(e){this.bytes=e}static fromString(e){let t=!1,f=!1,h=!1,d=0,y=0,g=0,v=0,m=0;const _=[0];let b=0,A=0,E=0,S=0,O=0,I=0,T=new oe.Long(0,0),N=new oe.Long(0,0),R=0,B=0;if(e.length>=7e3)throw new TypeError(e+" not a valid Decimal128 string");const D=e.match(n),P=e.match(r),x=e.match(o);if(!D&&!P&&!x||0===e.length)throw new TypeError(e+" not a valid Decimal128 string");if(D){const t=D[2],n=D[4],r=D[5],o=D[6];n&&void 0===o&&l(e,"missing exponent power"),n&&void 0===t&&l(e,"missing exponent base"),void 0===n&&(r||o)&&l(e,"missing e before exponent")}if("+"!==e[B]&&"-"!==e[B]||(t="-"===e[B++]),!c(e[B])&&"."!==e[B]){if("i"===e[B]||"I"===e[B])return new p(w.Buffer.from(t?s:a));if("N"===e[B])return new p(w.Buffer.from(i))}for(;c(e[B])||"."===e[B];)"."!==e[B]?(b<34&&("0"!==e[B]||h)&&(h||(m=y),h=!0,_[A++]=parseInt(e[B],10),b+=1),h&&(g+=1),f&&(v+=1),y+=1,B+=1):(f&&l(e,"contains multiple periods"),f=!0,B+=1);if(f&&!y)throw new TypeError(e+" not a valid Decimal128 string");if("e"===e[B]||"E"===e[B]){const t=e.substr(++B).match(u);if(!t||!t[2])return new p(w.Buffer.from(i));O=parseInt(t[0],10),B+=t[0].length}if(e[B])return new p(w.Buffer.from(i));if(E=0,b){if(S=b-1,d=g,1!==d)for(;"0"===e[m+d-1];)d-=1}else E=0,S=0,_[0]=0,g=1,b=1,d=0;for(O<=v&&v-O>16384?O=-6176:O-=v;O>6111;){if(S+=1,S-E>34){if(_.join("").match(/^0+$/)){O=6111;break}l(e,"overflow")}O-=1}for(;O<-6176||b<g;){if(0===S&&d<b){O=-6176,d=0;break}if(b<g?g-=1:S-=1,O<6111)O+=1;else{if(_.join("").match(/^0+$/)){O=6111;break}l(e,"overflow")}}if(S-E+1<d){let n=y;f&&(m+=1,n+=1),t&&(m+=1,n+=1);const r=parseInt(e[m+S+1],10);let o=0;if(r>=5&&(o=1,5===r))for(o=_[S]%2==1?1:0,I=m+S+2;I<n;I++)if(parseInt(e[I],10)){o=1;break}if(o){let e=S;for(;e>=0;e--)if(++_[e]>9&&(_[e]=0,0===e)){if(!(O<6111))return new p(w.Buffer.from(t?s:a));O+=1,_[e]=1}}}if(T=oe.Long.fromNumber(0),N=oe.Long.fromNumber(0),0===d)T=oe.Long.fromNumber(0),N=oe.Long.fromNumber(0);else if(S-E<17){let e=E;for(N=oe.Long.fromNumber(_[e++]),T=new oe.Long(0,0);e<=S;e++)N=N.multiply(oe.Long.fromNumber(10)),N=N.add(oe.Long.fromNumber(_[e]))}else{let e=E;for(T=oe.Long.fromNumber(_[e++]);e<=S-17;e++)T=T.multiply(oe.Long.fromNumber(10)),T=T.add(oe.Long.fromNumber(_[e]));for(N=oe.Long.fromNumber(_[e++]);e<=S;e++)N=N.multiply(oe.Long.fromNumber(10)),N=N.add(oe.Long.fromNumber(_[e]))}const C=function(e,t){if(!e&&!t)return{high:oe.Long.fromNumber(0),low:oe.Long.fromNumber(0)};const n=e.shiftRightUnsigned(32),r=new oe.Long(e.getLowBits(),0),o=t.shiftRightUnsigned(32),i=new oe.Long(t.getLowBits(),0);let s=n.multiply(o),a=n.multiply(i);const u=r.multiply(o);let c=r.multiply(i);return s=s.add(a.shiftRightUnsigned(32)),a=new oe.Long(a.getLowBits(),0).add(u).add(c.shiftRightUnsigned(32)),s=s.add(a.shiftRightUnsigned(32)),c=a.shiftLeft(32).add(new oe.Long(c.getLowBits(),0)),{high:s,low:c}}(T,oe.Long.fromString("100000000000000000"));C.low=C.low.add(N),function(e,t){const n=e.high>>>0,r=t.high>>>0;if(n<r)return!0;if(n===r){if(e.low>>>0<t.low>>>0)return!0}return!1}(C.low,N)&&(C.high=C.high.add(oe.Long.fromNumber(1))),R=O+6176;const L={low:oe.Long.fromNumber(0),high:oe.Long.fromNumber(0)};C.high.shiftRightUnsigned(49).and(oe.Long.fromNumber(1)).equals(oe.Long.fromNumber(1))?(L.high=L.high.or(oe.Long.fromNumber(3).shiftLeft(61)),L.high=L.high.or(oe.Long.fromNumber(R).and(oe.Long.fromNumber(16383).shiftLeft(47))),L.high=L.high.or(C.high.and(oe.Long.fromNumber(0x7fffffffffff)))):(L.high=L.high.or(oe.Long.fromNumber(16383&R).shiftLeft(49)),L.high=L.high.or(C.high.and(oe.Long.fromNumber(562949953421311)))),L.low=C.low,t&&(L.high=L.high.or(oe.Long.fromString("9223372036854775808")));const k=w.Buffer.alloc(16);return B=0,k[B++]=255&L.low.low,k[B++]=L.low.low>>8&255,k[B++]=L.low.low>>16&255,k[B++]=L.low.low>>24&255,k[B++]=255&L.low.high,k[B++]=L.low.high>>8&255,k[B++]=L.low.high>>16&255,k[B++]=L.low.high>>24&255,k[B++]=255&L.high.low,k[B++]=L.high.low>>8&255,k[B++]=L.high.low>>16&255,k[B++]=L.high.low>>24&255,k[B++]=255&L.high.high,k[B++]=L.high.high>>8&255,k[B++]=L.high.high>>16&255,k[B++]=L.high.high>>24&255,new p(k)}toString(){let e,t=0;const n=new Array(36);for(let e=0;e<n.length;e++)n[e]=0;let r,o,i,s=0,a=!1,u={parts:[0,0,0,0]};const c=[];s=0;const l=this.bytes,p=l[s++]|l[s++]<<8|l[s++]<<16|l[s++]<<24,h=l[s++]|l[s++]<<8|l[s++]<<16|l[s++]<<24,d=l[s++]|l[s++]<<8|l[s++]<<16|l[s++]<<24,y=l[s++]|l[s++]<<8|l[s++]<<16|l[s++]<<24;s=0;({low:new oe.Long(p,h),high:new oe.Long(d,y)}).high.lessThan(oe.Long.ZERO)&&c.push("-");const g=y>>26&31;if(g>>3==3){if(30===g)return c.join("")+"Infinity";if(31===g)return"NaN";e=y>>15&16383,r=8+(y>>14&1)}else r=y>>14&7,e=y>>17&16383;const v=e-6176;if(u.parts[0]=(16383&y)+((15&r)<<14),u.parts[1]=d,u.parts[2]=h,u.parts[3]=p,0===u.parts[0]&&0===u.parts[1]&&0===u.parts[2]&&0===u.parts[3])a=!0;else for(i=3;i>=0;i--){let e=0;const t=f(u);if(u=t.quotient,e=t.rem.low,e)for(o=8;o>=0;o--)n[9*i+o]=e%10,e=Math.floor(e/10)}if(a)t=1,n[s]=0;else for(t=36;!n[s];)t-=1,s+=1;const m=t-1+v;if(m>=34||m<=-7||v>0){if(t>34)return c.push("0"),v>0?c.push("E+"+v):v<0&&c.push("E"+v),c.join("");c.push(""+n[s++]),t-=1,t&&c.push(".");for(let e=0;e<t;e++)c.push(""+n[s++]);c.push("E"),m>0?c.push("+"+m):c.push(""+m)}else if(v>=0)for(let e=0;e<t;e++)c.push(""+n[s++]);else{let e=t+v;if(e>0)for(let t=0;t<e;t++)c.push(""+n[s++]);else c.push("0");for(c.push(".");e++<0;)c.push("0");for(let r=0;r<t-Math.max(e-1,0);r++)c.push(""+n[s++])}return c.join("")}toJSON(){return{$numberDecimal:this.toString()}}toExtendedJSON(){return{$numberDecimal:this.toString()}}static fromExtendedJSON(e){return p.fromString(e.$numberDecimal)}}t.Decimal128=p,Object.defineProperty(p.prototype,"_bsontype",{value:"Decimal128"})}));i(ie);ie.Decimal128;var se=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Double=void 0;class n{constructor(e){e instanceof Number&&(e=e.valueOf()),this.value=+e}valueOf(){return this.value}toJSON(){return this.value}toExtendedJSON(e){if(e&&(e.legacy||e.relaxed&&isFinite(this.value)))return this.value;if(Object.is(Math.sign(this.value),-0))return{$numberDouble:"-"+this.value.toFixed(1)};let t;return Number.isInteger(this.value)?(t=this.value.toFixed(1),t.length>=13&&(t=this.value.toExponential(13).toUpperCase())):t=this.value.toString(),{$numberDouble:t}}static fromExtendedJSON(e,t){const r=parseFloat(e.$numberDouble);return t&&t.relaxed?r:new n(r)}}t.Double=n,Object.defineProperty(n.prototype,"_bsontype",{value:"Double"})}));i(se);se.Double;var ae=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Int32=void 0;class n{constructor(e){e instanceof Number&&(e=e.valueOf()),this.value=+e}valueOf(){return this.value}toJSON(){return this.value}toExtendedJSON(e){return e&&(e.relaxed||e.legacy)?this.value:{$numberInt:this.value.toString()}}static fromExtendedJSON(e,t){return t&&t.relaxed?parseInt(e.$numberInt,10):new n(e.$numberInt)}}t.Int32=n,Object.defineProperty(n.prototype,"_bsontype",{value:"Int32"})}));i(ae);ae.Int32;var ue=s((function(e,t){let n;Object.defineProperty(t,"__esModule",{value:!0}),t.Map=void 0,t.Map=n;const r=function(e){return e&&e.Math==Math&&e};const i=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof o&&o)||Function("return this")();Object.prototype.hasOwnProperty.call(i,"Map")?t.Map=n=i.Map:t.Map=n=class{constructor(e=[]){this._keys=[],this._values={};for(let t=0;t<e.length;t++){if(null==e[t])continue;const n=e[t],r=n[0],o=n[1];this._keys.push(r),this._values[r]={v:o,i:this._keys.length-1}}}clear(){this._keys=[],this._values={}}delete(e){const t=this._values[e];return null!=t&&(delete this._values[e],this._keys.splice(t.i,1),!0)}entries(){let e=0;return{next:()=>{const t=this._keys[e++];return{value:void 0!==t?[t,this._values[t].v]:void 0,done:void 0===t}}}}forEach(e,t){t=t||this;for(let n=0;n<this._keys.length;n++){const r=this._keys[n];e.call(t,this._values[r].v,r,t)}}get(e){return this._values[e]?this._values[e].v:void 0}has(e){return null!=this._values[e]}keys(){let e=0;return{next:()=>{const t=this._keys[e++];return{value:void 0!==t?t:void 0,done:void 0===t}}}}set(e,t){return this._values[e]?(this._values[e].v=t,this):(this._keys.push(e),this._values[e]={v:t,i:this._keys.length-1},this)}values(){let e=0;return{next:()=>{const t=this._keys[e++];return{value:void 0!==t?this._values[t].v:void 0,done:void 0===t}}}}get size(){return this._keys.length}}}));i(ue);ue.Map;var ce=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.MaxKey=void 0;class n{toExtendedJSON(){return{$maxKey:1}}static fromExtendedJSON(){return new n}}t.MaxKey=n,Object.defineProperty(n.prototype,"_bsontype",{value:"MaxKey"})}));i(ce);ce.MaxKey;var fe=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.MinKey=void 0;class n{toExtendedJSON(){return{$minKey:1}}static fromExtendedJSON(){return new n}}t.MinKey=n,Object.defineProperty(n.prototype,"_bsontype",{value:"MinKey"})}));i(fe);fe.MinKey;var le=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.ObjectId=void 0;const n=ne.randomBytes(5),r=new RegExp("^[0-9a-fA-F]{24}$"),o=[];for(let e=0;e<256;e++)o[e]=(e<=15?"0":"")+e.toString(16);const i=[];let s=0;for(;s<10;)i[48+s]=s++;for(;s<16;)i[55+s]=i[87+s]=s++;const a=Symbol("id");class u{constructor(e){if(e instanceof u&&(this[a]=e.id,this.__id=e.__id),"object"==typeof e&&e&&"id"in e&&("toHexString"in e&&"function"==typeof e.toHexString?this[a]=w.Buffer.from(e.toHexString(),"hex"):this[a]="string"==typeof e.id?w.Buffer.from(e.id):e.id),null!=e&&"number"!=typeof e||(this[a]=u.generate("number"==typeof e?e:void 0),u.cacheHexString&&(this.__id=this.id.toString("hex"))),ArrayBuffer.isView(e)&&12===e.byteLength&&(this[a]=A.ensureBuffer(e)),"string"==typeof e)if(12===e.length){const t=w.Buffer.from(e);12===t.byteLength&&(this[a]=t)}else{if(24!==e.length||!r.test(e))throw new TypeError("Argument passed in must be a Buffer or string of 12 bytes or a string of 24 hex characters");this[a]=w.Buffer.from(e,"hex")}u.cacheHexString&&(this.__id=this.id.toString("hex"))}get id(){return this[a]}set id(e){this[a]=e,u.cacheHexString&&(this.__id=e.toString("hex"))}get generationTime(){return this.id.readInt32BE(0)}set generationTime(e){this.id.writeUInt32BE(e,0)}toHexString(){if(u.cacheHexString&&this.__id)return this.__id;const e=this.id.toString("hex");return u.cacheHexString&&!this.__id&&(this.__id=e),e}static getInc(){return u.index=(u.index+1)%16777215}static generate(e){"number"!=typeof e&&(e=~~(Date.now()/1e3));const t=u.getInc(),r=w.Buffer.alloc(12);return r.writeUInt32BE(e,0),r[4]=n[0],r[5]=n[1],r[6]=n[2],r[7]=n[3],r[8]=n[4],r[11]=255&t,r[10]=t>>8&255,r[9]=t>>16&255,r}toString(e){return e?this.id.toString(e):this.toHexString()}toJSON(){return this.toHexString()}equals(e){return null!=e&&(e instanceof u?this.toString()===e.toString():"string"==typeof e&&u.isValid(e)&&12===e.length&&this.id instanceof w.Buffer?e===this.id.toString("binary"):"string"==typeof e&&u.isValid(e)&&24===e.length?e.toLowerCase()===this.toHexString():"string"==typeof e&&u.isValid(e)&&12===e.length?w.Buffer.from(e).equals(this.id):"object"==typeof e&&"toHexString"in e&&"function"==typeof e.toHexString&&e.toHexString()===this.toHexString())}getTimestamp(){const e=new Date,t=this.id.readUInt32BE(0);return e.setTime(1e3*Math.floor(t)),e}static createPk(){return new u}static createFromTime(e){const t=w.Buffer.from([0,0,0,0,0,0,0,0,0,0,0,0]);return t.writeUInt32BE(e,0),new u(t)}static createFromHexString(e){if(void 0===e||null!=e&&24!==e.length)throw new TypeError("Argument passed in must be a single String of 12 bytes or a string of 24 hex characters");return new u(w.Buffer.from(e,"hex"))}static isValid(e){return null!=e&&("number"==typeof e||("string"==typeof e?12===e.length||24===e.length&&r.test(e):e instanceof u||(e instanceof w.Buffer&&12===e.length||"object"==typeof e&&"toHexString"in e&&"function"==typeof e.toHexString&&("string"==typeof e.id?12===e.id.length:24===e.toHexString().length&&r.test(e.id.toString("hex"))))))}toExtendedJSON(){return this.toHexString?{$oid:this.toHexString()}:{$oid:this.toString("hex")}}static fromExtendedJSON(e){return new u(e.$oid)}}t.ObjectId=u,u.index=~~(16777215*Math.random()),Object.defineProperty(u.prototype,"generate",{value:ne.deprecate(e=>u.generate(e),"Please use the static `ObjectId.generate(time)` instead")}),Object.defineProperty(u.prototype,"getInc",{value:ne.deprecate(()=>u.getInc(),"Please use the static `ObjectId.getInc()` instead")}),Object.defineProperty(u.prototype,"get_inc",{value:ne.deprecate(()=>u.getInc(),"Please use the static `ObjectId.getInc()` instead")}),Object.defineProperty(u,"get_inc",{value:ne.deprecate(()=>u.getInc(),"Please use the static `ObjectId.getInc()` instead")});const c=Symbol.for("nodejs.util.inspect.custom");Object.defineProperty(u.prototype,c,u.prototype.toString),Object.defineProperty(u.prototype,"inspect",u.prototype.toString),Object.defineProperty(u.prototype,"_bsontype",{value:"ObjectID"})}));i(le);le.ObjectId;var pe=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.BSON_BINARY_SUBTYPE_USER_DEFINED=t.BSON_BINARY_SUBTYPE_MD5=t.BSON_BINARY_SUBTYPE_UUID_NEW=t.BSON_BINARY_SUBTYPE_UUID=t.BSON_BINARY_SUBTYPE_BYTE_ARRAY=t.BSON_BINARY_SUBTYPE_FUNCTION=t.BSON_BINARY_SUBTYPE_DEFAULT=t.BSON_DATA_MAX_KEY=t.BSON_DATA_MIN_KEY=t.BSON_DATA_DECIMAL128=t.BSON_DATA_LONG=t.BSON_DATA_TIMESTAMP=t.BSON_DATA_INT=t.BSON_DATA_CODE_W_SCOPE=t.BSON_DATA_SYMBOL=t.BSON_DATA_CODE=t.BSON_DATA_DBPOINTER=t.BSON_DATA_REGEXP=t.BSON_DATA_NULL=t.BSON_DATA_DATE=t.BSON_DATA_BOOLEAN=t.BSON_DATA_OID=t.BSON_DATA_UNDEFINED=t.BSON_DATA_BINARY=t.BSON_DATA_ARRAY=t.BSON_DATA_OBJECT=t.BSON_DATA_STRING=t.BSON_DATA_NUMBER=t.JS_INT_MIN=t.JS_INT_MAX=t.BSON_INT64_MIN=t.BSON_INT64_MAX=t.BSON_INT32_MIN=t.BSON_INT32_MAX=void 0,t.BSON_INT32_MAX=2147483647,t.BSON_INT32_MIN=-2147483648,t.BSON_INT64_MAX=Math.pow(2,63)-1,t.BSON_INT64_MIN=-Math.pow(2,63),t.JS_INT_MAX=Math.pow(2,53),t.JS_INT_MIN=-Math.pow(2,53),t.BSON_DATA_NUMBER=1,t.BSON_DATA_STRING=2,t.BSON_DATA_OBJECT=3,t.BSON_DATA_ARRAY=4,t.BSON_DATA_BINARY=5,t.BSON_DATA_UNDEFINED=6,t.BSON_DATA_OID=7,t.BSON_DATA_BOOLEAN=8,t.BSON_DATA_DATE=9,t.BSON_DATA_NULL=10,t.BSON_DATA_REGEXP=11,t.BSON_DATA_DBPOINTER=12,t.BSON_DATA_CODE=13,t.BSON_DATA_SYMBOL=14,t.BSON_DATA_CODE_W_SCOPE=15,t.BSON_DATA_INT=16,t.BSON_DATA_TIMESTAMP=17,t.BSON_DATA_LONG=18,t.BSON_DATA_DECIMAL128=19,t.BSON_DATA_MIN_KEY=255,t.BSON_DATA_MAX_KEY=127,t.BSON_BINARY_SUBTYPE_DEFAULT=0,t.BSON_BINARY_SUBTYPE_FUNCTION=1,t.BSON_BINARY_SUBTYPE_BYTE_ARRAY=2,t.BSON_BINARY_SUBTYPE_UUID=3,t.BSON_BINARY_SUBTYPE_UUID_NEW=4,t.BSON_BINARY_SUBTYPE_MD5=5,t.BSON_BINARY_SUBTYPE_USER_DEFINED=128}));i(pe);pe.BSON_BINARY_SUBTYPE_USER_DEFINED,pe.BSON_BINARY_SUBTYPE_MD5,pe.BSON_BINARY_SUBTYPE_UUID_NEW,pe.BSON_BINARY_SUBTYPE_UUID,pe.BSON_BINARY_SUBTYPE_BYTE_ARRAY,pe.BSON_BINARY_SUBTYPE_FUNCTION,pe.BSON_BINARY_SUBTYPE_DEFAULT,pe.BSON_DATA_MAX_KEY,pe.BSON_DATA_MIN_KEY,pe.BSON_DATA_DECIMAL128,pe.BSON_DATA_LONG,pe.BSON_DATA_TIMESTAMP,pe.BSON_DATA_INT,pe.BSON_DATA_CODE_W_SCOPE,pe.BSON_DATA_SYMBOL,pe.BSON_DATA_CODE,pe.BSON_DATA_DBPOINTER,pe.BSON_DATA_REGEXP,pe.BSON_DATA_NULL,pe.BSON_DATA_DATE,pe.BSON_DATA_BOOLEAN,pe.BSON_DATA_OID,pe.BSON_DATA_UNDEFINED,pe.BSON_DATA_BINARY,pe.BSON_DATA_ARRAY,pe.BSON_DATA_OBJECT,pe.BSON_DATA_STRING,pe.BSON_DATA_NUMBER,pe.JS_INT_MIN,pe.JS_INT_MAX,pe.BSON_INT64_MIN,pe.BSON_INT64_MAX,pe.BSON_INT32_MIN,pe.BSON_INT32_MAX;var he=s((function(e,t){function n(e,t,n){let o=5;if(Array.isArray(e))for(let i=0;i<e.length;i++)o+=r(i.toString(),e[i],t,!0,n);else{e.toBSON&&(e=e.toBSON());for(const i in e)o+=r(i,e[i],t,!1,n)}return o}function r(e,t,r=!1,o=!1,i=!1){switch(t&&t.toBSON&&(t=t.toBSON()),typeof t){case"string":return 1+w.Buffer.byteLength(e,"utf8")+1+4+w.Buffer.byteLength(t,"utf8")+1;case"number":return Math.floor(t)===t&&t>=pe.JS_INT_MIN&&t<=pe.JS_INT_MAX&&t>=pe.BSON_INT32_MIN&&t<=pe.BSON_INT32_MAX?(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+5:(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+9;case"undefined":return o||!i?(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1:0;case"boolean":return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+2;case"object":if(null==t||"MinKey"===t._bsontype||"MaxKey"===t._bsontype)return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1;if("ObjectId"===t._bsontype||"ObjectID"===t._bsontype)return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+13;if(t instanceof Date||ne.isDate(t))return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+9;if(ArrayBuffer.isView(t)||t instanceof ArrayBuffer)return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+6+t.byteLength;if("Long"===t._bsontype||"Double"===t._bsontype||"Timestamp"===t._bsontype)return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+9;if("Decimal128"===t._bsontype)return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+17;if("Code"===t._bsontype)return null!=t.scope&&Object.keys(t.scope).length>0?(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1+4+4+w.Buffer.byteLength(t.code.toString(),"utf8")+1+n(t.scope,r,i):(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1+4+w.Buffer.byteLength(t.code.toString(),"utf8")+1;if("Binary"===t._bsontype)return t.sub_type===S.Binary.SUBTYPE_BYTE_ARRAY?(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+(t.position+1+4+1+4):(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+(t.position+1+4+1);if("Symbol"===t._bsontype)return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+w.Buffer.byteLength(t.value,"utf8")+4+1+1;if("DBRef"===t._bsontype){const o=Object.assign({$ref:t.collection,$id:t.oid},t.fields);return null!=t.db&&(o.$db=t.db),(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1+n(o,r,i)}return t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)?(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1+w.Buffer.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1:"BSONRegExp"===t._bsontype?(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1+w.Buffer.byteLength(t.pattern,"utf8")+1+w.Buffer.byteLength(t.options,"utf8")+1:(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+n(t,r,i)+1;case"function":if(t instanceof RegExp||"[object RegExp]"===Object.prototype.toString.call(t)||"[object RegExp]"===String.call(t))return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1+w.Buffer.byteLength(t.source,"utf8")+1+(t.global?1:0)+(t.ignoreCase?1:0)+(t.multiline?1:0)+1;if(r&&null!=t.scope&&Object.keys(t.scope).length>0)return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1+4+4+w.Buffer.byteLength(ne.normalizedFunctionString(t),"utf8")+1+n(t.scope,r,i);if(r)return(null!=e?w.Buffer.byteLength(e,"utf8")+1:0)+1+4+w.Buffer.byteLength(ne.normalizedFunctionString(t),"utf8")+1}return 0}Object.defineProperty(t,"__esModule",{value:!0}),t.calculateObjectSize=void 0,t.calculateObjectSize=n}));i(he);he.calculateObjectSize;var de=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.BSONRegExp=void 0;class n{constructor(e,t){this.pattern=e,this.options=null!=t?t:"",this.options.split("").sort().join("");for(let e=0;e<this.options.length;e++)if("i"!==this.options[e]&&"m"!==this.options[e]&&"x"!==this.options[e]&&"l"!==this.options[e]&&"s"!==this.options[e]&&"u"!==this.options[e])throw new Error(`The regular expression option [${this.options[e]}] is not supported`)}static parseOptions(e){return e?e.split("").sort().join(""):""}toExtendedJSON(e){return(e=e||{}).legacy?{$regex:this.pattern,$options:this.options}:{$regularExpression:{pattern:this.pattern,options:this.options}}}static fromExtendedJSON(e){if("$regex"in e){if("string"==typeof e.$regex)return new n(e.$regex,n.parseOptions(e.$options));if("BSONRegExp"===e.$regex._bsontype)return e}if("$regularExpression"in e)return new n(e.$regularExpression.pattern,n.parseOptions(e.$regularExpression.options));throw new TypeError("Unexpected BSONRegExp EJSON object form: "+JSON.stringify(e))}}t.BSONRegExp=n,Object.defineProperty(n.prototype,"_bsontype",{value:"BSONRegExp"})}));i(de);de.BSONRegExp;var ye=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.BSONSymbol=void 0;class n{constructor(e){this.value=e}valueOf(){return this.value}toString(){return this.value}inspect(){return this.value}toJSON(){return this.value}toExtendedJSON(){return{$symbol:this.value}}static fromExtendedJSON(e){return new n(e.$symbol)}}t.BSONSymbol=n,Object.defineProperty(n.prototype,"_bsontype",{value:"Symbol"})}));i(ye);ye.BSONSymbol;var ge=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.Timestamp=t.LongWithoutOverridesClass=void 0,t.LongWithoutOverridesClass=oe.Long;class n extends t.LongWithoutOverridesClass{constructor(e,t){oe.Long.isLong(e)?super(e.low,e.high,!0):super(e,t,!0),Object.defineProperty(this,"_bsontype",{value:"Timestamp",writable:!1,configurable:!1,enumerable:!1})}toJSON(){return{$timestamp:this.toString()}}static fromInt(e){return new n(oe.Long.fromInt(e,!0))}static fromNumber(e){return new n(oe.Long.fromNumber(e,!0))}static fromBits(e,t){return new n(e,t)}static fromString(e,t){return new n(oe.Long.fromString(e,!0,t))}toExtendedJSON(){return{$timestamp:{t:this.high>>>0,i:this.low>>>0}}}static fromExtendedJSON(e){return new n(e.$timestamp.i,e.$timestamp.t)}}t.Timestamp=n,n.MAX_VALUE=oe.Long.MAX_UNSIGNED_VALUE}));i(ge);ge.Timestamp,ge.LongWithoutOverridesClass;var ve=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.validateUtf8=void 0;t.validateUtf8=function(e,t,n){let r=0;for(let o=t;o<n;o+=1){const t=e[o];if(r){if(128!=(192&t))return!1;r-=1}else if(128&t)if(192==(224&t))r=1;else if(224==(240&t))r=2;else{if(240!=(248&t))return!1;r=3}}return!r}}));i(ve);ve.validateUtf8;var me=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.deserialize=void 0;const n=oe.Long.fromNumber(pe.JS_INT_MAX),r=oe.Long.fromNumber(pe.JS_INT_MIN),o={};function i(e,t,a,u=!1){const c=null!=a.evalFunctions&&a.evalFunctions,f=null!=a.cacheFunctions&&a.cacheFunctions,l=null==a.fieldsAsRaw?null:a.fieldsAsRaw,p=null!=a.raw&&a.raw,h="boolean"==typeof a.bsonRegExp&&a.bsonRegExp,d=null!=a.promoteBuffers&&a.promoteBuffers,y=null==a.promoteLongs||a.promoteLongs,g=null==a.promoteValues||a.promoteValues,v=t;if(e.length<5)throw new Error("corrupt bson message < 5 bytes long");const m=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(m<5||m>e.length)throw new Error("corrupt bson message");const _=u?[]:{};let b=0;for(;;){const v=e[t++];if(0===v)break;let m=t;for(;0!==e[m]&&m<e.length;)m++;if(m>=e.byteLength)throw new Error("Bad BSON Document: illegal CString");const A=u?b++:e.toString("utf8",t,m);if(t=m+1,v===pe.BSON_DATA_STRING){const n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(n<=0||n>e.length-t||0!==e[t+n-1])throw new Error("bad string length in bson");if(!ve.validateUtf8(e,t,t+n-1))throw new Error("Invalid UTF-8 string in BSON document");const r=e.toString("utf8",t,t+n-1);_[A]=r,t+=n}else if(v===pe.BSON_DATA_OID){const n=w.Buffer.alloc(12);e.copy(n,0,t,t+12),_[A]=new le.ObjectId(n),t+=12}else if(v===pe.BSON_DATA_INT&&!1===g)_[A]=new ae.Int32(e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24);else if(v===pe.BSON_DATA_INT)_[A]=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;else if(v===pe.BSON_DATA_NUMBER&&!1===g)_[A]=new se.Double(e.readDoubleLE(t)),t+=8;else if(v===pe.BSON_DATA_NUMBER)_[A]=e.readDoubleLE(t),t+=8;else if(v===pe.BSON_DATA_DATE){const n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,r=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;_[A]=new Date(new oe.Long(n,r).toNumber())}else if(v===pe.BSON_DATA_BOOLEAN){if(0!==e[t]&&1!==e[t])throw new Error("illegal boolean type value");_[A]=1===e[t++]}else if(v===pe.BSON_DATA_OBJECT){const n=t,r=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24;if(r<=0||r>e.length-t)throw new Error("bad embedded document length in bson");_[A]=p?e.slice(t,t+r):i(e,n,a,!1),t+=r}else if(v===pe.BSON_DATA_ARRAY){const n=t,r=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24;let o=a;const s=t+r;if(l&&l[A]){o={};for(const e in a)o[e]=a[e];o.raw=!0}if(_[A]=i(e,n,o,!0),0!==e[(t+=r)-1])throw new Error("invalid array terminator byte");if(t!==s)throw new Error("corrupted array bson")}else if(v===pe.BSON_DATA_UNDEFINED)_[A]=void 0;else if(v===pe.BSON_DATA_NULL)_[A]=null;else if(v===pe.BSON_DATA_LONG){const o=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,i=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,s=new oe.Long(o,i);_[A]=y&&!0===g&&s.lessThanOrEqual(n)&&s.greaterThanOrEqual(r)?s.toNumber():s}else if(v===pe.BSON_DATA_DECIMAL128){const n=w.Buffer.alloc(16);e.copy(n,0,t,t+16),t+=16;const r=new ie.Decimal128(n);"toObject"in r&&"function"==typeof r.toObject?_[A]=r.toObject():_[A]=r}else if(v===pe.BSON_DATA_BINARY){let n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;const r=n,o=e[t++];if(n<0)throw new Error("Negative binary type element size found");if(n>e.byteLength)throw new Error("Binary type size larger than document size");if(null!=e.slice){if(o===S.Binary.SUBTYPE_BYTE_ARRAY){if(n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,n<0)throw new Error("Negative binary type element size found for subtype 0x02");if(n>r-4)throw new Error("Binary type with subtype 0x02 contains too long binary size");if(n<r-4)throw new Error("Binary type with subtype 0x02 contains too short binary size")}_[A]=d&&g?e.slice(t,t+n):new S.Binary(e.slice(t,t+n),o)}else{const i=w.Buffer.alloc(n);if(o===S.Binary.SUBTYPE_BYTE_ARRAY){if(n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,n<0)throw new Error("Negative binary type element size found for subtype 0x02");if(n>r-4)throw new Error("Binary type with subtype 0x02 contains too long binary size");if(n<r-4)throw new Error("Binary type with subtype 0x02 contains too short binary size")}for(m=0;m<n;m++)i[m]=e[t+m];_[A]=d&&g?i:new S.Binary(i,o)}t+=n}else if(v===pe.BSON_DATA_REGEXP&&!1===h){for(m=t;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");const n=e.toString("utf8",t,m);for(m=t=m+1;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");const r=e.toString("utf8",t,m);t=m+1;const o=new Array(r.length);for(m=0;m<r.length;m++)switch(r[m]){case"m":o[m]="m";break;case"s":o[m]="g";break;case"i":o[m]="i"}_[A]=new RegExp(n,o.join(""))}else if(v===pe.BSON_DATA_REGEXP&&!0===h){for(m=t;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");const n=e.toString("utf8",t,m);for(m=t=m+1;0!==e[m]&&m<e.length;)m++;if(m>=e.length)throw new Error("Bad BSON Document: illegal CString");const r=e.toString("utf8",t,m);t=m+1,_[A]=new de.BSONRegExp(n,r)}else if(v===pe.BSON_DATA_SYMBOL){const n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(n<=0||n>e.length-t||0!==e[t+n-1])throw new Error("bad string length in bson");const r=e.toString("utf8",t,t+n-1);_[A]=g?r:new ye.BSONSymbol(r),t+=n}else if(v===pe.BSON_DATA_TIMESTAMP){const n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24,r=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;_[A]=new ge.Timestamp(n,r)}else if(v===pe.BSON_DATA_MIN_KEY)_[A]=new fe.MinKey;else if(v===pe.BSON_DATA_MAX_KEY)_[A]=new ce.MaxKey;else if(v===pe.BSON_DATA_CODE){const n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(n<=0||n>e.length-t||0!==e[t+n-1])throw new Error("bad string length in bson");const r=e.toString("utf8",t,t+n-1);_[A]=c?f?s(r,o,_):s(r):new O.Code(r),t+=n}else if(v===pe.BSON_DATA_CODE_W_SCOPE){const n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(n<13)throw new Error("code_w_scope total size shorter minimum expected length");const r=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(r<=0||r>e.length-t||0!==e[t+r-1])throw new Error("bad string length in bson");const u=e.toString("utf8",t,t+r-1),l=t+=r,p=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,h=i(e,l,a,!1);if(t+=p,n<8+p+r)throw new Error("code_w_scope total size is too short, truncating scope");if(n>8+p+r)throw new Error("code_w_scope total size is too long, clips outer document");c?(_[A]=f?s(u,o,_):s(u),_[A].scope=h):_[A]=new O.Code(u,h)}else{if(v!==pe.BSON_DATA_DBPOINTER)throw new Error("Detected unknown BSON type "+v.toString(16)+' for fieldname "'+A+'"');{const n=e[t++]|e[t++]<<8|e[t++]<<16|e[t++]<<24;if(n<=0||n>e.length-t||0!==e[t+n-1])throw new Error("bad string length in bson");if(!ve.validateUtf8(e,t,t+n-1))throw new Error("Invalid UTF-8 string in BSON document");const r=e.toString("utf8",t,t+n-1);t+=n;const o=w.Buffer.alloc(12);e.copy(o,0,t,t+12);const i=new le.ObjectId(o);t+=12,_[A]=new re.DBRef(r,i)}}}if(m!==t-v){if(u)throw new Error("corrupt array bson");throw new Error("corrupt object bson")}const A=Object.keys(_).filter(e=>e.startsWith("$"));let E=!0;if(A.forEach(e=>{-1===["$ref","$id","$db"].indexOf(e)&&(E=!1)}),!E)return _;if(re.isDBRefLike(_)){const e=Object.assign({},_);return delete e.$ref,delete e.$id,delete e.$db,new re.DBRef(_.$ref,_.$id,_.$db,e)}return _}function s(e,t,n){return t?(null==t[e]&&(t[e]=new Function(e)),t[e].bind(n)):new Function(e)}t.deserialize=function(e,t,n){const r=(t=null==t?{}:t)&&t.index?t.index:0,o=e[r]|e[r+1]<<8|e[r+2]<<16|e[r+3]<<24;if(o<5)throw new Error("bson size must be >= 5, is "+o);if(t.allowObjectSmallerThanBufferSize&&e.length<o)throw new Error(`buffer length ${e.length} must be >= bson size ${o}`);if(!t.allowObjectSmallerThanBufferSize&&e.length!==o)throw new Error(`buffer length ${e.length} must === bson size ${o}`);if(o+r>e.byteLength)throw new Error(`(bson size ${o} + options.index ${r} must be <= buffer length ${e.byteLength})`);if(0!==e[r+o-1])throw new Error("One object, sized correctly, with a spot for an EOO, but the EOO isn't 0x00");return i(e,r,t,n)}}));i(me);me.deserialize;var _e=s((function(e,t){function n(e){return ne.isObjectLike(e)&&Reflect.has(e,"_bsontype")&&"string"==typeof e._bsontype}Object.defineProperty(t,"__esModule",{value:!0}),t.EJSON=t.isBSONType=void 0,t.isBSONType=n;const r={$oid:le.ObjectId,$binary:S.Binary,$uuid:S.Binary,$symbol:ye.BSONSymbol,$numberInt:ae.Int32,$numberDecimal:ie.Decimal128,$numberDouble:se.Double,$numberLong:oe.Long,$minKey:fe.MinKey,$maxKey:ce.MaxKey,$regex:de.BSONRegExp,$regularExpression:de.BSONRegExp,$timestamp:ge.Timestamp};function o(e){const t=e.toISOString();return 0!==e.getUTCMilliseconds()?t:t.slice(0,-5)+"Z"}function i(e,t){if(Array.isArray(e))return function(e,t){return e.map(e=>i(e,t))}(e,t);if(void 0===e)return null;if(e instanceof Date){const n=e.getTime(),r=n>-1&&n<2534023188e5;return t.legacy?t.relaxed&&r?{$date:e.getTime()}:{$date:o(e)}:t.relaxed&&r?{$date:o(e)}:{$date:{$numberLong:e.getTime().toString()}}}if("number"==typeof e&&!t.relaxed){if(Math.floor(e)===e){const t=e>=-0x8000000000000000&&e<=0x8000000000000000;if(e>=-2147483648&&e<=2147483647)return{$numberInt:e.toString()};if(t)return{$numberLong:e.toString()}}return{$numberDouble:e.toString()}}if(e instanceof RegExp){let n=e.flags;if(void 0===n){const t=e.toString().match(/[gimuy]*$/);t&&(n=t[0])}return new de.BSONRegExp(e.source,n).toExtendedJSON(t)}return null!=e&&"object"==typeof e?function(e,t){if(null==e||"object"!=typeof e)throw new Error("not an object instance");const r=e._bsontype;if(void 0===r){const n={};for(const r in e)n[r]=i(e[r],t);return n}if(n(e)){let n=e;if("function"!=typeof n.toExtendedJSON){const t=s[e._bsontype];if(!t)throw new TypeError("Unrecognized or invalid _bsontype: "+e._bsontype);n=t(n)}return"Code"===r&&n.scope?n=new O.Code(n.code,i(n.scope,t)):"DBRef"===r&&n.oid&&(n=new re.DBRef(n.collection,i(n.oid,t),n.db,n.fields)),n.toExtendedJSON(t)}throw new Error("_bsontype must be a string, but was: "+typeof r)}(e,t):e}const s={Binary:e=>new S.Binary(e.value(),e.sub_type),Code:e=>new O.Code(e.code,e.scope),DBRef:e=>new re.DBRef(e.collection||e.namespace,e.oid,e.db,e.fields),Decimal128:e=>new ie.Decimal128(e.bytes),Double:e=>new se.Double(e.value),Int32:e=>new ae.Int32(e.value),Long:e=>oe.Long.fromBits(null!=e.low?e.low:e.low_,null!=e.low?e.high:e.high_,null!=e.low?e.unsigned:e.unsigned_),MaxKey:()=>new ce.MaxKey,MinKey:()=>new fe.MinKey,ObjectID:e=>new le.ObjectId(e),ObjectId:e=>new le.ObjectId(e),BSONRegExp:e=>new de.BSONRegExp(e.pattern,e.options),Symbol:e=>new ye.BSONSymbol(e.value),Timestamp:e=>ge.Timestamp.fromBits(e.low,e.high)};!function(e){function t(e,t){const n=Object.assign({},{relaxed:!0,legacy:!1},t);return"boolean"==typeof n.relaxed&&(n.strict=!n.relaxed),"boolean"==typeof n.strict&&(n.relaxed=!n.strict),JSON.parse(e,(e,t)=>function e(t,n={}){if("number"==typeof t){if(n.relaxed||n.legacy)return t;if(Math.floor(t)===t){if(t>=-2147483648&&t<=2147483647)return new ae.Int32(t);if(t>=-0x8000000000000000&&t<=0x8000000000000000)return oe.Long.fromNumber(t)}return new se.Double(t)}if(null==t||"object"!=typeof t)return t;if(t.$undefined)return null;const o=Object.keys(t).filter(e=>e.startsWith("$")&&null!=t[e]);for(let e=0;e<o.length;e++){const i=r[o[e]];if(i)return i.fromExtendedJSON(t,n)}if(null!=t.$date){const e=t.$date,r=new Date;return n.legacy?"number"==typeof e?r.setTime(e):"string"==typeof e&&r.setTime(Date.parse(e)):"string"==typeof e?r.setTime(Date.parse(e)):oe.Long.isLong(e)?r.setTime(e.toNumber()):"number"==typeof e&&n.relaxed&&r.setTime(e),r}if(null!=t.$code){const n=Object.assign({},t);return t.$scope&&(n.$scope=e(t.$scope)),O.Code.fromExtendedJSON(t)}if(null!=t.$ref||null!=t.$dbPointer){const e=t.$ref?t:t.$dbPointer;if(e instanceof re.DBRef)return e;const n=Object.keys(e).filter(e=>e.startsWith("$"));let r=!0;if(n.forEach(e=>{-1===["$ref","$id","$db"].indexOf(e)&&(r=!1)}),r)return re.DBRef.fromExtendedJSON(e)}return t}(t,n))}function n(e,t,n,r){null!=n&&"object"==typeof n&&(r=n,n=0),null==t||"object"!=typeof t||Array.isArray(t)||(r=t,t=void 0,n=0);const o=i(e,r=Object.assign({},{relaxed:!0,legacy:!1},r));return JSON.stringify(o,t,n)}e.parse=t,e.stringify=n,e.serialize=function(e,t){return t=t||{},JSON.parse(n(e,t))},e.deserialize=function(e,n){return n=n||{},t(JSON.stringify(e),n)}}(t.EJSON||(t.EJSON={}))}));i(_e);_e.EJSON,_e.isBSONType;var be=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.writeIEEE754=t.readIEEE754=void 0,t.readIEEE754=function(e,t,n,r,o){let i,s;const a="big"===n,u=8*o-r-1,c=(1<<u)-1,f=c>>1;let l=-7,p=a?0:o-1;const h=a?1:-1;let d=e[t+p];for(p+=h,i=d&(1<<-l)-1,d>>=-l,l+=u;l>0;i=256*i+e[t+p],p+=h,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+e[t+p],p+=h,l-=8);if(0===i)i=1-f;else{if(i===c)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),i-=f}return(d?-1:1)*s*Math.pow(2,i-r)},t.writeIEEE754=function(e,t,n,r,o,i){let s,a,u;const c="big"===r;let f=8*i-o-1;const l=(1<<f)-1,p=l>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0;let d=c?i-1:0;const y=c?-1:1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+p>=1?h/u:h*Math.pow(2,1-p))*u>=2&&(s++,u/=2),s+p>=l?(a=0,s=l):s+p>=1?(a=(t*u-1)*Math.pow(2,o),s+=p):(a=t*Math.pow(2,p-1)*Math.pow(2,o),s=0)),isNaN(t)&&(a=0);o>=8;)e[n+d]=255&a,d+=y,a/=256,o-=8;for(s=s<<o|a,isNaN(t)&&(s+=8),f+=o;f>0;)e[n+d]=255&s,d+=y,s/=256,f-=8;e[n+d-y]|=128*g}}));i(be);be.writeIEEE754,be.readIEEE754;var we=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.serializeInto=void 0;const n=/\x00/,r=new Set(["$db","$ref","$id","$clusterTime"]);function o(e){return"[object RegExp]"===Object.prototype.toString.call(e)}function i(e,t,n,r,o){e[r++]=pe.BSON_DATA_STRING;const i=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8");e[(r=r+i+1)-1]=0;const s=e.write(n,r+4,void 0,"utf8");return e[r+3]=s+1>>24&255,e[r+2]=s+1>>16&255,e[r+1]=s+1>>8&255,e[r]=s+1&255,r=r+4+s,e[r++]=0,r}function s(e,t,n,r,o){if(Number.isInteger(n)&&n>=pe.BSON_INT32_MIN&&n<=pe.BSON_INT32_MAX){e[r++]=pe.BSON_DATA_INT;r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255}else{e[r++]=pe.BSON_DATA_NUMBER;r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0,be.writeIEEE754(e,n,r,"little",52,8),r+=8}return r}function a(e,t,n,r,o){e[r++]=pe.BSON_DATA_NULL;return r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0,r}function u(e,t,n,r,o){e[r++]=pe.BSON_DATA_BOOLEAN;return r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0,e[r++]=n?1:0,r}function c(e,t,n,r,o){e[r++]=pe.BSON_DATA_DATE;r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;const i=oe.Long.fromNumber(n.getTime()),s=i.getLowBits(),a=i.getHighBits();return e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=255&a,e[r++]=a>>8&255,e[r++]=a>>16&255,e[r++]=a>>24&255,r}function f(e,t,r,o,i){e[o++]=pe.BSON_DATA_REGEXP;if(o+=i?e.write(t,o,void 0,"ascii"):e.write(t,o,void 0,"utf8"),e[o++]=0,r.source&&null!=r.source.match(n))throw Error("value "+r.source+" must not contain null bytes");return o+=e.write(r.source,o,void 0,"utf8"),e[o++]=0,r.ignoreCase&&(e[o++]=105),r.global&&(e[o++]=115),r.multiline&&(e[o++]=109),e[o++]=0,o}function l(e,t,r,o,i){e[o++]=pe.BSON_DATA_REGEXP;if(o+=i?e.write(t,o,void 0,"ascii"):e.write(t,o,void 0,"utf8"),e[o++]=0,null!=r.pattern.match(n))throw Error("pattern "+r.pattern+" must not contain null bytes");return o+=e.write(r.pattern,o,void 0,"utf8"),e[o++]=0,o+=e.write(r.options.split("").sort().join(""),o,void 0,"utf8"),e[o++]=0,o}function p(e,t,n,r,o){null===n?e[r++]=pe.BSON_DATA_NULL:"MinKey"===n._bsontype?e[r++]=pe.BSON_DATA_MIN_KEY:e[r++]=pe.BSON_DATA_MAX_KEY;return r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0,r}function h(e,t,n,r,o){e[r++]=pe.BSON_DATA_OID;if(r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0,"string"==typeof n.id)e.write(n.id,r,void 0,"binary");else{if(!n.id||!n.id.copy)throw new TypeError("object ["+JSON.stringify(n)+"] is not a valid ObjectId");n.id.copy(e,r,0,12)}return r+12}function d(e,t,n,r,o){e[r++]=pe.BSON_DATA_BINARY;r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;const i=n.length;return e[r++]=255&i,e[r++]=i>>8&255,e[r++]=i>>16&255,e[r++]=i>>24&255,e[r++]=pe.BSON_BINARY_SUBTYPE_DEFAULT,e.set(A.ensureBuffer(n),r),r+=i}function y(e,t,n,r,o=!1,i=0,s=!1,a=!0,u=!1,c=[]){for(let e=0;e<c.length;e++)if(c[e]===n)throw new Error("cyclic dependency detected");c.push(n),e[r++]=Array.isArray(n)?pe.BSON_DATA_ARRAY:pe.BSON_DATA_OBJECT;r+=u?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;const f=N(e,n,o,r,i+1,s,a,c);return c.pop(),f}function g(e,t,n,r,o){e[r++]=pe.BSON_DATA_DECIMAL128;return r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0,n.bytes.copy(e,r,0,16),r+16}function v(e,t,n,r,o){e[r++]="Long"===n._bsontype?pe.BSON_DATA_LONG:pe.BSON_DATA_TIMESTAMP;r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;const i=n.getLowBits(),s=n.getHighBits();return e[r++]=255&i,e[r++]=i>>8&255,e[r++]=i>>16&255,e[r++]=i>>24&255,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,r}function m(e,t,n,r,o){n=n.valueOf(),e[r++]=pe.BSON_DATA_INT;return r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0,e[r++]=255&n,e[r++]=n>>8&255,e[r++]=n>>16&255,e[r++]=n>>24&255,r}function _(e,t,n,r,o){e[r++]=pe.BSON_DATA_NUMBER;return r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0,be.writeIEEE754(e,n.value,r,"little",52,8),r+=8}function b(e,t,n,r,o=!1,i=0,s){e[r++]=pe.BSON_DATA_CODE;r+=s?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;const a=ne.normalizedFunctionString(n),u=e.write(a,r+4,void 0,"utf8")+1;return e[r]=255&u,e[r+1]=u>>8&255,e[r+2]=u>>16&255,e[r+3]=u>>24&255,r=r+4+u-1,e[r++]=0,r}function E(e,t,n,r,o=!1,i=0,s=!1,a=!0,u=!1){if(n.scope&&"object"==typeof n.scope){e[r++]=pe.BSON_DATA_CODE_W_SCOPE;r+=u?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;let c=r;const f="string"==typeof n.code?n.code:n.code.toString();r+=4;const l=e.write(f,r+4,void 0,"utf8")+1;e[r]=255&l,e[r+1]=l>>8&255,e[r+2]=l>>16&255,e[r+3]=l>>24&255,e[r+4+l-1]=0,r=r+l+4;const p=N(e,n.scope,o,r,i+1,s,a);r=p-1;const h=p-c;e[c++]=255&h,e[c++]=h>>8&255,e[c++]=h>>16&255,e[c++]=h>>24&255,e[r++]=0}else{e[r++]=pe.BSON_DATA_CODE;r+=u?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;const o=n.code.toString(),i=e.write(o,r+4,void 0,"utf8")+1;e[r]=255&i,e[r+1]=i>>8&255,e[r+2]=i>>16&255,e[r+3]=i>>24&255,r=r+4+i-1,e[r++]=0}return r}function O(e,t,n,r,o){e[r++]=pe.BSON_DATA_BINARY;r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;const i=n.value(!0);let s=n.position;return n.sub_type===S.Binary.SUBTYPE_BYTE_ARRAY&&(s+=4),e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255,e[r++]=n.sub_type,n.sub_type===S.Binary.SUBTYPE_BYTE_ARRAY&&(s-=4,e[r++]=255&s,e[r++]=s>>8&255,e[r++]=s>>16&255,e[r++]=s>>24&255),e.set(i,r),r+=n.position}function I(e,t,n,r,o){e[r++]=pe.BSON_DATA_SYMBOL;r+=o?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;const i=e.write(n.value,r+4,void 0,"utf8")+1;return e[r]=255&i,e[r+1]=i>>8&255,e[r+2]=i>>16&255,e[r+3]=i>>24&255,r=r+4+i-1,e[r++]=0,r}function T(e,t,n,r,o,i,s){e[r++]=pe.BSON_DATA_OBJECT;r+=s?e.write(t,r,void 0,"ascii"):e.write(t,r,void 0,"utf8"),e[r++]=0;let a=r,u={$ref:n.collection||n.namespace,$id:n.oid};null!=n.db&&(u.$db=n.db),u=Object.assign(u,n.fields);const c=N(e,u,!1,r,o+1,i),f=c-a;return e[a++]=255&f,e[a++]=f>>8&255,e[a++]=f>>16&255,e[a++]=f>>24&255,c}function N(e,t,A=!1,S=0,N=0,R=!1,B=!0,D=[]){S=S||0,(D=D||[]).push(t);let P=S+4;if(Array.isArray(t))for(let n=0;n<t.length;n++){const r=""+n;let S=t[n];if(S&&S.toBSON){if("function"!=typeof S.toBSON)throw new TypeError("toBSON is not a function");S=S.toBSON()}if("string"==typeof S)P=i(e,r,S,P,!0);else if("number"==typeof S)P=s(e,r,S,P,!0);else{if("bigint"==typeof S)throw new TypeError("Unsupported type BigInt, please use Decimal128");if("boolean"==typeof S)P=u(e,r,S,P,!0);else if(S instanceof Date||ne.isDate(S))P=c(e,r,S,P,!0);else if(void 0===S)P=a(e,r,0,P,!0);else if(null===S)P=a(e,r,0,P,!0);else if("ObjectId"===S._bsontype||"ObjectID"===S._bsontype)P=h(e,r,S,P,!0);else if(w.Buffer.isBuffer(S)||ne.isUint8Array(S))P=d(e,r,S,P,!0);else if(S instanceof RegExp||o(S))P=f(e,r,S,P,!0);else if("object"==typeof S&&null==S._bsontype)P=y(e,r,S,P,A,N,R,B,!0,D);else if("object"==typeof S&&_e.isBSONType(S)&&"Decimal128"===S._bsontype)P=g(e,r,S,P,!0);else if("Long"===S._bsontype||"Timestamp"===S._bsontype)P=v(e,r,S,P,!0);else if("Double"===S._bsontype)P=_(e,r,S,P,!0);else if("function"==typeof S&&R)P=b(e,r,S,P,A,N,!0);else if("Code"===S._bsontype)P=E(e,r,S,P,A,N,R,B,!0);else if("Binary"===S._bsontype)P=O(e,r,S,P,!0);else if("Symbol"===S._bsontype)P=I(e,r,S,P,!0);else if("DBRef"===S._bsontype)P=T(e,r,S,P,N,R,!0);else if("BSONRegExp"===S._bsontype)P=l(e,r,S,P,!0);else if("Int32"===S._bsontype)P=m(e,r,S,P,!0);else if("MinKey"===S._bsontype||"MaxKey"===S._bsontype)P=p(e,r,S,P,!0);else if(void 0!==S._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+S._bsontype)}}else if(t instanceof ue.Map){const S=t.entries();let x=!1;for(;!x;){const t=S.next();if(x=!!t.done,x)continue;const C=t.value[0],L=t.value[1],k=typeof L;if("string"==typeof C&&!r.has(C)){if(null!=C.match(n))throw Error("key "+C+" must not contain null bytes");if(A){if("$"===C[0])throw Error("key "+C+" must not start with '$'");if(~C.indexOf("."))throw Error("key "+C+" must not contain '.'")}}if("string"===k)P=i(e,C,L,P);else if("number"===k)P=s(e,C,L,P);else{if("bigint"===k||ne.isBigInt64Array(L)||ne.isBigUInt64Array(L))throw new TypeError("Unsupported type BigInt, please use Decimal128");if("boolean"===k)P=u(e,C,L,P);else if(L instanceof Date||ne.isDate(L))P=c(e,C,L,P);else if(null===L||void 0===L&&!1===B)P=a(e,C,0,P);else if("ObjectId"===L._bsontype||"ObjectID"===L._bsontype)P=h(e,C,L,P);else if(w.Buffer.isBuffer(L)||ne.isUint8Array(L))P=d(e,C,L,P);else if(L instanceof RegExp||o(L))P=f(e,C,L,P);else if("object"===k&&null==L._bsontype)P=y(e,C,L,P,A,N,R,B,!1,D);else if("object"===k&&"Decimal128"===L._bsontype)P=g(e,C,L,P);else if("Long"===L._bsontype||"Timestamp"===L._bsontype)P=v(e,C,L,P);else if("Double"===L._bsontype)P=_(e,C,L,P);else if("Code"===L._bsontype)P=E(e,C,L,P,A,N,R,B);else if("function"==typeof L&&R)P=b(e,C,L,P,A,N,R);else if("Binary"===L._bsontype)P=O(e,C,L,P);else if("Symbol"===L._bsontype)P=I(e,C,L,P);else if("DBRef"===L._bsontype)P=T(e,C,L,P,N,R);else if("BSONRegExp"===L._bsontype)P=l(e,C,L,P);else if("Int32"===L._bsontype)P=m(e,C,L,P);else if("MinKey"===L._bsontype||"MaxKey"===L._bsontype)P=p(e,C,L,P);else if(void 0!==L._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+L._bsontype)}}}else{if(t.toBSON){if("function"!=typeof t.toBSON)throw new TypeError("toBSON is not a function");if(null!=(t=t.toBSON())&&"object"!=typeof t)throw new TypeError("toBSON function did not return an object")}for(const S in t){let x=t[S];if(x&&x.toBSON){if("function"!=typeof x.toBSON)throw new TypeError("toBSON is not a function");x=x.toBSON()}const C=typeof x;if("string"==typeof S&&!r.has(S)){if(null!=S.match(n))throw Error("key "+S+" must not contain null bytes");if(A){if("$"===S[0])throw Error("key "+S+" must not start with '$'");if(~S.indexOf("."))throw Error("key "+S+" must not contain '.'")}}if("string"===C)P=i(e,S,x,P);else if("number"===C)P=s(e,S,x,P);else{if("bigint"===C)throw new TypeError("Unsupported type BigInt, please use Decimal128");if("boolean"===C)P=u(e,S,x,P);else if(x instanceof Date||ne.isDate(x))P=c(e,S,x,P);else if(void 0===x)!1===B&&(P=a(e,S,0,P));else if(null===x)P=a(e,S,0,P);else if("ObjectId"===x._bsontype||"ObjectID"===x._bsontype)P=h(e,S,x,P);else if(w.Buffer.isBuffer(x)||ne.isUint8Array(x))P=d(e,S,x,P);else if(x instanceof RegExp||o(x))P=f(e,S,x,P);else if("object"===C&&null==x._bsontype)P=y(e,S,x,P,A,N,R,B,!1,D);else if("object"===C&&"Decimal128"===x._bsontype)P=g(e,S,x,P);else if("Long"===x._bsontype||"Timestamp"===x._bsontype)P=v(e,S,x,P);else if("Double"===x._bsontype)P=_(e,S,x,P);else if("Code"===x._bsontype)P=E(e,S,x,P,A,N,R,B);else if("function"==typeof x&&R)P=b(e,S,x,P,A,N,R);else if("Binary"===x._bsontype)P=O(e,S,x,P);else if("Symbol"===x._bsontype)P=I(e,S,x,P);else if("DBRef"===x._bsontype)P=T(e,S,x,P,N,R);else if("BSONRegExp"===x._bsontype)P=l(e,S,x,P);else if("Int32"===x._bsontype)P=m(e,S,x,P);else if("MinKey"===x._bsontype||"MaxKey"===x._bsontype)P=p(e,S,x,P);else if(void 0!==x._bsontype)throw new TypeError("Unrecognized or invalid _bsontype: "+x._bsontype)}}}D.pop(),e[P++]=0;const x=P-S;return e[S++]=255&x,e[S++]=x>>8&255,e[S++]=x>>16&255,e[S++]=x>>24&255,P}t.serializeInto=N}));i(we);we.serializeInto;var Ae=s((function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.deserializeStream=t.calculateObjectSize=t.deserialize=t.serializeWithBufferAndIndex=t.serialize=t.setInternalBufferSize=t.ObjectID=t.Decimal128=t.BSONRegExp=t.MaxKey=t.MinKey=t.Int32=t.Double=t.Timestamp=t.Long=t.ObjectId=t.Binary=t.DBRef=t.BSONSymbol=t.Map=t.Code=t.LongWithoutOverridesClass=t.EJSON=t.JS_INT_MIN=t.JS_INT_MAX=t.BSON_INT64_MIN=t.BSON_INT64_MAX=t.BSON_INT32_MIN=t.BSON_INT32_MAX=t.BSON_DATA_UNDEFINED=t.BSON_DATA_TIMESTAMP=t.BSON_DATA_SYMBOL=t.BSON_DATA_STRING=t.BSON_DATA_REGEXP=t.BSON_DATA_OID=t.BSON_DATA_OBJECT=t.BSON_DATA_NUMBER=t.BSON_DATA_NULL=t.BSON_DATA_MIN_KEY=t.BSON_DATA_MAX_KEY=t.BSON_DATA_LONG=t.BSON_DATA_INT=t.BSON_DATA_DECIMAL128=t.BSON_DATA_DBPOINTER=t.BSON_DATA_DATE=t.BSON_DATA_CODE_W_SCOPE=t.BSON_DATA_CODE=t.BSON_DATA_BOOLEAN=t.BSON_DATA_BINARY=t.BSON_DATA_ARRAY=t.BSON_BINARY_SUBTYPE_UUID_NEW=t.BSON_BINARY_SUBTYPE_UUID=t.BSON_BINARY_SUBTYPE_USER_DEFINED=t.BSON_BINARY_SUBTYPE_MD5=t.BSON_BINARY_SUBTYPE_FUNCTION=t.BSON_BINARY_SUBTYPE_DEFAULT=t.BSON_BINARY_SUBTYPE_BYTE_ARRAY=void 0,Object.defineProperty(t,"Binary",{enumerable:!0,get:function(){return S.Binary}}),Object.defineProperty(t,"Code",{enumerable:!0,get:function(){return O.Code}}),Object.defineProperty(t,"DBRef",{enumerable:!0,get:function(){return re.DBRef}}),Object.defineProperty(t,"Decimal128",{enumerable:!0,get:function(){return ie.Decimal128}}),Object.defineProperty(t,"Double",{enumerable:!0,get:function(){return se.Double}}),Object.defineProperty(t,"Int32",{enumerable:!0,get:function(){return ae.Int32}}),Object.defineProperty(t,"Long",{enumerable:!0,get:function(){return oe.Long}}),Object.defineProperty(t,"Map",{enumerable:!0,get:function(){return ue.Map}}),Object.defineProperty(t,"MaxKey",{enumerable:!0,get:function(){return ce.MaxKey}}),Object.defineProperty(t,"MinKey",{enumerable:!0,get:function(){return fe.MinKey}}),Object.defineProperty(t,"ObjectId",{enumerable:!0,get:function(){return le.ObjectId}}),Object.defineProperty(t,"ObjectID",{enumerable:!0,get:function(){return le.ObjectId}}),Object.defineProperty(t,"BSONRegExp",{enumerable:!0,get:function(){return de.BSONRegExp}}),Object.defineProperty(t,"BSONSymbol",{enumerable:!0,get:function(){return ye.BSONSymbol}}),Object.defineProperty(t,"Timestamp",{enumerable:!0,get:function(){return ge.Timestamp}}),Object.defineProperty(t,"BSON_BINARY_SUBTYPE_BYTE_ARRAY",{enumerable:!0,get:function(){return pe.BSON_BINARY_SUBTYPE_BYTE_ARRAY}}),Object.defineProperty(t,"BSON_BINARY_SUBTYPE_DEFAULT",{enumerable:!0,get:function(){return pe.BSON_BINARY_SUBTYPE_DEFAULT}}),Object.defineProperty(t,"BSON_BINARY_SUBTYPE_FUNCTION",{enumerable:!0,get:function(){return pe.BSON_BINARY_SUBTYPE_FUNCTION}}),Object.defineProperty(t,"BSON_BINARY_SUBTYPE_MD5",{enumerable:!0,get:function(){return pe.BSON_BINARY_SUBTYPE_MD5}}),Object.defineProperty(t,"BSON_BINARY_SUBTYPE_USER_DEFINED",{enumerable:!0,get:function(){return pe.BSON_BINARY_SUBTYPE_USER_DEFINED}}),Object.defineProperty(t,"BSON_BINARY_SUBTYPE_UUID",{enumerable:!0,get:function(){return pe.BSON_BINARY_SUBTYPE_UUID}}),Object.defineProperty(t,"BSON_BINARY_SUBTYPE_UUID_NEW",{enumerable:!0,get:function(){return pe.BSON_BINARY_SUBTYPE_UUID_NEW}}),Object.defineProperty(t,"BSON_DATA_ARRAY",{enumerable:!0,get:function(){return pe.BSON_DATA_ARRAY}}),Object.defineProperty(t,"BSON_DATA_BINARY",{enumerable:!0,get:function(){return pe.BSON_DATA_BINARY}}),Object.defineProperty(t,"BSON_DATA_BOOLEAN",{enumerable:!0,get:function(){return pe.BSON_DATA_BOOLEAN}}),Object.defineProperty(t,"BSON_DATA_CODE",{enumerable:!0,get:function(){return pe.BSON_DATA_CODE}}),Object.defineProperty(t,"BSON_DATA_CODE_W_SCOPE",{enumerable:!0,get:function(){return pe.BSON_DATA_CODE_W_SCOPE}}),Object.defineProperty(t,"BSON_DATA_DATE",{enumerable:!0,get:function(){return pe.BSON_DATA_DATE}}),Object.defineProperty(t,"BSON_DATA_DBPOINTER",{enumerable:!0,get:function(){return pe.BSON_DATA_DBPOINTER}}),Object.defineProperty(t,"BSON_DATA_DECIMAL128",{enumerable:!0,get:function(){return pe.BSON_DATA_DECIMAL128}}),Object.defineProperty(t,"BSON_DATA_INT",{enumerable:!0,get:function(){return pe.BSON_DATA_INT}}),Object.defineProperty(t,"BSON_DATA_LONG",{enumerable:!0,get:function(){return pe.BSON_DATA_LONG}}),Object.defineProperty(t,"BSON_DATA_MAX_KEY",{enumerable:!0,get:function(){return pe.BSON_DATA_MAX_KEY}}),Object.defineProperty(t,"BSON_DATA_MIN_KEY",{enumerable:!0,get:function(){return pe.BSON_DATA_MIN_KEY}}),Object.defineProperty(t,"BSON_DATA_NULL",{enumerable:!0,get:function(){return pe.BSON_DATA_NULL}}),Object.defineProperty(t,"BSON_DATA_NUMBER",{enumerable:!0,get:function(){return pe.BSON_DATA_NUMBER}}),Object.defineProperty(t,"BSON_DATA_OBJECT",{enumerable:!0,get:function(){return pe.BSON_DATA_OBJECT}}),Object.defineProperty(t,"BSON_DATA_OID",{enumerable:!0,get:function(){return pe.BSON_DATA_OID}}),Object.defineProperty(t,"BSON_DATA_REGEXP",{enumerable:!0,get:function(){return pe.BSON_DATA_REGEXP}}),Object.defineProperty(t,"BSON_DATA_STRING",{enumerable:!0,get:function(){return pe.BSON_DATA_STRING}}),Object.defineProperty(t,"BSON_DATA_SYMBOL",{enumerable:!0,get:function(){return pe.BSON_DATA_SYMBOL}}),Object.defineProperty(t,"BSON_DATA_TIMESTAMP",{enumerable:!0,get:function(){return pe.BSON_DATA_TIMESTAMP}}),Object.defineProperty(t,"BSON_DATA_UNDEFINED",{enumerable:!0,get:function(){return pe.BSON_DATA_UNDEFINED}}),Object.defineProperty(t,"BSON_INT32_MAX",{enumerable:!0,get:function(){return pe.BSON_INT32_MAX}}),Object.defineProperty(t,"BSON_INT32_MIN",{enumerable:!0,get:function(){return pe.BSON_INT32_MIN}}),Object.defineProperty(t,"BSON_INT64_MAX",{enumerable:!0,get:function(){return pe.BSON_INT64_MAX}}),Object.defineProperty(t,"BSON_INT64_MIN",{enumerable:!0,get:function(){return pe.BSON_INT64_MIN}}),Object.defineProperty(t,"JS_INT_MAX",{enumerable:!0,get:function(){return pe.JS_INT_MAX}}),Object.defineProperty(t,"JS_INT_MIN",{enumerable:!0,get:function(){return pe.JS_INT_MIN}}),Object.defineProperty(t,"EJSON",{enumerable:!0,get:function(){return _e.EJSON}});var n=ge;Object.defineProperty(t,"LongWithoutOverridesClass",{enumerable:!0,get:function(){return n.LongWithoutOverridesClass}});let r=w.Buffer.alloc(17825792);t.setInternalBufferSize=function(e){r.length<e&&(r=w.Buffer.alloc(e))},t.serialize=function(e,t={}){const n="boolean"==typeof t.checkKeys&&t.checkKeys,o="boolean"==typeof t.serializeFunctions&&t.serializeFunctions,i="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined,s="number"==typeof t.minInternalBufferSize?t.minInternalBufferSize:17825792;r.length<s&&(r=w.Buffer.alloc(s));const a=we.serializeInto(r,e,n,0,0,o,i,[]),u=w.Buffer.alloc(a);return r.copy(u,0,0,u.length),u},t.serializeWithBufferAndIndex=function(e,t,n={}){const o="boolean"==typeof n.checkKeys&&n.checkKeys,i="boolean"==typeof n.serializeFunctions&&n.serializeFunctions,s="boolean"!=typeof n.ignoreUndefined||n.ignoreUndefined,a="number"==typeof n.index?n.index:0,u=we.serializeInto(r,e,o,0,0,i,s);return r.copy(t,a,0,u),a+u-1},t.deserialize=function(e,t={}){return me.deserialize(A.ensureBuffer(e),t)},t.calculateObjectSize=function(e,t={}){const n="boolean"==typeof(t=t||{}).serializeFunctions&&t.serializeFunctions,r="boolean"!=typeof t.ignoreUndefined||t.ignoreUndefined;return he.calculateObjectSize(e,n,r)},t.deserializeStream=function(e,t,n,r,o,i){const s=Object.assign({allowObjectSmallerThanBufferSize:!0,index:0},i),a=A.ensureBuffer(e);let u=t;for(let e=0;e<n;e++){const t=a[u]|a[u+1]<<8|a[u+2]<<16|a[u+3]<<24;s.index=u,r[o+e]=me.deserialize(a,s),u+=t}return u}})),Ee=(i(Ae),Ae.deserializeStream,Ae.calculateObjectSize,Ae.deserialize,Ae.serializeWithBufferAndIndex,Ae.serialize,Ae.setInternalBufferSize,Ae.ObjectID,Ae.Decimal128,Ae.BSONRegExp,Ae.MaxKey,Ae.MinKey,Ae.Int32,Ae.Double,Ae.Timestamp,Ae.Long,Ae.ObjectId,Ae.Binary,Ae.DBRef,Ae.BSONSymbol,Ae.Map,Ae.Code,Ae.LongWithoutOverridesClass,Ae.EJSON);Ae.JS_INT_MIN,Ae.JS_INT_MAX,Ae.BSON_INT64_MIN,Ae.BSON_INT64_MAX,Ae.BSON_INT32_MIN,Ae.BSON_INT32_MAX,Ae.BSON_DATA_UNDEFINED,Ae.BSON_DATA_TIMESTAMP,Ae.BSON_DATA_SYMBOL,Ae.BSON_DATA_STRING,Ae.BSON_DATA_REGEXP,Ae.BSON_DATA_OID,Ae.BSON_DATA_OBJECT,Ae.BSON_DATA_NUMBER,Ae.BSON_DATA_NULL,Ae.BSON_DATA_MIN_KEY,Ae.BSON_DATA_MAX_KEY,Ae.BSON_DATA_LONG,Ae.BSON_DATA_INT,Ae.BSON_DATA_DECIMAL128,Ae.BSON_DATA_DBPOINTER,Ae.BSON_DATA_DATE,Ae.BSON_DATA_CODE_W_SCOPE,Ae.BSON_DATA_CODE,Ae.BSON_DATA_BOOLEAN,Ae.BSON_DATA_BINARY,Ae.BSON_DATA_ARRAY,Ae.BSON_BINARY_SUBTYPE_UUID_NEW,Ae.BSON_BINARY_SUBTYPE_UUID,Ae.BSON_BINARY_SUBTYPE_USER_DEFINED,Ae.BSON_BINARY_SUBTYPE_MD5,Ae.BSON_BINARY_SUBTYPE_FUNCTION,Ae.BSON_BINARY_SUBTYPE_DEFAULT,Ae.BSON_BINARY_SUBTYPE_BYTE_ARRAY}).call(this,n(3),n(28).Buffer)},function(e,t,n){"use strict";(function(e){n.d(t,"h",(function(){return u})),n.d(t,"e",(function(){return c})),n.d(t,"g",(function(){return f})),n.d(t,"d",(function(){return l})),n.d(t,"a",(function(){return h})),n.d(t,"f",(function(){return g})),n.d(t,"c",(function(){return v})),n.d(t,"b",(function(){return p}));var r=n(0),o=r.constants.setSdkName,i=r.constants.setProtocol,s="",a="@cloudbase/js-sdk";function u(e){s=e}function c(){return s}function f(e){a=e,o(e)}function l(){return a}var p,h="2020-01-10",d="undefined"!=typeof location&&"http:"===location.protocol?"http:":"https:",y="//tcb-api.tencentcloudapi.com/web";function g(e,t){y=e,t&&(d=t,i(t))}function v(){return{BASE_URL:y,PROTOCOL:d}}!function(e){e.ANONYMOUS="ANONYMOUS",e.WECHAT="WECHAT",e.CUSTOM="CUSTOM",e.NULL="NULL"}(p||(p={}))}).call(this,n(8))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r;n.r(t),n.d(t,"StorageType",(function(){return r})),n.d(t,"AbstractSDKRequest",(function(){return o})),n.d(t,"AbstractStorage",(function(){return i})),n.d(t,"formatUrl",(function(){return s})),function(e){e.local="local",e.none="none",e.session="session"}(r||(r={}));var o=function(){},i=function(){};function s(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var i in n)""===o?!r&&(t+="?"):o+="&",o+=i+"="+encodeURIComponent(n[i]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t}},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.sleep=t.printGroupLog=t.throwError=t.printInfo=t.printError=t.printWarn=t.execCallback=t.createPromiseCallback=t.removeParam=t.getHash=t.getQuery=t.toQueryString=t.createSign=t.formatUrl=t.genSeqId=t.isFormData=t.isInstanceOf=t.isNull=t.isPalinObject=t.isUndefined=t.isString=t.isArray=void 0;var o=r(n(18)),i=r(n(21)),s=r(n(22)),a=n(7);function u(e){var t=i.default.stringify(e);return t=(t=(t=t.replace(/=+$/,"")).replace(/\+/g,"-")).replace(/\//g,"_")}t.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},t.isString=function(e){return"string"==typeof e},t.isUndefined=function(e){return void 0===e},t.isPalinObject=function(e){return"[object Object]"===Object.prototype.toString.call(e)},t.isNull=function(e){return"[object Null]"===Object.prototype.toString.call(e)},t.isInstanceOf=function(e,t){return e instanceof t},t.isFormData=function(e){return"[object FormData]"===Object.prototype.toString.call(e)},t.genSeqId=function(){return Math.random().toString(16).slice(2)},t.formatUrl=function(e,t,n){void 0===n&&(n={});var r=/\?/.test(t),o="";for(var i in n)""===o?!r&&(t+="?"):o+="&",o+=i+"="+encodeURIComponent(n[i]);return/^http(s)?\:\/\//.test(t+=o)?t:""+e+t},t.createSign=function(e,t){var n=u(s.default.parse(JSON.stringify({alg:"HS256",typ:"JWT"})))+"."+u(s.default.parse(JSON.stringify(e)));return n+"."+u(o.default(n,t))},t.toQueryString=function(e){void 0===e&&(e={});var t=[];for(var n in e)t.push(n+"="+encodeURIComponent(e[n]));return t.join("&")},t.getQuery=function(e,t){if("undefined"==typeof window)return!1;var n=t||window.location.search,r=new RegExp("(^|&)"+e+"=([^&]*)(&|$)"),o=n.substr(n.indexOf("?")+1).match(r);return null!=o?o[2]:""},t.getHash=function(e){if("undefined"==typeof window)return"";var t=window.location.hash.match(new RegExp("[#?&/]"+e+"=([^&#]*)"));return t?t[1]:""},t.removeParam=function(e,t){var n=t.split("?")[0],r=[],o=-1!==t.indexOf("?")?t.split("?")[1]:"";if(""!==o){for(var i=(r=o.split("&")).length-1;i>=0;i-=1)r[i].split("=")[0]===e&&r.splice(i,1);n=n+"?"+r.join("&")}return n},t.createPromiseCallback=function(){var e;if(!Promise){(e=function(){}).promise={};var t=function(){throw new Error('Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.')};return Object.defineProperty(e.promise,"then",{get:t}),Object.defineProperty(e.promise,"catch",{get:t}),e}var n=new Promise((function(t,n){e=function(e,r){return e?n(e):t(r)}}));return e.promise=n,e},t.execCallback=function(e,t,n){if(void 0===n&&(n=null),e&&"function"==typeof e)return e(t,n);if(t)throw t;return n},t.printWarn=function(e,t){console.warn("["+a.getSdkName()+"]["+e+"]:"+t)},t.printError=function(e,t){console.error({code:e,msg:"["+a.getSdkName()+"]["+e+"]:"+t})},t.printInfo=function(e,t){console.log("["+a.getSdkName()+"]["+e+"]:"+t)},t.throwError=function(e,t){throw new Error(JSON.stringify({code:e,msg:"["+a.getSdkName()+"]["+e+"]:"+t}))},t.printGroupLog=function(e){var t=e.title,n=e.subtitle,r=void 0===n?"":n,o=e.content,i=void 0===o?[]:o,s=e.printTrace,a=void 0!==s&&s,u=e.collapsed;void 0!==u&&u?console.groupCollapsed(t,r):console.group(t,r);for(var c=0,f=i;c<f.length;c++){var l=f[c],p=l.type,h=l.body;switch(p){case"info":console.log(h);break;case"warn":console.warn(h);break;case"error":console.error(h)}}a&&console.trace("stack trace:"),console.groupEnd()},t.sleep=function(e){return void 0===e&&(e=0),new Promise((function(t){return setTimeout(t,e)}))}},function(e,t,n){var r;e.exports=(r=r||function(e,t){var n=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),r={},o=r.lib={},i=o.Base={extend:function(e){var t=n(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},s=o.WordArray=i.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||u).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,o=e.sigBytes;if(this.clamp(),r%4)for(var i=0;i<o;i++){var s=n[i>>>2]>>>24-i%4*8&255;t[r+i>>>2]|=s<<24-(r+i)%4*8}else for(i=0;i<o;i+=4)t[r+i>>>2]=n[i>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=i.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n,r=[],o=function(t){t=t;var n=987654321,r=4294967295;return function(){var o=((n=36969*(65535&n)+(n>>16)&r)<<16)+(t=18e3*(65535&t)+(t>>16)&r)&r;return o/=4294967296,(o+=.5)*(e.random()>.5?1:-1)}},i=0;i<t;i+=4){var a=o(4294967296*(n||e.random()));n=987654071*a(),r.push(4294967296*a()|0)}return new s.init(r,t)}}),a=r.enc={},u=a.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new s.init(n,t/2)}},c=a.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(i))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new s.init(n,t)}},f=a.Utf8={stringify:function(e){try{return decodeURIComponent(escape(c.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return c.parse(unescape(encodeURIComponent(e)))}},l=o.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new s.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=f.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,r=n.words,o=n.sigBytes,i=this.blockSize,a=o/(4*i),u=(a=t?e.ceil(a):e.max((0|a)-this._minBufferSize,0))*i,c=e.min(4*u,o);if(u){for(var f=0;f<u;f+=i)this._doProcessBlock(r,f);var l=r.splice(0,u);n.sigBytes-=c}return new s.init(l,c)},clone:function(){var e=i.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),p=(o.Hasher=l.extend({cfg:i.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){l.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new p.HMAC.init(e,n).finalize(t)}}}),r.algo={});return r}(Math),r)},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(9),t),o(n(15),t)},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var u,c=[],f=!1,l=-1;function p(){f&&u&&(f=!1,u.length?c=u.concat(c):l=-1,c.length&&h())}function h(){if(!f){var e=a(p);f=!0;for(var t=c.length;t;){for(u=c,c=[];++l<t;)u&&u[l].run();l=-1,t=c.length}u=null,f=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function y(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new d(e,t)),1!==c.length||f||a(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=y,o.addListener=y,o.once=y,o.off=y,o.removeListener=y,o.removeAllListeners=y,o.emit=y,o.prependListener=y,o.prependOnceListener=y,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.COMMUNITY_SITE_URL=t.IS_DEBUG_MODE=t.getProtocol=t.setProtocol=t.getSdkName=t.setSdkName=void 0;var r="@cloudbase/js-sdk";t.setSdkName=function(e){r=e},t.getSdkName=function(){return r};var o="undefined"!=typeof location&&"http:"===location.protocol?"http:":"https:";t.setProtocol=function(e){o=e},t.getProtocol=function(){return o},t.IS_DEBUG_MODE=!1,t.COMMUNITY_SITE_URL="https://support.qq.com/products/148793"},function(e,t,n){(function(t){var n=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/,o=/^\./,i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,s=/\\(\\)?/g,a=/^\[object .+?Constructor\]$/,u=/^(?:0|[1-9]\d*)$/,c="object"==typeof t&&t&&t.Object===Object&&t,f="object"==typeof self&&self&&self.Object===Object&&self,l=c||f||Function("return this")();var p,h=Array.prototype,d=Function.prototype,y=Object.prototype,g=l["__core-js_shared__"],v=(p=/[^.]+$/.exec(g&&g.keys&&g.keys.IE_PROTO||""))?"Symbol(src)_1."+p:"",m=d.toString,_=y.hasOwnProperty,b=y.toString,w=RegExp("^"+m.call(_).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),A=l.Symbol,E=h.splice,S=k(l,"Map"),O=k(Object,"create"),I=A?A.prototype:void 0,T=I?I.toString:void 0;function N(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function R(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function B(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function D(e,t,n){var r=e[t];_.call(e,t)&&F(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function P(e,t){for(var n=e.length;n--;)if(F(e[n][0],t))return n;return-1}function x(e){return!(!W(e)||(t=e,v&&v in t))&&(function(e){var t=W(e)?b.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?w:a).test(function(e){if(null!=e){try{return m.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e));var t}function C(e,t,o,i){if(!W(e))return e;for(var s=-1,a=(t=function(e,t){if(q(e))return!1;var o=typeof e;if("number"==o||"symbol"==o||"boolean"==o||null==e||Y(e))return!0;return r.test(e)||!n.test(e)||null!=t&&e in Object(t)}(t,e)?[t]:function(e){return q(e)?e:j(e)}(t)).length,u=a-1,c=e;null!=c&&++s<a;){var f=U(t[s]),l=o;if(s!=u){var p=c[f];void 0===(l=i?i(p,f,c):void 0)&&(l=W(p)?p:M(t[s+1])?[]:{})}D(c,f,l),c=c[f]}return e}function L(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function k(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return x(n)?n:void 0}function M(e,t){return!!(t=null==t?9007199254740991:t)&&("number"==typeof e||u.test(e))&&e>-1&&e%1==0&&e<t}N.prototype.clear=function(){this.__data__=O?O(null):{}},N.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},N.prototype.get=function(e){var t=this.__data__;if(O){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return _.call(t,e)?t[e]:void 0},N.prototype.has=function(e){var t=this.__data__;return O?void 0!==t[e]:_.call(t,e)},N.prototype.set=function(e,t){return this.__data__[e]=O&&void 0===t?"__lodash_hash_undefined__":t,this},R.prototype.clear=function(){this.__data__=[]},R.prototype.delete=function(e){var t=this.__data__,n=P(t,e);return!(n<0)&&(n==t.length-1?t.pop():E.call(t,n,1),!0)},R.prototype.get=function(e){var t=this.__data__,n=P(t,e);return n<0?void 0:t[n][1]},R.prototype.has=function(e){return P(this.__data__,e)>-1},R.prototype.set=function(e,t){var n=this.__data__,r=P(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},B.prototype.clear=function(){this.__data__={hash:new N,map:new(S||R),string:new N}},B.prototype.delete=function(e){return L(this,e).delete(e)},B.prototype.get=function(e){return L(this,e).get(e)},B.prototype.has=function(e){return L(this,e).has(e)},B.prototype.set=function(e,t){return L(this,e).set(e,t),this};var j=$((function(e){var t;e=null==(t=e)?"":function(e){if("string"==typeof e)return e;if(Y(e))return T?T.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(t);var n=[];return o.test(e)&&n.push(""),e.replace(i,(function(e,t,r,o){n.push(r?o.replace(s,"$1"):t||e)})),n}));function U(e){if("string"==typeof e||Y(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function $(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var s=e.apply(this,r);return n.cache=i.set(o,s),s};return n.cache=new($.Cache||B),n}function F(e,t){return e===t||e!=e&&t!=t}$.Cache=B;var q=Array.isArray;function W(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Y(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==b.call(e)}e.exports=function(e,t,n){return null==e?e:C(e,t,n)}}).call(this,n(3))},function(e,t,n){(function(t){var n=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/,o=/^\./,i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,s=/\\(\\)?/g,a=/^\[object .+?Constructor\]$/,u="object"==typeof t&&t&&t.Object===Object&&t,c="object"==typeof self&&self&&self.Object===Object&&self,f=u||c||Function("return this")();var l,p=Array.prototype,h=Function.prototype,d=Object.prototype,y=f["__core-js_shared__"],g=(l=/[^.]+$/.exec(y&&y.keys&&y.keys.IE_PROTO||""))?"Symbol(src)_1."+l:"",v=h.toString,m=d.hasOwnProperty,_=d.toString,b=RegExp("^"+v.call(m).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),w=f.Symbol,A=p.splice,E=L(f,"Map"),S=L(Object,"create"),O=w?w.prototype:void 0,I=O?O.toString:void 0;function T(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function N(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function R(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function B(e,t){for(var n,r,o=e.length;o--;)if((n=e[o][0])===(r=t)||n!=n&&r!=r)return o;return-1}function D(e){return!(!F(e)||(t=e,g&&g in t))&&(function(e){var t=F(e)?_.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?b:a).test(function(e){if(null!=e){try{return v.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e));var t}function P(e,t){e=function(e,t){return 1==t.length?e:function(e,t){for(var n=0,r=(t=k(t,e)?[t]:x(t)).length;null!=e&&n<r;)e=e[j(t[n++])];return n&&n==r?e:void 0}(e,function(e,t,n){var r=-1,o=e.length;t<0&&(t=-t>o?0:o+t),(n=n>o?o:n)<0&&(n+=o),o=t>n?0:n-t>>>0,t>>>=0;for(var i=Array(o);++r<o;)i[r]=e[r+t];return i}(t,0,-1))}(e,t=k(t,e)?[t]:x(t));var n,r,o=j((r=(n=t)?n.length:0)?n[r-1]:void 0);return!(null!=e&&m.call(e,o))||delete e[o]}function x(e){return $(e)?e:M(e)}function C(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function L(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return D(n)?n:void 0}function k(e,t){if($(e))return!1;var o=typeof e;return!("number"!=o&&"symbol"!=o&&"boolean"!=o&&null!=e&&!q(e))||(r.test(e)||!n.test(e)||null!=t&&e in Object(t))}T.prototype.clear=function(){this.__data__=S?S(null):{}},T.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},T.prototype.get=function(e){var t=this.__data__;if(S){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return m.call(t,e)?t[e]:void 0},T.prototype.has=function(e){var t=this.__data__;return S?void 0!==t[e]:m.call(t,e)},T.prototype.set=function(e,t){return this.__data__[e]=S&&void 0===t?"__lodash_hash_undefined__":t,this},N.prototype.clear=function(){this.__data__=[]},N.prototype.delete=function(e){var t=this.__data__,n=B(t,e);return!(n<0)&&(n==t.length-1?t.pop():A.call(t,n,1),!0)},N.prototype.get=function(e){var t=this.__data__,n=B(t,e);return n<0?void 0:t[n][1]},N.prototype.has=function(e){return B(this.__data__,e)>-1},N.prototype.set=function(e,t){var n=this.__data__,r=B(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},R.prototype.clear=function(){this.__data__={hash:new T,map:new(E||N),string:new T}},R.prototype.delete=function(e){return C(this,e).delete(e)},R.prototype.get=function(e){return C(this,e).get(e)},R.prototype.has=function(e){return C(this,e).has(e)},R.prototype.set=function(e,t){return C(this,e).set(e,t),this};var M=U((function(e){var t;e=null==(t=e)?"":function(e){if("string"==typeof e)return e;if(q(e))return I?I.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}(t);var n=[];return o.test(e)&&n.push(""),e.replace(i,(function(e,t,r,o){n.push(r?o.replace(s,"$1"):t||e)})),n}));function j(e){if("string"==typeof e||q(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}function U(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var s=e.apply(this,r);return n.cache=i.set(o,s),s};return n.cache=new(U.Cache||R),n}U.Cache=R;var $=Array.isArray;function F(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function q(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==_.call(e)}e.exports=function(e,t){return null==e||P(e,t)}}).call(this,n(3))},function(e,t,n){(function(e,n){var r="[object Arguments]",o="[object Function]",i="[object GeneratorFunction]",s="[object Map]",a="[object Set]",u=/\w*$/,c=/^\[object .+?Constructor\]$/,f=/^(?:0|[1-9]\d*)$/,l={};l[r]=l["[object Array]"]=l["[object ArrayBuffer]"]=l["[object DataView]"]=l["[object Boolean]"]=l["[object Date]"]=l["[object Float32Array]"]=l["[object Float64Array]"]=l["[object Int8Array]"]=l["[object Int16Array]"]=l["[object Int32Array]"]=l[s]=l["[object Number]"]=l["[object Object]"]=l["[object RegExp]"]=l[a]=l["[object String]"]=l["[object Symbol]"]=l["[object Uint8Array]"]=l["[object Uint8ClampedArray]"]=l["[object Uint16Array]"]=l["[object Uint32Array]"]=!0,l["[object Error]"]=l[o]=l["[object WeakMap]"]=!1;var p="object"==typeof e&&e&&e.Object===Object&&e,h="object"==typeof self&&self&&self.Object===Object&&self,d=p||h||Function("return this")(),y=t&&!t.nodeType&&t,g=y&&"object"==typeof n&&n&&!n.nodeType&&n,v=g&&g.exports===y;function m(e,t){return e.set(t[0],t[1]),e}function _(e,t){return e.add(t),e}function b(e,t,n,r){var o=-1,i=e?e.length:0;for(r&&i&&(n=e[++o]);++o<i;)n=t(n,e[o],o,e);return n}function w(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}function A(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n}function E(e,t){return function(n){return e(t(n))}}function S(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n}var O,I=Array.prototype,T=Function.prototype,N=Object.prototype,R=d["__core-js_shared__"],B=(O=/[^.]+$/.exec(R&&R.keys&&R.keys.IE_PROTO||""))?"Symbol(src)_1."+O:"",D=T.toString,P=N.hasOwnProperty,x=N.toString,C=RegExp("^"+D.call(P).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),L=v?d.Buffer:void 0,k=d.Symbol,M=d.Uint8Array,j=E(Object.getPrototypeOf,Object),U=Object.create,$=N.propertyIsEnumerable,F=I.splice,q=Object.getOwnPropertySymbols,W=L?L.isBuffer:void 0,Y=E(Object.keys,Object),H=ge(d,"DataView"),K=ge(d,"Map"),G=ge(d,"Promise"),V=ge(d,"Set"),J=ge(d,"WeakMap"),z=ge(Object,"create"),X=we(H),Z=we(K),Q=we(G),ee=we(V),te=we(J),ne=k?k.prototype:void 0,re=ne?ne.valueOf:void 0;function oe(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ie(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function se(e){var t=-1,n=e?e.length:0;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function ae(e){this.__data__=new ie(e)}function ue(e,t){var n=Ee(e)||function(e){return function(e){return function(e){return!!e&&"object"==typeof e}(e)&&Se(e)}(e)&&P.call(e,"callee")&&(!$.call(e,"callee")||x.call(e)==r)}(e)?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],o=n.length,i=!!o;for(var s in e)!t&&!P.call(e,s)||i&&("length"==s||_e(s,o))||n.push(s);return n}function ce(e,t,n){var r=e[t];P.call(e,t)&&Ae(r,n)&&(void 0!==n||t in e)||(e[t]=n)}function fe(e,t){for(var n=e.length;n--;)if(Ae(e[n][0],t))return n;return-1}function le(e,t,n,c,f,p,h){var d;if(c&&(d=p?c(e,f,p,h):c(e)),void 0!==d)return d;if(!Te(e))return e;var y=Ee(e);if(y){if(d=function(e){var t=e.length,n=e.constructor(t);t&&"string"==typeof e[0]&&P.call(e,"index")&&(n.index=e.index,n.input=e.input);return n}(e),!t)return function(e,t){var n=-1,r=e.length;t||(t=Array(r));for(;++n<r;)t[n]=e[n];return t}(e,d)}else{var g=me(e),v=g==o||g==i;if(Oe(e))return function(e,t){if(t)return e.slice();var n=new e.constructor(e.length);return e.copy(n),n}(e,t);if("[object Object]"==g||g==r||v&&!p){if(w(e))return p?e:{};if(d=function(e){return"function"!=typeof e.constructor||be(e)?{}:(t=j(e),Te(t)?U(t):{});var t}(v?{}:e),!t)return function(e,t){return de(e,ve(e),t)}(e,function(e,t){return e&&de(t,Ne(t),e)}(d,e))}else{if(!l[g])return p?e:{};d=function(e,t,n,r){var o=e.constructor;switch(t){case"[object ArrayBuffer]":return he(e);case"[object Boolean]":case"[object Date]":return new o(+e);case"[object DataView]":return function(e,t){var n=t?he(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}(e,r);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return function(e,t){var n=t?he(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}(e,r);case s:return function(e,t,n){return b(t?n(A(e),!0):A(e),m,new e.constructor)}(e,r,n);case"[object Number]":case"[object String]":return new o(e);case"[object RegExp]":return function(e){var t=new e.constructor(e.source,u.exec(e));return t.lastIndex=e.lastIndex,t}(e);case a:return function(e,t,n){return b(t?n(S(e),!0):S(e),_,new e.constructor)}(e,r,n);case"[object Symbol]":return i=e,re?Object(re.call(i)):{}}var i}(e,g,le,t)}}h||(h=new ae);var E=h.get(e);if(E)return E;if(h.set(e,d),!y)var O=n?function(e){return function(e,t,n){var r=t(e);return Ee(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,Ne,ve)}(e):Ne(e);return function(e,t){for(var n=-1,r=e?e.length:0;++n<r&&!1!==t(e[n],n,e););}(O||e,(function(r,o){O&&(r=e[o=r]),ce(d,o,le(r,t,n,c,o,e,h))})),d}function pe(e){return!(!Te(e)||(t=e,B&&B in t))&&(Ie(e)||w(e)?C:c).test(we(e));var t}function he(e){var t=new e.constructor(e.byteLength);return new M(t).set(new M(e)),t}function de(e,t,n,r){n||(n={});for(var o=-1,i=t.length;++o<i;){var s=t[o],a=r?r(n[s],e[s],s,n,e):void 0;ce(n,s,void 0===a?e[s]:a)}return n}function ye(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map}function ge(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return pe(n)?n:void 0}oe.prototype.clear=function(){this.__data__=z?z(null):{}},oe.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},oe.prototype.get=function(e){var t=this.__data__;if(z){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return P.call(t,e)?t[e]:void 0},oe.prototype.has=function(e){var t=this.__data__;return z?void 0!==t[e]:P.call(t,e)},oe.prototype.set=function(e,t){return this.__data__[e]=z&&void 0===t?"__lodash_hash_undefined__":t,this},ie.prototype.clear=function(){this.__data__=[]},ie.prototype.delete=function(e){var t=this.__data__,n=fe(t,e);return!(n<0)&&(n==t.length-1?t.pop():F.call(t,n,1),!0)},ie.prototype.get=function(e){var t=this.__data__,n=fe(t,e);return n<0?void 0:t[n][1]},ie.prototype.has=function(e){return fe(this.__data__,e)>-1},ie.prototype.set=function(e,t){var n=this.__data__,r=fe(n,e);return r<0?n.push([e,t]):n[r][1]=t,this},se.prototype.clear=function(){this.__data__={hash:new oe,map:new(K||ie),string:new oe}},se.prototype.delete=function(e){return ye(this,e).delete(e)},se.prototype.get=function(e){return ye(this,e).get(e)},se.prototype.has=function(e){return ye(this,e).has(e)},se.prototype.set=function(e,t){return ye(this,e).set(e,t),this},ae.prototype.clear=function(){this.__data__=new ie},ae.prototype.delete=function(e){return this.__data__.delete(e)},ae.prototype.get=function(e){return this.__data__.get(e)},ae.prototype.has=function(e){return this.__data__.has(e)},ae.prototype.set=function(e,t){var n=this.__data__;if(n instanceof ie){var r=n.__data__;if(!K||r.length<199)return r.push([e,t]),this;n=this.__data__=new se(r)}return n.set(e,t),this};var ve=q?E(q,Object):function(){return[]},me=function(e){return x.call(e)};function _e(e,t){return!!(t=null==t?9007199254740991:t)&&("number"==typeof e||f.test(e))&&e>-1&&e%1==0&&e<t}function be(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||N)}function we(e){if(null!=e){try{return D.call(e)}catch(e){}try{return e+""}catch(e){}}return""}function Ae(e,t){return e===t||e!=e&&t!=t}(H&&"[object DataView]"!=me(new H(new ArrayBuffer(1)))||K&&me(new K)!=s||G&&"[object Promise]"!=me(G.resolve())||V&&me(new V)!=a||J&&"[object WeakMap]"!=me(new J))&&(me=function(e){var t=x.call(e),n="[object Object]"==t?e.constructor:void 0,r=n?we(n):void 0;if(r)switch(r){case X:return"[object DataView]";case Z:return s;case Q:return"[object Promise]";case ee:return a;case te:return"[object WeakMap]"}return t});var Ee=Array.isArray;function Se(e){return null!=e&&function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991}(e.length)&&!Ie(e)}var Oe=W||function(){return!1};function Ie(e){var t=Te(e)?x.call(e):"";return t==o||t==i}function Te(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function Ne(e){return Se(e)?ue(e):function(e){if(!be(e))return Y(e);var t=[];for(var n in Object(e))P.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)}n.exports=function(e){return le(e,!0,!0)}}).call(this,n(3),n(27)(e))},function(e){e.exports=JSON.parse('{"a":"1.3.3"}')},function(e,t,n){(function(t,n){
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */var r;r=function(){"use strict";var e=Object.freeze({});function r(e){return null==e}function o(e){return null!=e}function i(e){return!0===e}function s(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function a(e){return null!==e&&"object"==typeof e}var u=Object.prototype.toString;function c(e){return u.call(e).slice(8,-1)}function f(e){return"[object Object]"===u.call(e)}function l(e){return"[object RegExp]"===u.call(e)}function p(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function h(e){return o(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function d(e){return null==e?"":Array.isArray(e)||f(e)&&e.toString===u?JSON.stringify(e,null,2):String(e)}function y(e){var t=parseFloat(e);return isNaN(t)?e:t}function g(e,t){for(var n=Object.create(null),r=e.split(","),o=0;o<r.length;o++)n[r[o]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var v=g("slot,component",!0),m=g("key,ref,slot,slot-scope,is");function _(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var b=Object.prototype.hasOwnProperty;function w(e,t){return b.call(e,t)}function A(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var E=/-(\w)/g,S=A((function(e){return e.replace(E,(function(e,t){return t?t.toUpperCase():""}))})),O=A((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),I=/\B([A-Z])/g,T=A((function(e){return e.replace(I,"-$1").toLowerCase()})),N=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function R(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function B(e,t){for(var n in t)e[n]=t[n];return e}function D(e){for(var t={},n=0;n<e.length;n++)e[n]&&B(t,e[n]);return t}function P(e,t,n){}var x=function(e,t,n){return!1},C=function(e){return e};function L(e,t){if(e===t)return!0;var n=a(e),r=a(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var o=Array.isArray(e),i=Array.isArray(t);if(o&&i)return e.length===t.length&&e.every((function(e,n){return L(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(o||i)return!1;var s=Object.keys(e),u=Object.keys(t);return s.length===u.length&&s.every((function(n){return L(e[n],t[n])}))}catch(e){return!1}}function k(e,t){for(var n=0;n<e.length;n++)if(L(e[n],t))return n;return-1}function M(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var j=["component","directive","filter"],U=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],$={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:x,isReservedAttr:x,isUnknownElement:x,getTagNamespace:P,parsePlatformTagName:C,mustUseProp:x,async:!0,_lifecycleHooks:U},F=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function q(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function W(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var Y,H=new RegExp("[^"+F.source+".$_\\d]"),K="__proto__"in{},G="undefined"!=typeof window,V="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,J=V&&WXEnvironment.platform.toLowerCase(),z=G&&window.navigator.userAgent.toLowerCase(),X=z&&/msie|trident/.test(z),Z=z&&z.indexOf("msie 9.0")>0,Q=z&&z.indexOf("edge/")>0,ee=(z&&z.indexOf("android"),z&&/iphone|ipad|ipod|ios/.test(z)||"ios"===J),te=(z&&/chrome\/\d+/.test(z),z&&/phantomjs/.test(z),z&&z.match(/firefox\/(\d+)/)),ne={}.watch,re=!1;if(G)try{var oe={};Object.defineProperty(oe,"passive",{get:function(){re=!0}}),window.addEventListener("test-passive",null,oe)}catch(e){}var ie=function(){return void 0===Y&&(Y=!G&&!V&&void 0!==t&&t.process&&"server"===t.process.env.VUE_ENV),Y},se=G&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function ae(e){return"function"==typeof e&&/native code/.test(e.toString())}var ue,ce="undefined"!=typeof Symbol&&ae(Symbol)&&"undefined"!=typeof Reflect&&ae(Reflect.ownKeys);ue="undefined"!=typeof Set&&ae(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var fe,le,pe,he=P,de="undefined"!=typeof console,ye=/(?:^|[-_])(\w)/g;fe=function(e,t){var n=t?he(t):"";$.warnHandler?$.warnHandler.call(null,e,t,n):de&&!$.silent&&console.error("[Vue warn]: "+e+n)},le=function(e,t){de&&!$.silent&&console.warn("[Vue tip]: "+e+(t?he(t):""))},pe=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,r=n.name||n._componentTag,o=n.__file;if(!r&&o){var i=o.match(/([^/\\]+)\.vue$/);r=i&&i[1]}return(r?"<"+function(e){return e.replace(ye,(function(e){return e.toUpperCase()})).replace(/[-_]/g,"")}(r)+">":"<Anonymous>")+(o&&!1!==t?" at "+o:"")},he=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map((function(e,t){return""+(0===t?"---\x3e ":function(e,t){for(var n="";t;)t%2==1&&(n+=e),t>1&&(e+=e),t>>=1;return n}(" ",5+2*t))+(Array.isArray(e)?pe(e[0])+"... ("+e[1]+" recursive calls)":pe(e))})).join("\n")}return"\n\n(found in "+pe(e)+")"};var ge=0,ve=function(){this.id=ge++,this.subs=[]};ve.prototype.addSub=function(e){this.subs.push(e)},ve.prototype.removeSub=function(e){_(this.subs,e)},ve.prototype.depend=function(){ve.target&&ve.target.addDep(this)},ve.prototype.notify=function(){var e=this.subs.slice();$.async||e.sort((function(e,t){return e.id-t.id}));for(var t=0,n=e.length;t<n;t++)e[t].update()},ve.target=null;var me=[];function _e(e){me.push(e),ve.target=e}function be(){me.pop(),ve.target=me[me.length-1]}var we=function(e,t,n,r,o,i,s,a){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=o,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=s,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=a,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Ae={child:{configurable:!0}};Ae.child.get=function(){return this.componentInstance},Object.defineProperties(we.prototype,Ae);var Ee=function(e){void 0===e&&(e="");var t=new we;return t.text=e,t.isComment=!0,t};function Se(e){return new we(void 0,void 0,void 0,String(e))}function Oe(e){var t=new we(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Ie=Array.prototype,Te=Object.create(Ie);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=Ie[e];W(Te,e,(function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var o,i=t.apply(this,n),s=this.__ob__;switch(e){case"push":case"unshift":o=n;break;case"splice":o=n.slice(2)}return o&&s.observeArray(o),s.dep.notify(),i}))}));var Ne=Object.getOwnPropertyNames(Te),Re=!0;function Be(e){Re=e}var De=function(e){this.value=e,this.dep=new ve,this.vmCount=0,W(e,"__ob__",this),Array.isArray(e)?(K?function(e,t){e.__proto__=t}(e,Te):function(e,t,n){for(var r=0,o=n.length;r<o;r++){var i=n[r];W(e,i,t[i])}}(e,Te,Ne),this.observeArray(e)):this.walk(e)};function Pe(e,t){var n;if(a(e)&&!(e instanceof we))return w(e,"__ob__")&&e.__ob__ instanceof De?n=e.__ob__:Re&&!ie()&&(Array.isArray(e)||f(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new De(e)),t&&n&&n.vmCount++,n}function xe(e,t,n,r,o){var i=new ve,s=Object.getOwnPropertyDescriptor(e,t);if(!s||!1!==s.configurable){var a=s&&s.get,u=s&&s.set;a&&!u||2!==arguments.length||(n=e[t]);var c=!o&&Pe(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=a?a.call(e):n;return ve.target&&(i.depend(),c&&(c.dep.depend(),Array.isArray(t)&&ke(t))),t},set:function(t){var s=a?a.call(e):n;t===s||t!=t&&s!=s||(r&&r(),a&&!u||(u?u.call(e,t):n=t,c=!o&&Pe(t),i.notify()))}})}}function Ce(e,t,n){if((r(e)||s(e))&&fe("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var o=e.__ob__;return e._isVue||o&&o.vmCount?(fe("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):o?(xe(o.value,t,n),o.dep.notify(),n):(e[t]=n,n)}function Le(e,t){if((r(e)||s(e))&&fe("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&p(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount?fe("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):w(e,t)&&(delete e[t],n&&n.dep.notify())}}function ke(e){for(var t=void 0,n=0,r=e.length;n<r;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&ke(t)}De.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)xe(e,t[n])},De.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)Pe(e[t])};var Me=$.optionMergeStrategies;function je(e,t){if(!t)return e;for(var n,r,o,i=ce?Reflect.ownKeys(t):Object.keys(t),s=0;s<i.length;s++)"__ob__"!==(n=i[s])&&(r=e[n],o=t[n],w(e,n)?r!==o&&f(r)&&f(o)&&je(r,o):Ce(e,n,o));return e}function Ue(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,o="function"==typeof e?e.call(n,n):e;return r?je(r,o):o}:t?e?function(){return je("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function $e(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(n):n}function Fe(e,t,n,r){var o=Object.create(e||null);return t?(Ye(r,t,n),B(o,t)):o}Me.el=Me.propsData=function(e,t,n,r){return n||fe('option "'+r+'" can only be used during instance creation with the `new` keyword.'),qe(e,t)},Me.data=function(e,t,n){return n?Ue(e,t,n):t&&"function"!=typeof t?(fe('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):Ue(e,t)},U.forEach((function(e){Me[e]=$e})),j.forEach((function(e){Me[e+"s"]=Fe})),Me.watch=function(e,t,n,r){if(e===ne&&(e=void 0),t===ne&&(t=void 0),!t)return Object.create(e||null);if(Ye(r,t,n),!e)return t;var o={};for(var i in B(o,e),t){var s=o[i],a=t[i];s&&!Array.isArray(s)&&(s=[s]),o[i]=s?s.concat(a):Array.isArray(a)?a:[a]}return o},Me.props=Me.methods=Me.inject=Me.computed=function(e,t,n,r){if(t&&Ye(r,t,n),!e)return t;var o=Object.create(null);return B(o,e),t&&B(o,t),o},Me.provide=Ue;var qe=function(e,t){return void 0===t?e:t};function We(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+F.source+"]*$").test(e)||fe('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(v(e)||$.isReservedTag(e))&&fe("Do not use built-in or reserved HTML elements as component id: "+e)}function Ye(e,t,n){f(t)||fe('Invalid value for option "'+e+'": expected an Object, but got '+c(t)+".",n)}function He(e,t,n){if(function(e){for(var t in e.components)We(t)}(t),"function"==typeof t&&(t=t.options),function(e,t){var n=e.props;if(n){var r,o,i={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(o=n[r])?i[S(o)]={type:null}:fe("props must be strings when using array syntax.");else if(f(n))for(var s in n)o=n[s],i[S(s)]=f(o)?o:{type:o};else fe('Invalid value for option "props": expected an Array or an Object, but got '+c(n)+".",t);e.props=i}}(t,n),function(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var o=0;o<n.length;o++)r[n[o]]={from:n[o]};else if(f(n))for(var i in n){var s=n[i];r[i]=f(s)?B({from:i},s):{from:s}}else fe('Invalid value for option "inject": expected an Array or an Object, but got '+c(n)+".",t)}}(t,n),function(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}(t),!t._base&&(t.extends&&(e=He(e,t.extends,n)),t.mixins))for(var r=0,o=t.mixins.length;r<o;r++)e=He(e,t.mixins[r],n);var i,s={};for(i in e)a(i);for(i in t)w(e,i)||a(i);function a(r){var o=Me[r]||qe;s[r]=o(e[r],t[r],n,r)}return s}function Ke(e,t,n,r){if("string"==typeof n){var o=e[t];if(w(o,n))return o[n];var i=S(n);if(w(o,i))return o[i];var s=O(i);if(w(o,s))return o[s];var a=o[n]||o[i]||o[s];return r&&!a&&fe("Failed to resolve "+t.slice(0,-1)+": "+n,e),a}}function Ge(e,t,n,r){var o=t[e],i=!w(n,e),s=n[e],u=Ze(Boolean,o.type);if(u>-1)if(i&&!w(o,"default"))s=!1;else if(""===s||s===T(e)){var f=Ze(String,o.type);(f<0||u<f)&&(s=!0)}if(void 0===s){s=function(e,t,n){if(w(t,"default")){var r=t.default;return a(r)&&fe('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"==typeof r&&"Function"!==ze(t.type)?r.call(e):r}}(r,o,e);var l=Re;Be(!0),Pe(s),Be(l)}return function(e,t,n,r,o){if(e.required&&o)fe('Missing required prop: "'+t+'"',r);else if(null!=n||e.required){var i=e.type,s=!i||!0===i,a=[];if(i){Array.isArray(i)||(i=[i]);for(var u=0;u<i.length&&!s;u++){var f=Je(n,i[u]);a.push(f.expectedType||""),s=f.valid}}if(s){var l=e.validator;l&&(l(n)||fe('Invalid prop: custom validator check failed for prop "'+t+'".',r))}else fe(function(e,t,n){var r='Invalid prop: type check failed for prop "'+e+'". Expected '+n.map(O).join(", "),o=n[0],i=c(t),s=Qe(t,o),a=Qe(t,i);return 1===n.length&&et(o)&&!function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return e.some((function(e){return"boolean"===e.toLowerCase()}))}(o,i)&&(r+=" with value "+s),r+=", got "+i+" ",et(i)&&(r+="with value "+a+"."),r}(t,n,a),r)}}(o,e,s,r,i),s}var Ve=/^(String|Number|Boolean|Function|Symbol)$/;function Je(e,t){var n,r=ze(t);if(Ve.test(r)){var o=typeof e;(n=o===r.toLowerCase())||"object"!==o||(n=e instanceof t)}else n="Object"===r?f(e):"Array"===r?Array.isArray(e):e instanceof t;return{valid:n,expectedType:r}}function ze(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function Xe(e,t){return ze(e)===ze(t)}function Ze(e,t){if(!Array.isArray(t))return Xe(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(Xe(t[n],e))return n;return-1}function Qe(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}function et(e){return["string","number","boolean"].some((function(t){return e.toLowerCase()===t}))}function tt(e,t,n){_e();try{if(t)for(var r=t;r=r.$parent;){var o=r.$options.errorCaptured;if(o)for(var i=0;i<o.length;i++)try{if(!1===o[i].call(r,e,t,n))return}catch(e){rt(e,r,"errorCaptured hook")}}rt(e,t,n)}finally{be()}}function nt(e,t,n,r,o){var i;try{(i=n?e.apply(t,n):e.call(t))&&!i._isVue&&h(i)&&!i._handled&&(i.catch((function(e){return tt(e,r,o+" (Promise/async)")})),i._handled=!0)}catch(e){tt(e,r,o)}return i}function rt(e,t,n){if($.errorHandler)try{return $.errorHandler.call(null,e,t,n)}catch(t){t!==e&&ot(t,null,"config.errorHandler")}ot(e,t,n)}function ot(e,t,n){if(fe("Error in "+n+': "'+e.toString()+'"',t),!G&&!V||"undefined"==typeof console)throw e;console.error(e)}var it,st,at,ut=!1,ct=[],ft=!1;function lt(){ft=!1;var e=ct.slice(0);ct.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&ae(Promise)){var pt=Promise.resolve();it=function(){pt.then(lt),ee&&setTimeout(P)},ut=!0}else if(X||"undefined"==typeof MutationObserver||!ae(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())it=void 0!==n&&ae(n)?function(){n(lt)}:function(){setTimeout(lt,0)};else{var ht=1,dt=new MutationObserver(lt),yt=document.createTextNode(String(ht));dt.observe(yt,{characterData:!0}),it=function(){ht=(ht+1)%2,yt.data=String(ht)},ut=!0}function gt(e,t){var n;if(ct.push((function(){if(e)try{e.call(t)}catch(e){tt(e,t,"nextTick")}else n&&n(t)})),ft||(ft=!0,it()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}var vt,mt=G&&window.performance;mt&&mt.mark&&mt.measure&&mt.clearMarks&&mt.clearMeasures&&(st=function(e){return mt.mark(e)},at=function(e,t,n){mt.measure(e,t,n),mt.clearMarks(t),mt.clearMarks(n)});var _t=g("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),bt=function(e,t){fe('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},wt=function(e,t){fe('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',e)},At="undefined"!=typeof Proxy&&ae(Proxy);if(At){var Et=g("stop,prevent,self,ctrl,shift,alt,meta,exact");$.keyCodes=new Proxy($.keyCodes,{set:function(e,t,n){return Et(t)?(fe("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var St={has:function(e,t){var n=t in e,r=_t(t)||"string"==typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return n||r||(t in e.$data?wt(e,t):bt(e,t)),n||!r}},Ot={get:function(e,t){return"string"!=typeof t||t in e||(t in e.$data?wt(e,t):bt(e,t)),e[t]}};vt=function(e){if(At){var t=e.$options,n=t.render&&t.render._withStripped?Ot:St;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var It=new ue;function Tt(e){!function e(t,n){var r,o,i=Array.isArray(t);if(!(!i&&!a(t)||Object.isFrozen(t)||t instanceof we)){if(t.__ob__){var s=t.__ob__.dep.id;if(n.has(s))return;n.add(s)}if(i)for(r=t.length;r--;)e(t[r],n);else for(o=Object.keys(t),r=o.length;r--;)e(t[o[r]],n)}}(e,It),It.clear()}var Nt=A((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}}));function Rt(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return nt(r,null,arguments,t,"v-on handler");for(var o=r.slice(),i=0;i<o.length;i++)nt(o[i],null,e,t,"v-on handler")}return n.fns=e,n}function Bt(e,t,n,o,s,a){var u,c,f,l;for(u in e)c=e[u],f=t[u],l=Nt(u),r(c)?fe('Invalid handler for event "'+l.name+'": got '+String(c),a):r(f)?(r(c.fns)&&(c=e[u]=Rt(c,a)),i(l.once)&&(c=e[u]=s(l.name,c,l.capture)),n(l.name,c,l.capture,l.passive,l.params)):c!==f&&(f.fns=c,e[u]=f);for(u in t)r(e[u])&&o((l=Nt(u)).name,t[u],l.capture)}function Dt(e,t,n){var s;e instanceof we&&(e=e.data.hook||(e.data.hook={}));var a=e[t];function u(){n.apply(this,arguments),_(s.fns,u)}r(a)?s=Rt([u]):o(a.fns)&&i(a.merged)?(s=a).fns.push(u):s=Rt([a,u]),s.merged=!0,e[t]=s}function Pt(e,t,n,r,i){if(o(t)){if(w(t,n))return e[n]=t[n],i||delete t[n],!0;if(w(t,r))return e[n]=t[r],i||delete t[r],!0}return!1}function xt(e){return s(e)?[Se(e)]:Array.isArray(e)?function e(t,n){var a,u,c,f,l=[];for(a=0;a<t.length;a++)r(u=t[a])||"boolean"==typeof u||(c=l.length-1,f=l[c],Array.isArray(u)?u.length>0&&(Ct((u=e(u,(n||"")+"_"+a))[0])&&Ct(f)&&(l[c]=Se(f.text+u[0].text),u.shift()),l.push.apply(l,u)):s(u)?Ct(f)?l[c]=Se(f.text+u):""!==u&&l.push(Se(u)):Ct(u)&&Ct(f)?l[c]=Se(f.text+u.text):(i(t._isVList)&&o(u.tag)&&r(u.key)&&o(n)&&(u.key="__vlist"+n+"_"+a+"__"),l.push(u)));return l}(e):void 0}function Ct(e){return o(e)&&o(e.text)&&!1===e.isComment}function Lt(e,t){if(e){for(var n=Object.create(null),r=ce?Reflect.ownKeys(e):Object.keys(e),o=0;o<r.length;o++){var i=r[o];if("__ob__"!==i){for(var s=e[i].from,a=t;a;){if(a._provided&&w(a._provided,s)){n[i]=a._provided[s];break}a=a.$parent}if(!a)if("default"in e[i]){var u=e[i].default;n[i]="function"==typeof u?u.call(t):u}else fe('Injection "'+i+'" not found',t)}}return n}}function kt(e,t){if(!e||!e.length)return{};for(var n={},r=0,o=e.length;r<o;r++){var i=e[r],s=i.data;if(s&&s.attrs&&s.attrs.slot&&delete s.attrs.slot,i.context!==t&&i.fnContext!==t||!s||null==s.slot)(n.default||(n.default=[])).push(i);else{var a=s.slot,u=n[a]||(n[a]=[]);"template"===i.tag?u.push.apply(u,i.children||[]):u.push(i)}}for(var c in n)n[c].every(Mt)&&delete n[c];return n}function Mt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function jt(t,n,r){var o,i=Object.keys(n).length>0,s=t?!!t.$stable:!i,a=t&&t.$key;if(t){if(t._normalized)return t._normalized;if(s&&r&&r!==e&&a===r.$key&&!i&&!r.$hasNormal)return r;for(var u in o={},t)t[u]&&"$"!==u[0]&&(o[u]=Ut(n,u,t[u]))}else o={};for(var c in n)c in o||(o[c]=$t(n,c));return t&&Object.isExtensible(t)&&(t._normalized=o),W(o,"$stable",s),W(o,"$key",a),W(o,"$hasNormal",i),o}function Ut(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"==typeof e&&!Array.isArray(e)?[e]:xt(e))&&(0===e.length||1===e.length&&e[0].isComment)?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function $t(e,t){return function(){return e[t]}}function Ft(e,t){var n,r,i,s,u;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(a(e))if(ce&&e[Symbol.iterator]){n=[];for(var c=e[Symbol.iterator](),f=c.next();!f.done;)n.push(t(f.value,n.length)),f=c.next()}else for(s=Object.keys(e),n=new Array(s.length),r=0,i=s.length;r<i;r++)u=s[r],n[r]=t(e[u],u,r);return o(n)||(n=[]),n._isVList=!0,n}function qt(e,t,n,r){var o,i=this.$scopedSlots[e];i?(n=n||{},r&&(a(r)||fe("slot v-bind without argument expects an Object",this),n=B(B({},r),n)),o=i(n)||t):o=this.$slots[e]||t;var s=n&&n.slot;return s?this.$createElement("template",{slot:s},o):o}function Wt(e){return Ke(this.$options,"filters",e,!0)||C}function Yt(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function Ht(e,t,n,r,o){var i=$.keyCodes[t]||n;return o&&r&&!$.keyCodes[t]?Yt(o,r):i?Yt(i,e):r?T(r)!==t:void 0}function Kt(e,t,n,r,o){if(n)if(a(n)){var i;Array.isArray(n)&&(n=D(n));var s=function(s){if("class"===s||"style"===s||m(s))i=e;else{var a=e.attrs&&e.attrs.type;i=r||$.mustUseProp(t,a,s)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var u=S(s),c=T(s);u in i||c in i||(i[s]=n[s],o&&((e.on||(e.on={}))["update:"+s]=function(e){n[s]=e}))};for(var u in n)s(u)}else fe("v-bind without argument expects an Object or Array value",this);return e}function Gt(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t||Jt(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r}function Vt(e,t,n){return Jt(e,"__once__"+t+(n?"_"+n:""),!0),e}function Jt(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&zt(e[r],t+"_"+r,n);else zt(e,t,n)}function zt(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function Xt(e,t){if(t)if(f(t)){var n=e.on=e.on?B({},e.on):{};for(var r in t){var o=n[r],i=t[r];n[r]=o?[].concat(o,i):i}}else fe("v-on without argument expects an Object value",this);return e}function Zt(e,t,n,r){t=t||{$stable:!n};for(var o=0;o<e.length;o++){var i=e[o];Array.isArray(i)?Zt(i,t,n):i&&(i.proxy&&(i.fn.proxy=!0),t[i.key]=i.fn)}return r&&(t.$key=r),t}function Qt(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r?e[t[n]]=t[n+1]:""!==r&&null!==r&&fe("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return e}function en(e,t){return"string"==typeof e?t+e:e}function tn(e){e._o=Vt,e._n=y,e._s=d,e._l=Ft,e._t=qt,e._q=L,e._i=k,e._m=Gt,e._f=Wt,e._k=Ht,e._b=Kt,e._v=Se,e._e=Ee,e._u=Zt,e._g=Xt,e._d=Qt,e._p=en}function nn(t,n,r,o,s){var a,u=this,c=s.options;w(o,"_uid")?(a=Object.create(o))._original=o:(a=o,o=o._original);var f=i(c._compiled),l=!f;this.data=t,this.props=n,this.children=r,this.parent=o,this.listeners=t.on||e,this.injections=Lt(c.inject,o),this.slots=function(){return u.$slots||jt(t.scopedSlots,u.$slots=kt(r,o)),u.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return jt(t.scopedSlots,this.slots())}}),f&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=jt(t.scopedSlots,this.$slots)),c._scopeId?this._c=function(e,t,n,r){var i=fn(a,e,t,n,r,l);return i&&!Array.isArray(i)&&(i.fnScopeId=c._scopeId,i.fnContext=o),i}:this._c=function(e,t,n,r){return fn(a,e,t,n,r,l)}}function rn(e,t,n,r,o){var i=Oe(e);return i.fnContext=n,i.fnOptions=r,(i.devtoolsMeta=i.devtoolsMeta||{}).renderContext=o,t.slot&&((i.data||(i.data={})).slot=t.slot),i}function on(e,t){for(var n in t)e[S(n)]=t[n]}tn(nn.prototype);var sn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;sn.prepatch(n,n)}else(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;return o(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new e.componentOptions.Ctor(n)}(e,bn)).$mount(t?e.elm:void 0,t)},prepatch:function(t,n){var r=n.componentOptions;!function(t,n,r,o,i){wn=!0;var s=o.data.scopedSlots,a=t.$scopedSlots,u=!!(s&&!s.$stable||a!==e&&!a.$stable||s&&t.$scopedSlots.$key!==s.$key),c=!!(i||t.$options._renderChildren||u);if(t.$options._parentVnode=o,t.$vnode=o,t._vnode&&(t._vnode.parent=o),t.$options._renderChildren=i,t.$attrs=o.data.attrs||e,t.$listeners=r||e,n&&t.$options.props){Be(!1);for(var f=t._props,l=t.$options._propKeys||[],p=0;p<l.length;p++){var h=l[p],d=t.$options.props;f[h]=Ge(h,d,n,t)}Be(!0),t.$options.propsData=n}r=r||e;var y=t.$options._parentListeners;t.$options._parentListeners=r,_n(t,r,y),c&&(t.$slots=kt(i,o.context),t.$forceUpdate()),wn=!1}(n.componentInstance=t.componentInstance,r.propsData,r.listeners,n,r.children)},insert:function(e){var t,n=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,On(r,"mounted")),e.data.keepAlive&&(n._isMounted?((t=r)._inactive=!1,Tn.push(t)):Sn(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?function e(t,n){if(!(n&&(t._directInactive=!0,En(t))||t._inactive)){t._inactive=!0;for(var r=0;r<t.$children.length;r++)e(t.$children[r]);On(t,"deactivated")}}(t,!0):t.$destroy())}},an=Object.keys(sn);function un(t,n,s,u,c){if(!r(t)){var f=s.$options._base;if(a(t)&&(t=f.extend(t)),"function"==typeof t){var l;if(r(t.cid)&&void 0===(t=function(e,t){if(i(e.error)&&o(e.errorComp))return e.errorComp;if(o(e.resolved))return e.resolved;var n=pn;if(n&&o(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n),i(e.loading)&&o(e.loadingComp))return e.loadingComp;if(n&&!o(e.owners)){var s=e.owners=[n],u=!0,c=null,f=null;n.$on("hook:destroyed",(function(){return _(s,n)}));var l=function(e){for(var t=0,n=s.length;t<n;t++)s[t].$forceUpdate();e&&(s.length=0,null!==c&&(clearTimeout(c),c=null),null!==f&&(clearTimeout(f),f=null))},p=M((function(n){e.resolved=hn(n,t),u?s.length=0:l(!0)})),d=M((function(t){fe("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),o(e.errorComp)&&(e.error=!0,l(!0))})),y=e(p,d);return a(y)&&(h(y)?r(e.resolved)&&y.then(p,d):h(y.component)&&(y.component.then(p,d),o(y.error)&&(e.errorComp=hn(y.error,t)),o(y.loading)&&(e.loadingComp=hn(y.loading,t),0===y.delay?e.loading=!0:c=setTimeout((function(){c=null,r(e.resolved)&&r(e.error)&&(e.loading=!0,l(!1))}),y.delay||200)),o(y.timeout)&&(f=setTimeout((function(){f=null,r(e.resolved)&&d("timeout ("+y.timeout+"ms)")}),y.timeout)))),u=!1,e.loading?e.loadingComp:e.resolved}}(l=t,f)))return function(e,t,n,r,o){var i=Ee();return i.asyncFactory=e,i.asyncMeta={data:t,context:n,children:r,tag:o},i}(l,n,s,u,c);n=n||{},Vn(t),o(n.model)&&function(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var i=t.on||(t.on={}),s=i[r],a=t.model.callback;o(s)?(Array.isArray(s)?-1===s.indexOf(a):s!==a)&&(i[r]=[a].concat(s)):i[r]=a}(t.options,n);var p=function(e,t,n){var i=t.options.props;if(!r(i)){var s={},a=e.attrs,u=e.props;if(o(a)||o(u))for(var c in i){var f=T(c),l=c.toLowerCase();c!==l&&a&&w(a,l)&&le('Prop "'+l+'" is passed to component '+pe(n||t)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+f+'" instead of "'+c+'".'),Pt(s,u,c,f,!0)||Pt(s,a,c,f,!1)}return s}}(n,t,c);if(i(t.options.functional))return function(t,n,r,i,s){var a=t.options,u={},c=a.props;if(o(c))for(var f in c)u[f]=Ge(f,c,n||e);else o(r.attrs)&&on(u,r.attrs),o(r.props)&&on(u,r.props);var l=new nn(r,u,s,i,t),p=a.render.call(null,l._c,l);if(p instanceof we)return rn(p,r,l.parent,a,l);if(Array.isArray(p)){for(var h=xt(p)||[],d=new Array(h.length),y=0;y<h.length;y++)d[y]=rn(h[y],r,l.parent,a,l);return d}}(t,p,n,s,u);var d=n.on;if(n.on=n.nativeOn,i(t.options.abstract)){var y=n.slot;n={},y&&(n.slot=y)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<an.length;n++){var r=an[n],o=t[r],i=sn[r];o===i||o&&o._merged||(t[r]=o?cn(i,o):i)}}(n);var g=t.options.name||c;return new we("vue-component-"+t.cid+(g?"-"+g:""),n,void 0,void 0,void 0,s,{Ctor:t,propsData:p,listeners:d,tag:c,children:u},l)}fe("Invalid Component definition: "+String(t),s)}}function cn(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function fn(e,t,n,u,c,f){return(Array.isArray(n)||s(n))&&(c=u,u=n,n=void 0),i(f)&&(c=2),function(e,t,n,u,c){if(o(n)&&o(n.__ob__))return fe("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),Ee();if(o(n)&&o(n.is)&&(t=n.is),!t)return Ee();var f,l,p;(o(n)&&o(n.key)&&!s(n.key)&&fe("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(u)&&"function"==typeof u[0]&&((n=n||{}).scopedSlots={default:u[0]},u.length=0),2===c?u=xt(u):1===c&&(u=function(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}(u)),"string"==typeof t)?(l=e.$vnode&&e.$vnode.ns||$.getTagNamespace(t),$.isReservedTag(t)?(o(n)&&o(n.nativeOn)&&fe("The .native modifier for v-on is only valid on components but it was used on <"+t+">.",e),f=new we($.parsePlatformTagName(t),n,u,void 0,void 0,e)):f=n&&n.pre||!o(p=Ke(e.$options,"components",t))?new we(t,n,u,void 0,void 0,e):un(p,n,e,u,t)):f=un(t,n,e,u);return Array.isArray(f)?f:o(f)?(o(l)&&function e(t,n,s){if(t.ns=n,"foreignObject"===t.tag&&(n=void 0,s=!0),o(t.children))for(var a=0,u=t.children.length;a<u;a++){var c=t.children[a];o(c.tag)&&(r(c.ns)||i(s)&&"svg"!==c.tag)&&e(c,n,s)}}(f,l),o(n)&&function(e){a(e.style)&&Tt(e.style),a(e.class)&&Tt(e.class)}(n),f):Ee()}(e,t,n,u,c)}var ln,pn=null;function hn(e,t){return(e.__esModule||ce&&"Module"===e[Symbol.toStringTag])&&(e=e.default),a(e)?t.extend(e):e}function dn(e){return e.isComment&&e.asyncFactory}function yn(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(o(n)&&(o(n.componentOptions)||dn(n)))return n}}function gn(e,t){ln.$on(e,t)}function vn(e,t){ln.$off(e,t)}function mn(e,t){var n=ln;return function r(){var o=t.apply(null,arguments);null!==o&&n.$off(e,r)}}function _n(e,t,n){ln=e,Bt(t,n||{},gn,vn,mn,e),ln=void 0}var bn=null,wn=!1;function An(e){var t=bn;return bn=e,function(){bn=t}}function En(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function Sn(e,t){if(t){if(e._directInactive=!1,En(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)Sn(e.$children[n]);On(e,"activated")}}function On(e,t){_e();var n=e.$options[t],r=t+" hook";if(n)for(var o=0,i=n.length;o<i;o++)nt(n[o],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),be()}var In=[],Tn=[],Nn={},Rn={},Bn=!1,Dn=!1,Pn=0,xn=0,Cn=Date.now;if(G&&!X){var Ln=window.performance;Ln&&"function"==typeof Ln.now&&Cn()>document.createEvent("Event").timeStamp&&(Cn=function(){return Ln.now()})}function kn(){var e,t;for(xn=Cn(),Dn=!0,In.sort((function(e,t){return e.id-t.id})),Pn=0;Pn<In.length;Pn++)if((e=In[Pn]).before&&e.before(),t=e.id,Nn[t]=null,e.run(),null!=Nn[t]&&(Rn[t]=(Rn[t]||0)+1,Rn[t]>100)){fe("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=Tn.slice(),r=In.slice();Pn=In.length=Tn.length=0,Nn={},Rn={},Bn=Dn=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,Sn(e[t],!0)}(n),function(e){for(var t=e.length;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&On(r,"updated")}}(r),se&&$.devtools&&se.emit("flush")}var Mn=0,jn=function(e,t,n,r,o){this.vm=e,o&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Mn,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ue,this.newDepIds=new ue,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=function(e){if(!H.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=P,fe('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};jn.prototype.get=function(){var e;_e(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;tt(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Tt(e),be(),this.cleanupDeps()}return e},jn.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},jn.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},jn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Nn[t]){if(Nn[t]=!0,Dn){for(var n=In.length-1;n>Pn&&In[n].id>e.id;)n--;In.splice(n+1,0,e)}else In.push(e);if(!Bn){if(Bn=!0,!$.async)return void kn();gt(kn)}}}(this)},jn.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||a(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){tt(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},jn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},jn.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},jn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||_(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var Un={enumerable:!0,configurable:!0,get:P,set:P};function $n(e,t,n){Un.get=function(){return this[t][n]},Un.set=function(e){this[t][n]=e},Object.defineProperty(e,n,Un)}function Fn(e){e._watchers=[];var t=e.$options;t.props&&function(e,t){var n=e.$options.propsData||{},r=e._props={},o=e.$options._propKeys=[],i=!e.$parent;i||Be(!1);var s=function(s){o.push(s);var a=Ge(s,t,n,e),u=T(s);(m(u)||$.isReservedAttr(u))&&fe('"'+u+'" is a reserved attribute and cannot be used as component prop.',e),xe(r,s,a,(function(){i||wn||fe("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+s+'"',e)})),s in e||$n(e,"_props",s)};for(var a in t)s(a);Be(!0)}(e,t.props),t.methods&&function(e,t){var n=e.$options.props;for(var r in t)"function"!=typeof t[r]&&fe('Method "'+r+'" has type "'+typeof t[r]+'" in the component definition. Did you reference the function correctly?',e),n&&w(n,r)&&fe('Method "'+r+'" has already been defined as a prop.',e),r in e&&q(r)&&fe('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]="function"!=typeof t[r]?P:N(t[r],e)}(e,t.methods),t.data?function(e){var t=e.$options.data;f(t=e._data="function"==typeof t?function(e,t){_e();try{return e.call(t,t)}catch(e){return tt(e,t,"data()"),{}}finally{be()}}(t,e):t||{})||(t={},fe("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var n=Object.keys(t),r=e.$options.props,o=e.$options.methods,i=n.length;i--;){var s=n[i];o&&w(o,s)&&fe('Method "'+s+'" has already been defined as a data property.',e),r&&w(r,s)?fe('The data property "'+s+'" is already declared as a prop. Use prop default value instead.',e):q(s)||$n(e,"_data",s)}Pe(t,!0)}(e):Pe(e._data={},!0),t.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),r=ie();for(var o in t){var i=t[o],s="function"==typeof i?i:i.get;null==s&&fe('Getter is missing for computed property "'+o+'".',e),r||(n[o]=new jn(e,s||P,P,qn)),o in e?o in e.$data?fe('The computed property "'+o+'" is already defined in data.',e):e.$options.props&&o in e.$options.props&&fe('The computed property "'+o+'" is already defined as a prop.',e):Wn(e,o,i)}}(e,t.computed),t.watch&&t.watch!==ne&&function(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var o=0;o<r.length;o++)Kn(e,n,r[o]);else Kn(e,n,r)}}(e,t.watch)}var qn={lazy:!0};function Wn(e,t,n){var r=!ie();"function"==typeof n?(Un.get=r?Yn(t):Hn(n),Un.set=P):(Un.get=n.get?r&&!1!==n.cache?Yn(t):Hn(n.get):P,Un.set=n.set||P),Un.set===P&&(Un.set=function(){fe('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,Un)}function Yn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),ve.target&&t.depend(),t.value}}function Hn(e){return function(){return e.call(this,this)}}function Kn(e,t,n,r){return f(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}var Gn=0;function Vn(e){var t=e.options;if(e.super){var n=Vn(e.super);if(n!==e.superOptions){e.superOptions=n;var r=function(e){var t,n=e.options,r=e.sealedOptions;for(var o in n)n[o]!==r[o]&&(t||(t={}),t[o]=n[o]);return t}(e);r&&B(e.extendOptions,r),(t=e.options=He(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Jn(e){this instanceof Jn||fe("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function zn(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,o=e._Ctor||(e._Ctor={});if(o[r])return o[r];var i=e.name||n.options.name;i&&We(i);var s=function(e){this._init(e)};return(s.prototype=Object.create(n.prototype)).constructor=s,s.cid=t++,s.options=He(n.options,e),s.super=n,s.options.props&&function(e){var t=e.options.props;for(var n in t)$n(e.prototype,"_props",n)}(s),s.options.computed&&function(e){var t=e.options.computed;for(var n in t)Wn(e.prototype,n,t[n])}(s),s.extend=n.extend,s.mixin=n.mixin,s.use=n.use,j.forEach((function(e){s[e]=n[e]})),i&&(s.options.components[i]=s),s.superOptions=n.options,s.extendOptions=e,s.sealedOptions=B({},s.options),o[r]=s,s}}function Xn(e){return e&&(e.Ctor.options.name||e.tag)}function Zn(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!l(e)&&e.test(t)}function Qn(e,t){var n=e.cache,r=e.keys,o=e._vnode;for(var i in n){var s=n[i];if(s){var a=Xn(s.componentOptions);a&&!t(a)&&er(n,i,r,o)}}}function er(e,t,n,r){var o=e[t];!o||r&&o.tag===r.tag||o.componentInstance.$destroy(),e[t]=null,_(n,t)}!function(t){t.prototype._init=function(t){var n,r,o=this;o._uid=Gn++,$.performance&&st&&(n="vue-perf-start:"+o._uid,r="vue-perf-end:"+o._uid,st(n)),o._isVue=!0,t&&t._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var o=r.componentOptions;n.propsData=o.propsData,n._parentListeners=o.listeners,n._renderChildren=o.children,n._componentTag=o.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(o,t):o.$options=He(Vn(o.constructor),t||{},o),vt(o),o._self=o,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(o),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&_n(e,t)}(o),function(t){t._vnode=null,t._staticTrees=null;var n=t.$options,r=t.$vnode=n._parentVnode,o=r&&r.context;t.$slots=kt(n._renderChildren,o),t.$scopedSlots=e,t._c=function(e,n,r,o){return fn(t,e,n,r,o,!1)},t.$createElement=function(e,n,r,o){return fn(t,e,n,r,o,!0)};var i=r&&r.data;xe(t,"$attrs",i&&i.attrs||e,(function(){!wn&&fe("$attrs is readonly.",t)}),!0),xe(t,"$listeners",n._parentListeners||e,(function(){!wn&&fe("$listeners is readonly.",t)}),!0)}(o),On(o,"beforeCreate"),function(e){var t=Lt(e.$options.inject,e);t&&(Be(!1),Object.keys(t).forEach((function(n){xe(e,n,t[n],(function(){fe('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)}))})),Be(!0))}(o),Fn(o),function(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}(o),On(o,"created"),$.performance&&st&&(o._name=pe(o,!1),st(r),at("vue "+o._name+" init",n,r)),o.$options.el&&o.$mount(o.$options.el)}}(Jn),function(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(){fe("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){fe("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=Ce,e.prototype.$delete=Le,e.prototype.$watch=function(e,t,n){if(f(t))return Kn(this,e,t,n);(n=n||{}).user=!0;var r=new jn(this,e,t,n);if(n.immediate)try{t.call(this,r.value)}catch(e){tt(e,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(Jn),function(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var o=0,i=e.length;o<i;o++)r.$on(e[o],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,o=e.length;r<o;r++)n.$off(e[r],t);return n}var i,s=n._events[e];if(!s)return n;if(!t)return n._events[e]=null,n;for(var a=s.length;a--;)if((i=s[a])===t||i.fn===t){s.splice(a,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&le('Event "'+n+'" is emitted in component '+pe(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+T(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?R(r):r;for(var o=R(arguments,1),i='event handler for "'+e+'"',s=0,a=r.length;s<a;s++)nt(r[s],t,o,t,i)}return t}}(Jn),function(e){e.prototype._update=function(e,t){var n=this,r=n.$el,o=n._vnode,i=An(n);n._vnode=e,n.$el=o?n.__patch__(o,e):n.__patch__(n.$el,e,t,!1),i(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){On(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||_(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),On(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(Jn),function(e){tn(e.prototype),e.prototype.$nextTick=function(e){return gt(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,o=n._parentVnode;o&&(t.$scopedSlots=jt(o.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=o;try{pn=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){if(tt(n,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,n)}catch(n){tt(n,t,"renderError"),e=t._vnode}else e=t._vnode}finally{pn=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof we||(Array.isArray(e)&&fe("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=Ee()),e.parent=o,e}}(Jn);var tr=[String,RegExp,Array],nr={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:tr,exclude:tr,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)er(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",(function(t){Qn(e,(function(e){return Zn(t,e)}))})),this.$watch("exclude",(function(t){Qn(e,(function(e){return!Zn(t,e)}))}))},render:function(){var e=this.$slots.default,t=yn(e),n=t&&t.componentOptions;if(n){var r=Xn(n),o=this.include,i=this.exclude;if(o&&(!r||!Zn(o,r))||i&&r&&Zn(i,r))return t;var s=this.cache,a=this.keys,u=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;s[u]?(t.componentInstance=s[u].componentInstance,_(a,u),a.push(u)):(s[u]=t,a.push(u),this.max&&a.length>parseInt(this.max)&&er(s,a[0],a,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return $},set:function(){fe("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:fe,extend:B,mergeOptions:He,defineReactive:xe},e.set=Ce,e.delete=Le,e.nextTick=gt,e.observable=function(e){return Pe(e),e},e.options=Object.create(null),j.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,B(e.options.components,nr),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=R(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=He(this.options,e),this}}(e),zn(e),function(e){j.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&We(e),"component"===t&&f(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(Jn),Object.defineProperty(Jn.prototype,"$isServer",{get:ie}),Object.defineProperty(Jn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Jn,"FunctionalRenderContext",{value:nn}),Jn.version="2.6.12";var rr=g("style,class"),or=g("input,textarea,option,select,progress"),ir=function(e,t,n){return"value"===n&&or(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},sr=g("contenteditable,draggable,spellcheck"),ar=g("events,caret,typing,plaintext-only"),ur=g("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),cr="http://www.w3.org/1999/xlink",fr=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},lr=function(e){return fr(e)?e.slice(6,e.length):""},pr=function(e){return null==e||!1===e};function hr(e){for(var t=e.data,n=e,r=e;o(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=dr(r.data,t));for(;o(n=n.parent);)n&&n.data&&(t=dr(t,n.data));return i=t.staticClass,s=t.class,o(i)||o(s)?yr(i,gr(s)):"";var i,s}function dr(e,t){return{staticClass:yr(e.staticClass,t.staticClass),class:o(e.class)?[e.class,t.class]:t.class}}function yr(e,t){return e?t?e+" "+t:e:t||""}function gr(e){return Array.isArray(e)?function(e){for(var t,n="",r=0,i=e.length;r<i;r++)o(t=gr(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):a(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var vr={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},mr=g("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),_r=g("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),br=function(e){return mr(e)||_r(e)};function wr(e){return _r(e)?"svg":"math"===e?"math":void 0}var Ar=Object.create(null),Er=g("text,number,password,search,email,tel,url");function Sr(e){if("string"==typeof e){var t=document.querySelector(e);return t||(fe("Cannot find element: "+e),document.createElement("div"))}return e}var Or=Object.freeze({createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(vr[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),Ir={create:function(e,t){Tr(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Tr(e,!0),Tr(t))},destroy:function(e){Tr(e,!0)}};function Tr(e,t){var n=e.data.ref;if(o(n)){var r=e.context,i=e.componentInstance||e.elm,s=r.$refs;t?Array.isArray(s[n])?_(s[n],i):s[n]===i&&(s[n]=void 0):e.data.refInFor?Array.isArray(s[n])?s[n].indexOf(i)<0&&s[n].push(i):s[n]=[i]:s[n]=i}}var Nr=new we("",{},[]),Rr=["create","activate","update","remove","destroy"];function Br(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&o(e.data)===o(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,r=o(n=e.data)&&o(n=n.attrs)&&n.type,i=o(n=t.data)&&o(n=n.attrs)&&n.type;return r===i||Er(r)&&Er(i)}(e,t)||i(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&r(t.asyncFactory.error))}function Dr(e,t,n){var r,i,s={};for(r=t;r<=n;++r)o(i=e[r].key)&&(s[i]=r);return s}var Pr={create:xr,update:xr,destroy:function(e){xr(e,Nr)}};function xr(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,r,o,i=e===Nr,s=t===Nr,a=Lr(e.data.directives,e.context),u=Lr(t.data.directives,t.context),c=[],f=[];for(n in u)r=a[n],o=u[n],r?(o.oldValue=r.value,o.oldArg=r.arg,Mr(o,"update",t,e),o.def&&o.def.componentUpdated&&f.push(o)):(Mr(o,"bind",t,e),o.def&&o.def.inserted&&c.push(o));if(c.length){var l=function(){for(var n=0;n<c.length;n++)Mr(c[n],"inserted",t,e)};i?Dt(t,"insert",l):l()}if(f.length&&Dt(t,"postpatch",(function(){for(var n=0;n<f.length;n++)Mr(f[n],"componentUpdated",t,e)})),!i)for(n in a)u[n]||Mr(a[n],"unbind",e,e,s)}(e,t)}var Cr=Object.create(null);function Lr(e,t){var n,r,o=Object.create(null);if(!e)return o;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=Cr),o[kr(r)]=r,r.def=Ke(t.$options,"directives",r.name,!0);return o}function kr(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function Mr(e,t,n,r,o){var i=e.def&&e.def[t];if(i)try{i(n.elm,e,n,r,o)}catch(r){tt(r,n.context,"directive "+e.name+" "+t+" hook")}}var jr=[Ir,Pr];function Ur(e,t){var n=t.componentOptions;if(!(o(n)&&!1===n.Ctor.options.inheritAttrs||r(e.data.attrs)&&r(t.data.attrs))){var i,s,a=t.elm,u=e.data.attrs||{},c=t.data.attrs||{};for(i in o(c.__ob__)&&(c=t.data.attrs=B({},c)),c)s=c[i],u[i]!==s&&$r(a,i,s);for(i in(X||Q)&&c.value!==u.value&&$r(a,"value",c.value),u)r(c[i])&&(fr(i)?a.removeAttributeNS(cr,lr(i)):sr(i)||a.removeAttribute(i))}}function $r(e,t,n){e.tagName.indexOf("-")>-1?Fr(e,t,n):ur(t)?pr(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):sr(t)?e.setAttribute(t,function(e,t){return pr(t)||"false"===t?"false":"contenteditable"===e&&ar(t)?t:"true"}(t,n)):fr(t)?pr(n)?e.removeAttributeNS(cr,lr(t)):e.setAttributeNS(cr,t,n):Fr(e,t,n)}function Fr(e,t,n){if(pr(n))e.removeAttribute(t);else{if(X&&!Z&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var r=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",r)};e.addEventListener("input",r),e.__ieph=!0}e.setAttribute(t,n)}}var qr={create:Ur,update:Ur};function Wr(e,t){var n=t.elm,i=t.data,s=e.data;if(!(r(i.staticClass)&&r(i.class)&&(r(s)||r(s.staticClass)&&r(s.class)))){var a=hr(t),u=n._transitionClasses;o(u)&&(a=yr(a,gr(u))),a!==n._prevClass&&(n.setAttribute("class",a),n._prevClass=a)}}var Yr,Hr,Kr,Gr,Vr,Jr,zr,Xr,Zr={create:Wr,update:Wr},Qr=/[\w).+\-_$\]]/;function eo(e){var t,n,r,o,i,s=!1,a=!1,u=!1,c=!1,f=0,l=0,p=0,h=0;for(r=0;r<e.length;r++)if(n=t,t=e.charCodeAt(r),s)39===t&&92!==n&&(s=!1);else if(a)34===t&&92!==n&&(a=!1);else if(u)96===t&&92!==n&&(u=!1);else if(c)47===t&&92!==n&&(c=!1);else if(124!==t||124===e.charCodeAt(r+1)||124===e.charCodeAt(r-1)||f||l||p){switch(t){case 34:a=!0;break;case 39:s=!0;break;case 96:u=!0;break;case 40:p++;break;case 41:p--;break;case 91:l++;break;case 93:l--;break;case 123:f++;break;case 125:f--}if(47===t){for(var d=r-1,y=void 0;d>=0&&" "===(y=e.charAt(d));d--);y&&Qr.test(y)||(c=!0)}}else void 0===o?(h=r+1,o=e.slice(0,r).trim()):g();function g(){(i||(i=[])).push(e.slice(h,r).trim()),h=r+1}if(void 0===o?o=e.slice(0,r).trim():0!==h&&g(),i)for(r=0;r<i.length;r++)o=to(o,i[r]);return o}function to(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),o=t.slice(n+1);return'_f("'+r+'")('+e+(")"!==o?","+o:o)}function no(e,t){console.error("[Vue compiler]: "+e)}function ro(e,t){return e?e.map((function(e){return e[t]})).filter((function(e){return e})):[]}function oo(e,t,n,r,o){(e.props||(e.props=[])).push(yo({name:t,value:n,dynamic:o},r)),e.plain=!1}function io(e,t,n,r,o){(o?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(yo({name:t,value:n,dynamic:o},r)),e.plain=!1}function so(e,t,n,r){e.attrsMap[t]=n,e.attrsList.push(yo({name:t,value:n},r))}function ao(e,t,n,r,o,i,s,a){(e.directives||(e.directives=[])).push(yo({name:t,rawName:n,value:r,arg:o,isDynamicArg:i,modifiers:s},a)),e.plain=!1}function uo(e,t,n){return n?"_p("+t+',"'+e+'")':e+t}function co(t,n,r,o,i,s,a,u){var c;o=o||e,s&&o.prevent&&o.passive&&s("passive and prevent can't be used together. Passive handler can't prevent default event.",a),o.right?u?n="("+n+")==='click'?'contextmenu':("+n+")":"click"===n&&(n="contextmenu",delete o.right):o.middle&&(u?n="("+n+")==='click'?'mouseup':("+n+")":"click"===n&&(n="mouseup")),o.capture&&(delete o.capture,n=uo("!",n,u)),o.once&&(delete o.once,n=uo("~",n,u)),o.passive&&(delete o.passive,n=uo("&",n,u)),o.native?(delete o.native,c=t.nativeEvents||(t.nativeEvents={})):c=t.events||(t.events={});var f=yo({value:r.trim(),dynamic:u},a);o!==e&&(f.modifiers=o);var l=c[n];Array.isArray(l)?i?l.unshift(f):l.push(f):c[n]=l?i?[f,l]:[l,f]:f,t.plain=!1}function fo(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}function lo(e,t,n){var r=po(e,":"+t)||po(e,"v-bind:"+t);if(null!=r)return eo(r);if(!1!==n){var o=po(e,t);if(null!=o)return JSON.stringify(o)}}function po(e,t,n){var r;if(null!=(r=e.attrsMap[t]))for(var o=e.attrsList,i=0,s=o.length;i<s;i++)if(o[i].name===t){o.splice(i,1);break}return n&&delete e.attrsMap[t],r}function ho(e,t){for(var n=e.attrsList,r=0,o=n.length;r<o;r++){var i=n[r];if(t.test(i.name))return n.splice(r,1),i}}function yo(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function go(e,t,n){var r=n||{},o=r.number,i="$$v";r.trim&&(i="(typeof $$v === 'string'? $$v.trim(): $$v)"),o&&(i="_n("+i+")");var s=vo(t,i);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+s+"}"}}function vo(e,t){var n=function(e){if(e=e.trim(),Yr=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<Yr-1)return(Gr=e.lastIndexOf("."))>-1?{exp:e.slice(0,Gr),key:'"'+e.slice(Gr+1)+'"'}:{exp:e,key:null};for(Hr=e,Gr=Vr=Jr=0;!_o();)bo(Kr=mo())?Ao(Kr):91===Kr&&wo(Kr);return{exp:e.slice(0,Vr),key:e.slice(Vr+1,Jr)}}(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function mo(){return Hr.charCodeAt(++Gr)}function _o(){return Gr>=Yr}function bo(e){return 34===e||39===e}function wo(e){var t=1;for(Vr=Gr;!_o();)if(bo(e=mo()))Ao(e);else if(91===e&&t++,93===e&&t--,0===t){Jr=Gr;break}}function Ao(e){for(var t=e;!_o()&&(e=mo())!==t;);}function Eo(e,t,n){var r=Xr;return function o(){var i=t.apply(null,arguments);null!==i&&Io(e,o,n,r)}}var So=ut&&!(te&&Number(te[1])<=53);function Oo(e,t,n,r){if(So){var o=xn,i=t;t=i._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=o||e.timeStamp<=0||e.target.ownerDocument!==document)return i.apply(this,arguments)}}Xr.addEventListener(e,t,re?{capture:n,passive:r}:n)}function Io(e,t,n,r){(r||Xr).removeEventListener(e,t._wrapper||t,n)}function To(e,t){if(!r(e.data.on)||!r(t.data.on)){var n=t.data.on||{},i=e.data.on||{};Xr=t.elm,function(e){if(o(e.__r)){var t=X?"change":"input";e[t]=[].concat(e.__r,e[t]||[]),delete e.__r}o(e.__c)&&(e.change=[].concat(e.__c,e.change||[]),delete e.__c)}(n),Bt(n,i,Oo,Io,Eo,t.context),Xr=void 0}}var No,Ro={create:To,update:To};function Bo(e,t){if(!r(e.data.domProps)||!r(t.data.domProps)){var n,i,s=t.elm,a=e.data.domProps||{},u=t.data.domProps||{};for(n in o(u.__ob__)&&(u=t.data.domProps=B({},u)),a)n in u||(s[n]="");for(n in u){if(i=u[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),i===a[n])continue;1===s.childNodes.length&&s.removeChild(s.childNodes[0])}if("value"===n&&"PROGRESS"!==s.tagName){s._value=i;var c=r(i)?"":String(i);Do(s,c)&&(s.value=c)}else if("innerHTML"===n&&_r(s.tagName)&&r(s.innerHTML)){(No=No||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var f=No.firstChild;s.firstChild;)s.removeChild(s.firstChild);for(;f.firstChild;)s.appendChild(f.firstChild)}else if(i!==a[n])try{s[n]=i}catch(e){}}}}function Do(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,r=e._vModifiers;if(o(r)){if(r.number)return y(n)!==y(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var Po={create:Bo,update:Bo},xo=A((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}})),t}));function Co(e){var t=Lo(e.style);return e.staticStyle?B(e.staticStyle,t):t}function Lo(e){return Array.isArray(e)?D(e):"string"==typeof e?xo(e):e}var ko,Mo=/^--/,jo=/\s*!important$/,Uo=function(e,t,n){if(Mo.test(t))e.style.setProperty(t,n);else if(jo.test(n))e.style.setProperty(T(t),n.replace(jo,""),"important");else{var r=Fo(t);if(Array.isArray(n))for(var o=0,i=n.length;o<i;o++)e.style[r]=n[o];else e.style[r]=n}},$o=["Webkit","Moz","ms"],Fo=A((function(e){if(ko=ko||document.createElement("div").style,"filter"!==(e=S(e))&&e in ko)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<$o.length;n++){var r=$o[n]+t;if(r in ko)return r}}));function qo(e,t){var n=t.data,i=e.data;if(!(r(n.staticStyle)&&r(n.style)&&r(i.staticStyle)&&r(i.style))){var s,a,u=t.elm,c=i.staticStyle,f=i.normalizedStyle||i.style||{},l=c||f,p=Lo(t.data.style)||{};t.data.normalizedStyle=o(p.__ob__)?B({},p):p;var h=function(e,t){var n,r={};if(t)for(var o=e;o.componentInstance;)(o=o.componentInstance._vnode)&&o.data&&(n=Co(o.data))&&B(r,n);(n=Co(e.data))&&B(r,n);for(var i=e;i=i.parent;)i.data&&(n=Co(i.data))&&B(r,n);return r}(t,!0);for(a in l)r(h[a])&&Uo(u,a,"");for(a in h)(s=h[a])!==l[a]&&Uo(u,a,null==s?"":s)}}var Wo={create:qo,update:qo},Yo=/\s+/;function Ho(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Yo).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function Ko(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Yo).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function Go(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&B(t,Vo(e.name||"v")),B(t,e),t}return"string"==typeof e?Vo(e):void 0}}var Vo=A((function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}})),Jo=G&&!Z,zo="transition",Xo="transitionend",Zo="animation",Qo="animationend";Jo&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(zo="WebkitTransition",Xo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Zo="WebkitAnimation",Qo="webkitAnimationEnd"));var ei=G?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function ti(e){ei((function(){ei(e)}))}function ni(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),Ho(e,t))}function ri(e,t){e._transitionClasses&&_(e._transitionClasses,t),Ko(e,t)}function oi(e,t,n){var r=si(e,t),o=r.type,i=r.timeout,s=r.propCount;if(!o)return n();var a="transition"===o?Xo:Qo,u=0,c=function(){e.removeEventListener(a,f),n()},f=function(t){t.target===e&&++u>=s&&c()};setTimeout((function(){u<s&&c()}),i+1),e.addEventListener(a,f)}var ii=/\b(transform|all)(,|$)/;function si(e,t){var n,r=window.getComputedStyle(e),o=(r[zo+"Delay"]||"").split(", "),i=(r[zo+"Duration"]||"").split(", "),s=ai(o,i),a=(r[Zo+"Delay"]||"").split(", "),u=(r[Zo+"Duration"]||"").split(", "),c=ai(a,u),f=0,l=0;return"transition"===t?s>0&&(n="transition",f=s,l=i.length):"animation"===t?c>0&&(n="animation",f=c,l=u.length):l=(n=(f=Math.max(s,c))>0?s>c?"transition":"animation":null)?"transition"===n?i.length:u.length:0,{type:n,timeout:f,propCount:l,hasTransform:"transition"===n&&ii.test(r[zo+"Property"])}}function ai(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return ui(t)+ui(e[n])})))}function ui(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function ci(e,t){var n=e.elm;o(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var i=Go(e.data.transition);if(!r(i)&&!o(n._enterCb)&&1===n.nodeType){for(var s=i.css,u=i.type,c=i.enterClass,f=i.enterToClass,l=i.enterActiveClass,p=i.appearClass,h=i.appearToClass,d=i.appearActiveClass,g=i.beforeEnter,v=i.enter,m=i.afterEnter,_=i.enterCancelled,b=i.beforeAppear,w=i.appear,A=i.afterAppear,E=i.appearCancelled,S=i.duration,O=bn,I=bn.$vnode;I&&I.parent;)O=I.context,I=I.parent;var T=!O._isMounted||!e.isRootInsert;if(!T||w||""===w){var N=T&&p?p:c,R=T&&d?d:l,B=T&&h?h:f,D=T&&b||g,P=T&&"function"==typeof w?w:v,x=T&&A||m,C=T&&E||_,L=y(a(S)?S.enter:S);null!=L&&li(L,"enter",e);var k=!1!==s&&!Z,j=hi(P),U=n._enterCb=M((function(){k&&(ri(n,B),ri(n,R)),U.cancelled?(k&&ri(n,N),C&&C(n)):x&&x(n),n._enterCb=null}));e.data.show||Dt(e,"insert",(function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),P&&P(n,U)})),D&&D(n),k&&(ni(n,N),ni(n,R),ti((function(){ri(n,N),U.cancelled||(ni(n,B),j||(pi(L)?setTimeout(U,L):oi(n,u,U)))}))),e.data.show&&(t&&t(),P&&P(n,U)),k||j||U()}}}function fi(e,t){var n=e.elm;o(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var i=Go(e.data.transition);if(r(i)||1!==n.nodeType)return t();if(!o(n._leaveCb)){var s=i.css,u=i.type,c=i.leaveClass,f=i.leaveToClass,l=i.leaveActiveClass,p=i.beforeLeave,h=i.leave,d=i.afterLeave,g=i.leaveCancelled,v=i.delayLeave,m=i.duration,_=!1!==s&&!Z,b=hi(h),w=y(a(m)?m.leave:m);o(w)&&li(w,"leave",e);var A=n._leaveCb=M((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),_&&(ri(n,f),ri(n,l)),A.cancelled?(_&&ri(n,c),g&&g(n)):(t(),d&&d(n)),n._leaveCb=null}));v?v(E):E()}function E(){A.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),p&&p(n),_&&(ni(n,c),ni(n,l),ti((function(){ri(n,c),A.cancelled||(ni(n,f),b||(pi(w)?setTimeout(A,w):oi(n,u,A)))}))),h&&h(n,A),_||b||A())}}function li(e,t,n){"number"!=typeof e?fe("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&fe("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function pi(e){return"number"==typeof e&&!isNaN(e)}function hi(e){if(r(e))return!1;var t=e.fns;return o(t)?hi(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function di(e,t){!0!==t.data.show&&ci(t)}var yi=function(e){var t,n,a={},u=e.modules,c=e.nodeOps;for(t=0;t<Rr.length;++t)for(a[Rr[t]]=[],n=0;n<u.length;++n)o(u[n][Rr[t]])&&a[Rr[t]].push(u[n][Rr[t]]);function f(e){var t=c.parentNode(e);o(t)&&c.removeChild(t,e)}function p(e,t){return!t&&!e.ns&&!($.ignoredElements.length&&$.ignoredElements.some((function(t){return l(t)?t.test(e.tag):t===e.tag})))&&$.isUnknownElement(e.tag)}var h=0;function d(e,t,n,r,s,u,f){if(o(e.elm)&&o(u)&&(e=u[f]=Oe(e)),e.isRootInsert=!s,!function(e,t,n,r){var s=e.data;if(o(s)){var u=o(e.componentInstance)&&s.keepAlive;if(o(s=s.hook)&&o(s=s.init)&&s(e,!1),o(e.componentInstance))return y(e,t),v(n,e.elm,r),i(u)&&function(e,t,n,r){for(var i,s=e;s.componentInstance;)if(s=s.componentInstance._vnode,o(i=s.data)&&o(i=i.transition)){for(i=0;i<a.activate.length;++i)a.activate[i](Nr,s);t.push(s);break}v(n,e.elm,r)}(e,t,n,r),!0}}(e,t,n,r)){var l=e.data,d=e.children,g=e.tag;o(g)?(l&&l.pre&&h++,p(e,h)&&fe("Unknown custom element: <"+g+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?c.createElementNS(e.ns,g):c.createElement(g,e),w(e),m(e,d,t),o(l)&&b(e,t),v(n,e.elm,r),l&&l.pre&&h--):i(e.isComment)?(e.elm=c.createComment(e.text),v(n,e.elm,r)):(e.elm=c.createTextNode(e.text),v(n,e.elm,r))}}function y(e,t){o(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,_(e)?(b(e,t),w(e)):(Tr(e),t.push(e))}function v(e,t,n){o(e)&&(o(n)?c.parentNode(n)===e&&c.insertBefore(e,t,n):c.appendChild(e,t))}function m(e,t,n){if(Array.isArray(t)){I(t);for(var r=0;r<t.length;++r)d(t[r],n,e.elm,null,!0,t,r)}else s(e.text)&&c.appendChild(e.elm,c.createTextNode(String(e.text)))}function _(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return o(e.tag)}function b(e,n){for(var r=0;r<a.create.length;++r)a.create[r](Nr,e);o(t=e.data.hook)&&(o(t.create)&&t.create(Nr,e),o(t.insert)&&n.push(e))}function w(e){var t;if(o(t=e.fnScopeId))c.setStyleScope(e.elm,t);else for(var n=e;n;)o(t=n.context)&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t),n=n.parent;o(t=bn)&&t!==e.context&&t!==e.fnContext&&o(t=t.$options._scopeId)&&c.setStyleScope(e.elm,t)}function A(e,t,n,r,o,i){for(;r<=o;++r)d(n[r],i,e,t,!1,n,r)}function E(e){var t,n,r=e.data;if(o(r))for(o(t=r.hook)&&o(t=t.destroy)&&t(e),t=0;t<a.destroy.length;++t)a.destroy[t](e);if(o(t=e.children))for(n=0;n<e.children.length;++n)E(e.children[n])}function S(e,t,n){for(;t<=n;++t){var r=e[t];o(r)&&(o(r.tag)?(O(r),E(r)):f(r.elm))}}function O(e,t){if(o(t)||o(e.data)){var n,r=a.remove.length+1;for(o(t)?t.listeners+=r:t=function(e,t){function n(){0==--n.listeners&&f(e)}return n.listeners=t,n}(e.elm,r),o(n=e.componentInstance)&&o(n=n._vnode)&&o(n.data)&&O(n,t),n=0;n<a.remove.length;++n)a.remove[n](e,t);o(n=e.data.hook)&&o(n=n.remove)?n(e,t):t()}else f(e.elm)}function I(e){for(var t={},n=0;n<e.length;n++){var r=e[n],i=r.key;o(i)&&(t[i]?fe("Duplicate keys detected: '"+i+"'. This may cause an update error.",r.context):t[i]=!0)}}function T(e,t,n,r){for(var i=n;i<r;i++){var s=t[i];if(o(s)&&Br(e,s))return i}}function N(e,t,n,s,u,f){if(e!==t){o(t.elm)&&o(s)&&(t=s[u]=Oe(t));var l=t.elm=e.elm;if(i(e.isAsyncPlaceholder))o(t.asyncFactory.resolved)?P(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(i(t.isStatic)&&i(e.isStatic)&&t.key===e.key&&(i(t.isCloned)||i(t.isOnce)))t.componentInstance=e.componentInstance;else{var p,h=t.data;o(h)&&o(p=h.hook)&&o(p=p.prepatch)&&p(e,t);var y=e.children,g=t.children;if(o(h)&&_(t)){for(p=0;p<a.update.length;++p)a.update[p](e,t);o(p=h.hook)&&o(p=p.update)&&p(e,t)}r(t.text)?o(y)&&o(g)?y!==g&&function(e,t,n,i,s){var a,u,f,l=0,p=0,h=t.length-1,y=t[0],g=t[h],v=n.length-1,m=n[0],_=n[v],b=!s;for(I(n);l<=h&&p<=v;)r(y)?y=t[++l]:r(g)?g=t[--h]:Br(y,m)?(N(y,m,i,n,p),y=t[++l],m=n[++p]):Br(g,_)?(N(g,_,i,n,v),g=t[--h],_=n[--v]):Br(y,_)?(N(y,_,i,n,v),b&&c.insertBefore(e,y.elm,c.nextSibling(g.elm)),y=t[++l],_=n[--v]):Br(g,m)?(N(g,m,i,n,p),b&&c.insertBefore(e,g.elm,y.elm),g=t[--h],m=n[++p]):(r(a)&&(a=Dr(t,l,h)),r(u=o(m.key)?a[m.key]:T(m,t,l,h))?d(m,i,e,y.elm,!1,n,p):Br(f=t[u],m)?(N(f,m,i,n,p),t[u]=void 0,b&&c.insertBefore(e,f.elm,y.elm)):d(m,i,e,y.elm,!1,n,p),m=n[++p]);l>h?A(e,r(n[v+1])?null:n[v+1].elm,n,p,v,i):p>v&&S(t,l,h)}(l,y,g,n,f):o(g)?(I(g),o(e.text)&&c.setTextContent(l,""),A(l,null,g,0,g.length-1,n)):o(y)?S(y,0,y.length-1):o(e.text)&&c.setTextContent(l,""):e.text!==t.text&&c.setTextContent(l,t.text),o(h)&&o(p=h.hook)&&o(p=p.postpatch)&&p(e,t)}}}function R(e,t,n){if(i(n)&&o(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var B=!1,D=g("attrs,class,staticClass,staticStyle,key");function P(e,t,n,r){var s,a=t.tag,u=t.data,c=t.children;if(r=r||u&&u.pre,t.elm=e,i(t.isComment)&&o(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,n){return o(t.tag)?0===t.tag.indexOf("vue-component")||!p(t,n)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,r))return!1;if(o(u)&&(o(s=u.hook)&&o(s=s.init)&&s(t,!0),o(s=t.componentInstance)))return y(t,n),!0;if(o(a)){if(o(c))if(e.hasChildNodes())if(o(s=u)&&o(s=s.domProps)&&o(s=s.innerHTML)){if(s!==e.innerHTML)return"undefined"==typeof console||B||(B=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",s),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var f=!0,l=e.firstChild,h=0;h<c.length;h++){if(!l||!P(l,c[h],n,r)){f=!1;break}l=l.nextSibling}if(!f||l)return"undefined"==typeof console||B||(B=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,c)),!1}else m(t,c,n);if(o(u)){var d=!1;for(var g in u)if(!D(g)){d=!0,b(t,n);break}!d&&u.class&&Tt(u.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,s){if(!r(t)){var u,f=!1,l=[];if(r(e))f=!0,d(t,l);else{var p=o(e.nodeType);if(!p&&Br(e,t))N(e,t,l,null,null,s);else{if(p){if(1===e.nodeType&&e.hasAttribute("data-server-rendered")&&(e.removeAttribute("data-server-rendered"),n=!0),i(n)){if(P(e,t,l))return R(t,l,!0),e;fe("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}u=e,e=new we(c.tagName(u).toLowerCase(),{},[],void 0,u)}var h=e.elm,y=c.parentNode(h);if(d(t,l,h._leaveCb?null:y,c.nextSibling(h)),o(t.parent))for(var g=t.parent,v=_(t);g;){for(var m=0;m<a.destroy.length;++m)a.destroy[m](g);if(g.elm=t.elm,v){for(var b=0;b<a.create.length;++b)a.create[b](Nr,g);var w=g.data.hook.insert;if(w.merged)for(var A=1;A<w.fns.length;A++)w.fns[A]()}else Tr(g);g=g.parent}o(y)?S([e],0,0):o(e.tag)&&E(e)}}return R(t,l,f),t.elm}o(e)&&E(e)}}({nodeOps:Or,modules:[qr,Zr,Ro,Po,Wo,G?{create:di,activate:di,remove:function(e,t){!0!==e.data.show?fi(e,t):t()}}:{}].concat(jr)});Z&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&Ei(e,"input")}));var gi={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?Dt(n,"postpatch",(function(){gi.componentUpdated(e,t,n)})):vi(e,t,n.context),e._vOptions=[].map.call(e.options,bi)):("textarea"===n.tag||Er(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",wi),e.addEventListener("compositionend",Ai),e.addEventListener("change",Ai),Z&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){vi(e,t,n.context);var r=e._vOptions,o=e._vOptions=[].map.call(e.options,bi);o.some((function(e,t){return!L(e,r[t])}))&&(e.multiple?t.value.some((function(e){return _i(e,o)})):t.value!==t.oldValue&&_i(t.value,o))&&Ei(e,"change")}}};function vi(e,t,n){mi(e,t,n),(X||Q)&&setTimeout((function(){mi(e,t,n)}),0)}function mi(e,t,n){var r=t.value,o=e.multiple;if(!o||Array.isArray(r)){for(var i,s,a=0,u=e.options.length;a<u;a++)if(s=e.options[a],o)i=k(r,bi(s))>-1,s.selected!==i&&(s.selected=i);else if(L(bi(s),r))return void(e.selectedIndex!==a&&(e.selectedIndex=a));o||(e.selectedIndex=-1)}else fe('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function _i(e,t){return t.every((function(t){return!L(t,e)}))}function bi(e){return"_value"in e?e._value:e.value}function wi(e){e.target.composing=!0}function Ai(e){e.target.composing&&(e.target.composing=!1,Ei(e.target,"input"))}function Ei(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function Si(e){return!e.componentInstance||e.data&&e.data.transition?e:Si(e.componentInstance._vnode)}var Oi={model:gi,show:{bind:function(e,t,n){var r=t.value,o=(n=Si(n)).data&&n.data.transition,i=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&o?(n.data.show=!0,ci(n,(function(){e.style.display=i}))):e.style.display=r?i:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=Si(n)).data&&n.data.transition?(n.data.show=!0,r?ci(n,(function(){e.style.display=e.__vOriginalDisplay})):fi(n,(function(){e.style.display="none"}))):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,o){o||(e.style.display=e.__vOriginalDisplay)}}},Ii={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Ti(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?Ti(yn(t.children)):e}function Ni(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var o=n._parentListeners;for(var i in o)t[S(i)]=o[i];return t}function Ri(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var Bi=function(e){return e.tag||dn(e)},Di=function(e){return"show"===e.name},Pi={name:"transition",props:Ii,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(Bi)).length){n.length>1&&fe("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&fe("invalid <transition> mode: "+r,this.$parent);var o=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return o;var i=Ti(o);if(!i)return o;if(this._leaving)return Ri(e,o);var a="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?a+"comment":a+i.tag:s(i.key)?0===String(i.key).indexOf(a)?i.key:a+i.key:i.key;var u=(i.data||(i.data={})).transition=Ni(this),c=this._vnode,f=Ti(c);if(i.data.directives&&i.data.directives.some(Di)&&(i.data.show=!0),f&&f.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(i,f)&&!dn(f)&&(!f.componentInstance||!f.componentInstance._vnode.isComment)){var l=f.data.transition=B({},u);if("out-in"===r)return this._leaving=!0,Dt(l,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),Ri(e,o);if("in-out"===r){if(dn(i))return c;var p,h=function(){p()};Dt(u,"afterEnter",h),Dt(u,"enterCancelled",h),Dt(l,"delayLeave",(function(e){p=e}))}}return o}}},xi=B({tag:String,moveClass:String},Ii);function Ci(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Li(e){e.data.newPos=e.elm.getBoundingClientRect()}function ki(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,o=t.top-n.top;if(r||o){e.data.moved=!0;var i=e.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+o+"px)",i.transitionDuration="0s"}}delete xi.mode;var Mi={Transition:Pi,TransitionGroup:{props:xi,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var o=An(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,o(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,o=this.$slots.default||[],i=this.children=[],s=Ni(this),a=0;a<o.length;a++){var u=o[a];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))i.push(u),n[u.key]=u,(u.data||(u.data={})).transition=s;else{var c=u.componentOptions,f=c?c.Ctor.options.name||c.tag||"":u.tag;fe("<transition-group> children must be keyed: <"+f+">")}}if(r){for(var l=[],p=[],h=0;h<r.length;h++){var d=r[h];d.data.transition=s,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?l.push(d):p.push(d)}this.kept=e(t,null,l),this.removed=p}return e(t,null,i)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Ci),e.forEach(Li),e.forEach(ki),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,r=n.style;ni(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Xo,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Xo,e),n._moveCb=null,ri(n,t))})}})))},methods:{hasMove:function(e,t){if(!Jo)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){Ko(n,e)})),Ho(n,t),n.style.display="none",this.$el.appendChild(n);var r=si(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};Jn.config.mustUseProp=ir,Jn.config.isReservedTag=br,Jn.config.isReservedAttr=rr,Jn.config.getTagNamespace=wr,Jn.config.isUnknownElement=function(e){if(!G)return!0;if(br(e))return!1;if(e=e.toLowerCase(),null!=Ar[e])return Ar[e];var t=document.createElement(e);return e.indexOf("-")>-1?Ar[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:Ar[e]=/HTMLUnknownElement/.test(t.toString())},B(Jn.options.directives,Oi),B(Jn.options.components,Mi),Jn.prototype.__patch__=G?yi:P,Jn.prototype.$mount=function(e,t){return function(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=Ee,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?fe("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):fe("Failed to mount component: template or render function not defined.",e)),On(e,"beforeMount"),r=$.performance&&st?function(){var t=e._name,r=e._uid,o="vue-perf-start:"+r,i="vue-perf-end:"+r;st(o);var s=e._render();st(i),at("vue "+t+" render",o,i),st(o),e._update(s,n),st(i),at("vue "+t+" patch",o,i)}:function(){e._update(e._render(),n)},new jn(e,r,P,{before:function(){e._isMounted&&!e._isDestroyed&&On(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,On(e,"mounted")),e}(this,e=e&&G?Sr(e):void 0,t)},G&&setTimeout((function(){$.devtools&&(se?se.emit("init",Jn):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==$.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")}),0);var ji=/\{\{((?:.|\r?\n)+?)\}\}/g,Ui=/[-.*+?^${}()|[\]\/\\]/g,$i=A((function(e){var t=e[0].replace(Ui,"\\$&"),n=e[1].replace(Ui,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")}));function Fi(e,t){var n=t?$i(t):ji;if(n.test(e)){for(var r,o,i,s=[],a=[],u=n.lastIndex=0;r=n.exec(e);){(o=r.index)>u&&(a.push(i=e.slice(u,o)),s.push(JSON.stringify(i)));var c=eo(r[1].trim());s.push("_s("+c+")"),a.push({"@binding":c}),u=o+r[0].length}return u<e.length&&(a.push(i=e.slice(u)),s.push(JSON.stringify(i))),{expression:s.join("+"),tokens:a}}}var qi,Wi={staticKeys:["staticClass"],transformNode:function(e,t){var n=t.warn||no,r=po(e,"class");r&&Fi(r,t.delimiters)&&n('class="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.',e.rawAttrsMap.class),r&&(e.staticClass=JSON.stringify(r));var o=lo(e,"class",!1);o&&(e.classBinding=o)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}},Yi={staticKeys:["staticStyle"],transformNode:function(e,t){var n=t.warn||no,r=po(e,"style");r&&(Fi(r,t.delimiters)&&n('style="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.',e.rawAttrsMap.style),e.staticStyle=JSON.stringify(xo(r)));var o=lo(e,"style",!1);o&&(e.styleBinding=o)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}},Hi=function(e){return(qi=qi||document.createElement("div")).innerHTML=e,qi.textContent},Ki=g("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),Gi=g("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),Vi=g("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Ji=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,zi=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Xi="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+F.source+"]*",Zi="((?:"+Xi+"\\:)?"+Xi+")",Qi=new RegExp("^<"+Zi),es=/^\s*(\/?)>/,ts=new RegExp("^<\\/"+Zi+"[^>]*>"),ns=/^<!DOCTYPE [^>]+>/i,rs=/^<!\--/,os=/^<!\[/,is=g("script,style,textarea",!0),ss={},as={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},us=/&(?:lt|gt|quot|amp|#39);/g,cs=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,fs=g("pre,textarea",!0),ls=function(e,t){return e&&fs(e)&&"\n"===t[0]};function ps(e,t){var n=t?cs:us;return e.replace(n,(function(e){return as[e]}))}var hs,ds,ys,gs,vs,ms,_s,bs,ws,As=/^@|^v-on:/,Es=/^v-|^@|^:|^#/,Ss=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Os=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Is=/^\(|\)$/g,Ts=/^\[.*\]$/,Ns=/:(.*)$/,Rs=/^:|^\.|^v-bind:/,Bs=/\.[^.\]]+(?=[^\]]*$)/g,Ds=/^v-slot(:|$)|^#/,Ps=/[\r\n]/,xs=/\s+/g,Cs=/[\s"'<>\/=]/,Ls=A(Hi);function ks(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:Ws(t),rawAttrsMap:{},parent:n,children:[]}}function Ms(e,t){hs=t.warn||no,ms=t.isPreTag||x,_s=t.mustUseProp||x,bs=t.getTagNamespace||x;var n=t.isReservedTag||x;ws=function(e){return!!e.component||!n(e.tag)},ys=ro(t.modules,"transformNode"),gs=ro(t.modules,"preTransformNode"),vs=ro(t.modules,"postTransformNode"),ds=t.delimiters;var r,o,i=[],s=!1!==t.preserveWhitespace,a=t.whitespace,u=!1,c=!1,f=!1;function l(e,t){f||(f=!0,hs(e,t))}function p(e){if(h(e),u||e.processed||(e=js(e,t)),i.length||e===r||(r.if&&(e.elseif||e.else)?(d(e),$s(r,{exp:e.elseif,block:e})):l("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.",{start:e.start})),o&&!e.forbidden)if(e.elseif||e.else)s=e,(a=function(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];" "!==e[t].text&&hs('text "'+e[t].text.trim()+'" between v-if and v-else(-if) will be ignored.',e[t]),e.pop()}}(o.children))&&a.if?$s(a,{exp:s.elseif,block:s}):hs("v-"+(s.elseif?'else-if="'+s.elseif+'"':"else")+" used on element <"+s.tag+"> without corresponding v-if.",s.rawAttrsMap[s.elseif?"v-else-if":"v-else"]);else{if(e.slotScope){var n=e.slotTarget||'"default"';(o.scopedSlots||(o.scopedSlots={}))[n]=e}o.children.push(e),e.parent=o}var s,a;e.children=e.children.filter((function(e){return!e.slotScope})),h(e),e.pre&&(u=!1),ms(e.tag)&&(c=!1);for(var f=0;f<vs.length;f++)vs[f](e,t)}function h(e){if(!c)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}function d(e){"slot"!==e.tag&&"template"!==e.tag||l("Cannot use <"+e.tag+"> as component root element because it may contain multiple nodes.",{start:e.start}),e.attrsMap.hasOwnProperty("v-for")&&l("Cannot use v-for on stateful component root element because it renders multiple elements.",e.rawAttrsMap["v-for"])}return function(e,t){for(var n,r,o=[],i=t.expectHTML,s=t.isUnaryTag||x,a=t.canBeLeftOpenTag||x,u=0;e;){if(n=e,r&&is(r)){var c=0,f=r.toLowerCase(),l=ss[f]||(ss[f]=new RegExp("([\\s\\S]*?)(</"+f+"[^>]*>)","i")),p=e.replace(l,(function(e,n,r){return c=r.length,is(f)||"noscript"===f||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),ls(f,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""}));u+=e.length-p.length,e=p,I(f,u-c,u)}else{var h=e.indexOf("<");if(0===h){if(rs.test(e)){var d=e.indexOf("--\x3e");if(d>=0){t.shouldKeepComment&&t.comment(e.substring(4,d),u,u+d+3),E(d+3);continue}}if(os.test(e)){var y=e.indexOf("]>");if(y>=0){E(y+2);continue}}var g=e.match(ns);if(g){E(g[0].length);continue}var v=e.match(ts);if(v){var m=u;E(v[0].length),I(v[1],m,u);continue}var _=S();if(_){O(_),ls(_.tagName,e)&&E(1);continue}}var b=void 0,w=void 0,A=void 0;if(h>=0){for(w=e.slice(h);!(ts.test(w)||Qi.test(w)||rs.test(w)||os.test(w)||(A=w.indexOf("<",1))<0);)h+=A,w=e.slice(h);b=e.substring(0,h)}h<0&&(b=e),b&&E(b.length),t.chars&&b&&t.chars(b,u-b.length,u)}if(e===n){t.chars&&t.chars(e),!o.length&&t.warn&&t.warn('Mal-formatted tag at end of template: "'+e+'"',{start:u+e.length});break}}function E(t){u+=t,e=e.substring(t)}function S(){var t=e.match(Qi);if(t){var n,r,o={tagName:t[1],attrs:[],start:u};for(E(t[0].length);!(n=e.match(es))&&(r=e.match(zi)||e.match(Ji));)r.start=u,E(r[0].length),r.end=u,o.attrs.push(r);if(n)return o.unarySlash=n[1],E(n[0].length),o.end=u,o}}function O(e){var n=e.tagName,u=e.unarySlash;i&&("p"===r&&Vi(n)&&I(r),a(n)&&r===n&&I(n));for(var c=s(n)||!!u,f=e.attrs.length,l=new Array(f),p=0;p<f;p++){var h=e.attrs[p],d=h[3]||h[4]||h[5]||"",y="a"===n&&"href"===h[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;l[p]={name:h[1],value:ps(d,y)},t.outputSourceRange&&(l[p].start=h.start+h[0].match(/^\s*/).length,l[p].end=h.end)}c||(o.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:l,start:e.start,end:e.end}),r=n),t.start&&t.start(n,l,c,e.start,e.end)}function I(e,n,i){var s,a;if(null==n&&(n=u),null==i&&(i=u),e)for(a=e.toLowerCase(),s=o.length-1;s>=0&&o[s].lowerCasedTag!==a;s--);else s=0;if(s>=0){for(var c=o.length-1;c>=s;c--)(c>s||!e&&t.warn)&&t.warn("tag <"+o[c].tag+"> has no matching end tag.",{start:o[c].start,end:o[c].end}),t.end&&t.end(o[c].tag,n,i);o.length=s,r=s&&o[s-1].tag}else"br"===a?t.start&&t.start(e,[],!0,n,i):"p"===a&&(t.start&&t.start(e,[],!1,n,i),t.end&&t.end(e,n,i))}I()}(e,{warn:hs,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,n,s,a,f){var l=o&&o.ns||bs(e);X&&"svg"===l&&(n=function(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];Ys.test(r.name)||(r.name=r.name.replace(Hs,""),t.push(r))}return t}(n));var h,y=ks(e,n,o);l&&(y.ns=l),t.outputSourceRange&&(y.start=a,y.end=f,y.rawAttrsMap=y.attrsList.reduce((function(e,t){return e[t.name]=t,e}),{})),n.forEach((function(e){Cs.test(e.name)&&hs("Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.",{start:e.start+e.name.indexOf("["),end:e.start+e.name.length})})),"style"!==(h=y).tag&&("script"!==h.tag||h.attrsMap.type&&"text/javascript"!==h.attrsMap.type)||ie()||(y.forbidden=!0,hs("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+e+">, as they will not be parsed.",{start:y.start}));for(var g=0;g<gs.length;g++)y=gs[g](y,t)||y;u||(function(e){null!=po(e,"v-pre")&&(e.pre=!0)}(y),y.pre&&(u=!0)),ms(y.tag)&&(c=!0),u?function(e){var t=e.attrsList,n=t.length;if(n)for(var r=e.attrs=new Array(n),o=0;o<n;o++)r[o]={name:t[o].name,value:JSON.stringify(t[o].value)},null!=t[o].start&&(r[o].start=t[o].start,r[o].end=t[o].end);else e.pre||(e.plain=!0)}(y):y.processed||(Us(y),function(e){var t=po(e,"v-if");if(t)e.if=t,$s(e,{exp:t,block:e});else{null!=po(e,"v-else")&&(e.else=!0);var n=po(e,"v-else-if");n&&(e.elseif=n)}}(y),function(e){null!=po(e,"v-once")&&(e.once=!0)}(y)),r||d(r=y),s?p(y):(o=y,i.push(y))},end:function(e,n,r){var s=i[i.length-1];i.length-=1,o=i[i.length-1],t.outputSourceRange&&(s.end=r),p(s)},chars:function(n,r,i){if(o){if(!X||"textarea"!==o.tag||o.attrsMap.placeholder!==n){var f,p,h,d=o.children;(n=c||n.trim()?"script"===(f=o).tag||"style"===f.tag?n:Ls(n):d.length?a?"condense"===a&&Ps.test(n)?"":" ":s?" ":"":"")&&(c||"condense"!==a||(n=n.replace(xs," ")),!u&&" "!==n&&(p=Fi(n,ds))?h={type:2,expression:p.expression,tokens:p.tokens,text:n}:" "===n&&d.length&&" "===d[d.length-1].text||(h={type:3,text:n}),h&&(t.outputSourceRange&&(h.start=r,h.end=i),d.push(h)))}}else n===e?l("Component template requires a root element, rather than just text.",{start:r}):(n=n.trim())&&l('text "'+n+'" outside root element will be ignored.',{start:r})},comment:function(e,n,r){if(o){var i={type:3,text:e,isComment:!0};t.outputSourceRange&&(i.start=n,i.end=r),o.children.push(i)}}}),r}function js(e,t){var n;!function(e){var t=lo(e,"key");if(t){if("template"===e.tag&&hs("<template> cannot be keyed. Place the key on real elements instead.",fo(e,"key")),e.for){var n=e.iterator2||e.iterator1,r=e.parent;n&&n===t&&r&&"transition-group"===r.tag&&hs("Do not use v-for index as key on <transition-group> children, this is the same as not using keys.",fo(e,"key"),!0)}e.key=t}}(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=lo(e,"ref");t&&(e.ref=t,e.refInFor=function(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?((t=po(e,"scope"))&&hs('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',e.rawAttrsMap.scope,!0),e.slotScope=t||po(e,"slot-scope")):(t=po(e,"slot-scope"))&&(e.attrsMap["v-for"]&&hs("Ambiguous combined usage of slot-scope and v-for on <"+e.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",e.rawAttrsMap["slot-scope"],!0),e.slotScope=t);var n=lo(e,"slot");if(n&&(e.slotTarget='""'===n?'"default"':n,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||io(e,"slot",n,fo(e,"slot"))),"template"===e.tag){var r=ho(e,Ds);if(r){(e.slotTarget||e.slotScope)&&hs("Unexpected mixed usage of different slot syntaxes.",e),e.parent&&!ws(e.parent)&&hs("<template v-slot> can only appear at the root level inside the receiving component",e);var o=Fs(r),i=o.name,s=o.dynamic;e.slotTarget=i,e.slotTargetDynamic=s,e.slotScope=r.value||"_empty_"}}else{var a=ho(e,Ds);if(a){ws(e)||hs("v-slot can only be used on components or <template>.",a),(e.slotScope||e.slotTarget)&&hs("Unexpected mixed usage of different slot syntaxes.",e),e.scopedSlots&&hs("To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.",a);var u=e.scopedSlots||(e.scopedSlots={}),c=Fs(a),f=c.name,l=c.dynamic,p=u[f]=ks("template",[],e);p.slotTarget=f,p.slotTargetDynamic=l,p.children=e.children.filter((function(e){if(!e.slotScope)return e.parent=p,!0})),p.slotScope=a.value||"_empty_",e.children=[],e.plain=!1}}}(e),"slot"===(n=e).tag&&(n.slotName=lo(n,"name"),n.key&&hs("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.",fo(n,"key"))),function(e){var t;(t=lo(e,"is"))&&(e.component=t),null!=po(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var r=0;r<ys.length;r++)e=ys[r](e,t)||e;return function(e){var t,n,r,o,i,s,a,u,c=e.attrsList;for(t=0,n=c.length;t<n;t++)if(r=o=c[t].name,i=c[t].value,Es.test(r))if(e.hasBindings=!0,(s=qs(r.replace(Es,"")))&&(r=r.replace(Bs,"")),Rs.test(r))r=r.replace(Rs,""),i=eo(i),(u=Ts.test(r))&&(r=r.slice(1,-1)),0===i.trim().length&&hs('The value for a v-bind expression cannot be empty. Found in "v-bind:'+r+'"'),s&&(s.prop&&!u&&"innerHtml"===(r=S(r))&&(r="innerHTML"),s.camel&&!u&&(r=S(r)),s.sync&&(a=vo(i,"$event"),u?co(e,'"update:"+('+r+")",a,null,!1,hs,c[t],!0):(co(e,"update:"+S(r),a,null,!1,hs,c[t]),T(r)!==S(r)&&co(e,"update:"+T(r),a,null,!1,hs,c[t])))),s&&s.prop||!e.component&&_s(e.tag,e.attrsMap.type,r)?oo(e,r,i,c[t],u):io(e,r,i,c[t],u);else if(As.test(r))r=r.replace(As,""),(u=Ts.test(r))&&(r=r.slice(1,-1)),co(e,r,i,s,!1,hs,c[t],u);else{var f=(r=r.replace(Es,"")).match(Ns),l=f&&f[1];u=!1,l&&(r=r.slice(0,-(l.length+1)),Ts.test(l)&&(l=l.slice(1,-1),u=!0)),ao(e,r,o,i,l,u,s,c[t]),"model"===r&&Ks(e,i)}else Fi(i,ds)&&hs(r+'="'+i+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.',c[t]),io(e,r,JSON.stringify(i),c[t]),!e.component&&"muted"===r&&_s(e.tag,e.attrsMap.type,r)&&oo(e,r,"true",c[t])}(e),e}function Us(e){var t;if(t=po(e,"v-for")){var n=function(e){var t=e.match(Ss);if(t){var n={};n.for=t[2].trim();var r=t[1].trim().replace(Is,""),o=r.match(Os);return o?(n.alias=r.replace(Os,"").trim(),n.iterator1=o[1].trim(),o[2]&&(n.iterator2=o[2].trim())):n.alias=r,n}}(t);n?B(e,n):hs("Invalid v-for expression: "+t,e.rawAttrsMap["v-for"])}}function $s(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function Fs(e){var t=e.name.replace(Ds,"");return t||("#"!==e.name[0]?t="default":hs("v-slot shorthand syntax requires a slot name.",e)),Ts.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function qs(e){var t=e.match(Bs);if(t){var n={};return t.forEach((function(e){n[e.slice(1)]=!0})),n}}function Ws(e){for(var t={},n=0,r=e.length;n<r;n++)!t[e[n].name]||X||Q||hs("duplicate attribute: "+e[n].name,e[n]),t[e[n].name]=e[n].value;return t}var Ys=/^xmlns:NS\d+/,Hs=/^NS\d+:/;function Ks(e,t){for(var n=e;n;)n.for&&n.alias===t&&hs("<"+e.tag+' v-model="'+t+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.',e.rawAttrsMap["v-model"]),n=n.parent}function Gs(e){return ks(e.tag,e.attrsList.slice(),e.parent)}var Vs,Js,zs=[Wi,Yi,{preTransformNode:function(e,t){if("input"===e.tag){var n,r=e.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=lo(e,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var o=po(e,"v-if",!0),i=o?"&&("+o+")":"",s=null!=po(e,"v-else",!0),a=po(e,"v-else-if",!0),u=Gs(e);Us(u),so(u,"type","checkbox"),js(u,t),u.processed=!0,u.if="("+n+")==='checkbox'"+i,$s(u,{exp:u.if,block:u});var c=Gs(e);po(c,"v-for",!0),so(c,"type","radio"),js(c,t),$s(u,{exp:"("+n+")==='radio'"+i,block:c});var f=Gs(e);return po(f,"v-for",!0),so(f,":type",n),js(f,t),$s(u,{exp:o,block:f}),s?u.else=!0:a&&(u.elseif=a),u}}}}],Xs={expectHTML:!0,modules:zs,directives:{model:function(e,t,n){zr=n;var r=t.value,o=t.modifiers,i=e.tag,s=e.attrsMap.type;if("input"===i&&"file"===s&&zr("<"+e.tag+' v-model="'+r+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.',e.rawAttrsMap["v-model"]),e.component)return go(e,r,o),!1;if("select"===i)!function(e,t,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+vo(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),co(e,"change",r,null,!0)}(e,r,o);else if("input"===i&&"checkbox"===s)!function(e,t,n){var r=n&&n.number,o=lo(e,"value")||"null",i=lo(e,"true-value")||"true",s=lo(e,"false-value")||"false";oo(e,"checked","Array.isArray("+t+")?_i("+t+","+o+")>-1"+("true"===i?":("+t+")":":_q("+t+","+i+")")),co(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+i+"):("+s+");if(Array.isArray($$a)){var $$v="+(r?"_n("+o+")":o)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+vo(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+vo(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+vo(t,"$$c")+"}",null,!0)}(e,r,o);else if("input"===i&&"radio"===s)!function(e,t,n){var r=n&&n.number,o=lo(e,"value")||"null";oo(e,"checked","_q("+t+","+(o=r?"_n("+o+")":o)+")"),co(e,"change",vo(t,o),null,!0)}(e,r,o);else if("input"===i||"textarea"===i)!function(e,t,n){var r=e.attrsMap.type,o=e.attrsMap["v-bind:value"]||e.attrsMap[":value"],i=e.attrsMap["v-bind:type"]||e.attrsMap[":type"];if(o&&!i){var s=e.attrsMap["v-bind:value"]?"v-bind:value":":value";zr(s+'="'+o+'" conflicts with v-model on the same element because the latter already expands to a value binding internally',e.rawAttrsMap[s])}var a=n||{},u=a.lazy,c=a.number,f=a.trim,l=!u&&"range"!==r,p=u?"change":"range"===r?"__r":"input",h="$event.target.value";f&&(h="$event.target.value.trim()"),c&&(h="_n("+h+")");var d=vo(t,h);l&&(d="if($event.target.composing)return;"+d),oo(e,"value","("+t+")"),co(e,p,d,null,!0),(f||c)&&co(e,"blur","$forceUpdate()")}(e,r,o);else{if(!$.isReservedTag(i))return go(e,r,o),!1;zr("<"+e.tag+' v-model="'+r+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",e.rawAttrsMap["v-model"])}return!0},text:function(e,t){t.value&&oo(e,"textContent","_s("+t.value+")",t)},html:function(e,t){t.value&&oo(e,"innerHTML","_s("+t.value+")",t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:Ki,mustUseProp:ir,canBeLeftOpenTag:Gi,isReservedTag:br,getTagNamespace:wr,staticKeys:function(e){return e.reduce((function(e,t){return e.concat(t.staticKeys||[])}),[]).join(",")}(zs)},Zs=A((function(e){return g("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}));function Qs(e,t){e&&(Vs=Zs(t.staticKeys||""),Js=t.isReservedTag||x,function e(t){if(t.static=function(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||v(e.tag)||!Js(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(Vs))))}(t),1===t.type){if(!Js(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var n=0,r=t.children.length;n<r;n++){var o=t.children[n];e(o),o.static||(t.static=!1)}if(t.ifConditions)for(var i=1,s=t.ifConditions.length;i<s;i++){var a=t.ifConditions[i].block;e(a),a.static||(t.static=!1)}}}(e),function e(t,n){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=n),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var r=0,o=t.children.length;r<o;r++)e(t.children[r],n||!!t.for);if(t.ifConditions)for(var i=1,s=t.ifConditions.length;i<s;i++)e(t.ifConditions[i].block,n)}}(e,!1))}var ea=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/,ta=/\([^)]*?\);*$/,na=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,ra={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},oa={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},ia=function(e){return"if("+e+")return null;"},sa={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:ia("$event.target !== $event.currentTarget"),ctrl:ia("!$event.ctrlKey"),shift:ia("!$event.shiftKey"),alt:ia("!$event.altKey"),meta:ia("!$event.metaKey"),left:ia("'button' in $event && $event.button !== 0"),middle:ia("'button' in $event && $event.button !== 1"),right:ia("'button' in $event && $event.button !== 2")};function aa(e,t){var n=t?"nativeOn:":"on:",r="",o="";for(var i in e){var s=ua(e[i]);e[i]&&e[i].dynamic?o+=i+","+s+",":r+='"'+i+'":'+s+","}return r="{"+r.slice(0,-1)+"}",o?n+"_d("+r+",["+o.slice(0,-1)+"])":n+r}function ua(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map((function(e){return ua(e)})).join(",")+"]";var t=na.test(e.value),n=ea.test(e.value),r=na.test(e.value.replace(ta,""));if(e.modifiers){var o="",i="",s=[];for(var a in e.modifiers)if(sa[a])i+=sa[a],ra[a]&&s.push(a);else if("exact"===a){var u=e.modifiers;i+=ia(["ctrl","shift","alt","meta"].filter((function(e){return!u[e]})).map((function(e){return"$event."+e+"Key"})).join("||"))}else s.push(a);return s.length&&(o+=function(e){return"if(!$event.type.indexOf('key')&&"+e.map(ca).join("&&")+")return null;"}(s)),i&&(o+=i),"function($event){"+o+(t?"return "+e.value+"($event)":n?"return ("+e.value+")($event)":r?"return "+e.value:e.value)+"}"}return t||n?e.value:"function($event){"+(r?"return "+e.value:e.value)+"}"}function ca(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=ra[e],r=oa[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var fa={on:function(e,t){t.modifiers&&fe("v-on without argument does not support modifiers."),e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}},bind:function(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}},cloak:P},la=function(e){this.options=e,this.warn=e.warn||no,this.transforms=ro(e.modules,"transformCode"),this.dataGenFns=ro(e.modules,"genData"),this.directives=B(B({},fa),e.directives);var t=e.isReservedTag||x;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function pa(e,t){var n=new la(t);return{render:"with(this){return "+(e?ha(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function ha(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return da(e,t);if(e.once&&!e.onceProcessed)return ya(e,t);if(e.for&&!e.forProcessed)return va(e,t);if(e.if&&!e.ifProcessed)return ga(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',r=wa(e,t),o="_t("+n+(r?","+r:""),i=e.attrs||e.dynamicAttrs?Sa((e.attrs||[]).concat(e.dynamicAttrs||[]).map((function(e){return{name:S(e.name),value:e.value,dynamic:e.dynamic}}))):null,s=e.attrsMap["v-bind"];return!i&&!s||r||(o+=",null"),i&&(o+=","+i),s&&(o+=(i?"":",null")+","+s),o+")"}(e,t);var n;if(e.component)n=function(e,t,n){var r=t.inlineTemplate?null:wa(t,n,!0);return"_c("+e+","+ma(t,n)+(r?","+r:"")+")"}(e.component,e,t);else{var r;(!e.plain||e.pre&&t.maybeComponent(e))&&(r=ma(e,t));var o=e.inlineTemplate?null:wa(e,t,!0);n="_c('"+e.tag+"'"+(r?","+r:"")+(o?","+o:"")+")"}for(var i=0;i<t.transforms.length;i++)n=t.transforms[i](e,n);return n}return wa(e,t)||"void 0"}function da(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+ha(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function ya(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return ga(e,t);if(e.staticInFor){for(var n="",r=e.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+ha(e,t)+","+t.onceId+++","+n+")":(t.warn("v-once can only be used inside v-for that is keyed. ",e.rawAttrsMap["v-once"]),ha(e,t))}return da(e,t)}function ga(e,t,n,r){return e.ifProcessed=!0,function e(t,n,r,o){if(!t.length)return o||"_e()";var i=t.shift();return i.exp?"("+i.exp+")?"+s(i.block)+":"+e(t,n,r,o):""+s(i.block);function s(e){return r?r(e,n):e.once?ya(e,n):ha(e,n)}}(e.ifConditions.slice(),t,n,r)}function va(e,t,n,r){var o=e.for,i=e.alias,s=e.iterator1?","+e.iterator1:"",a=e.iterator2?","+e.iterator2:"";return t.maybeComponent(e)&&"slot"!==e.tag&&"template"!==e.tag&&!e.key&&t.warn("<"+e.tag+' v-for="'+i+" in "+o+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',e.rawAttrsMap["v-for"],!0),e.forProcessed=!0,(r||"_l")+"(("+o+"),function("+i+s+a+"){return "+(n||ha)(e,t)+"})"}function ma(e,t){var n="{",r=function(e,t){var n=e.directives;if(n){var r,o,i,s,a="directives:[",u=!1;for(r=0,o=n.length;r<o;r++){i=n[r],s=!0;var c=t.directives[i.name];c&&(s=!!c(e,i,t.warn)),s&&(u=!0,a+='{name:"'+i.name+'",rawName:"'+i.rawName+'"'+(i.value?",value:("+i.value+"),expression:"+JSON.stringify(i.value):"")+(i.arg?",arg:"+(i.isDynamicArg?i.arg:'"'+i.arg+'"'):"")+(i.modifiers?",modifiers:"+JSON.stringify(i.modifiers):"")+"},")}return u?a.slice(0,-1)+"]":void 0}}(e,t);r&&(n+=r+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var o=0;o<t.dataGenFns.length;o++)n+=t.dataGenFns[o](e);if(e.attrs&&(n+="attrs:"+Sa(e.attrs)+","),e.props&&(n+="domProps:"+Sa(e.props)+","),e.events&&(n+=aa(e.events,!1)+","),e.nativeEvents&&(n+=aa(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=function(e,t,n){var r=e.for||Object.keys(t).some((function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||_a(n)})),o=!!e.if;if(!r)for(var i=e.parent;i;){if(i.slotScope&&"_empty_"!==i.slotScope||i.for){r=!0;break}i.if&&(o=!0),i=i.parent}var s=Object.keys(t).map((function(e){return ba(t[e],n)})).join(",");return"scopedSlots:_u(["+s+"]"+(r?",null,true":"")+(!r&&o?",null,false,"+function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(s):"")+")"}(e,e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var i=function(e,t){var n=e.children[0];if(1===e.children.length&&1===n.type||t.warn("Inline-template components must have exactly one child element.",{start:e.start}),n&&1===n.type){var r=pa(n,t.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map((function(e){return"function(){"+e+"}"})).join(",")+"]}"}}(e,t);i&&(n+=i+",")}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b("+n+',"'+e.tag+'",'+Sa(e.dynamicAttrs)+")"),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function _a(e){return 1===e.type&&("slot"===e.tag||e.children.some(_a))}function ba(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return ga(e,t,ba,"null");if(e.for&&!e.forProcessed)return va(e,t,ba);var r="_empty_"===e.slotScope?"":String(e.slotScope),o="function("+r+"){return "+("template"===e.tag?e.if&&n?"("+e.if+")?"+(wa(e,t)||"undefined")+":undefined":wa(e,t)||"undefined":ha(e,t))+"}",i=r?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+o+i+"}"}function wa(e,t,n,r,o){var i=e.children;if(i.length){var s=i[0];if(1===i.length&&s.for&&"template"!==s.tag&&"slot"!==s.tag){var a=n?t.maybeComponent(s)?",1":",0":"";return""+(r||ha)(s,t)+a}var u=n?function(e,t){for(var n=0,r=0;r<e.length;r++){var o=e[r];if(1===o.type){if(Aa(o)||o.ifConditions&&o.ifConditions.some((function(e){return Aa(e.block)}))){n=2;break}(t(o)||o.ifConditions&&o.ifConditions.some((function(e){return t(e.block)})))&&(n=1)}}return n}(i,t.maybeComponent):0,c=o||Ea;return"["+i.map((function(e){return c(e,t)})).join(",")+"]"+(u?","+u:"")}}function Aa(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function Ea(e,t){return 1===e.type?ha(e,t):3===e.type&&e.isComment?function(e){return"_e("+JSON.stringify(e.text)+")"}(e):function(e){return"_v("+(2===e.type?e.expression:Oa(JSON.stringify(e.text)))+")"}(e)}function Sa(e){for(var t="",n="",r=0;r<e.length;r++){var o=e[r],i=Oa(o.value);o.dynamic?n+=o.name+","+i+",":t+='"'+o.name+'":'+i+","}return t="{"+t.slice(0,-1)+"}",n?"_d("+t+",["+n.slice(0,-1)+"])":t}function Oa(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}var Ia=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),Ta=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),Na=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function Ra(e,t){e&&function e(t,n){if(1===t.type){for(var r in t.attrsMap)if(Es.test(r)){var o=t.attrsMap[r];if(o){var i=t.rawAttrsMap[r];"v-for"===r?Da(t,'v-for="'+o+'"',n,i):"v-slot"===r||"#"===r[0]?Ca(o,r+'="'+o+'"',n,i):As.test(r)?Ba(o,r+'="'+o+'"',n,i):xa(o,r+'="'+o+'"',n,i)}}if(t.children)for(var s=0;s<t.children.length;s++)e(t.children[s],n)}else 2===t.type&&xa(t.expression,t.text,n,t)}(e,t)}function Ba(e,t,n,r){var o=e.replace(Na,""),i=o.match(Ta);i&&"$"!==o.charAt(i.index-1)&&n('avoid using JavaScript unary operator as property name: "'+i[0]+'" in expression '+t.trim(),r),xa(e,t,n,r)}function Da(e,t,n,r){xa(e.for||"",t,n,r),Pa(e.alias,"v-for alias",t,n,r),Pa(e.iterator1,"v-for iterator",t,n,r),Pa(e.iterator2,"v-for iterator",t,n,r)}function Pa(e,t,n,r,o){if("string"==typeof e)try{new Function("var "+e+"=_")}catch(i){r("invalid "+t+' "'+e+'" in expression: '+n.trim(),o)}}function xa(e,t,n,r){try{new Function("return "+e)}catch(i){var o=e.replace(Na,"").match(Ia);n(o?'avoid using JavaScript keyword as property name: "'+o[0]+'"\n  Raw expression: '+t.trim():"invalid expression: "+i.message+" in\n\n    "+e+"\n\n  Raw expression: "+t.trim()+"\n",r)}}function Ca(e,t,n,r){try{new Function(e,"")}catch(o){n("invalid function parameter expression: "+o.message+" in\n\n    "+e+"\n\n  Raw expression: "+t.trim()+"\n",r)}}function La(e,t){var n="";if(t>0)for(;1&t&&(n+=e),!((t>>>=1)<=0);)e+=e;return n}function ka(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),P}}function Ma(e){var t=Object.create(null);return function(n,r,o){var i=(r=B({},r)).warn||fe;delete r.warn;try{new Function("return 1")}catch(e){e.toString().match(/unsafe-eval|CSP/)&&i("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var s=r.delimiters?String(r.delimiters)+n:n;if(t[s])return t[s];var a=e(n,r);a.errors&&a.errors.length&&(r.outputSourceRange?a.errors.forEach((function(e){i("Error compiling template:\n\n"+e.msg+"\n\n"+function(e,t,n){void 0===t&&(t=0),void 0===n&&(n=e.length);for(var r=e.split(/\r?\n/),o=0,i=[],s=0;s<r.length;s++)if((o+=r[s].length+1)>=t){for(var a=s-2;a<=s+2||n>o;a++)if(!(a<0||a>=r.length)){i.push(""+(a+1)+La(" ",3-String(a+1).length)+"|  "+r[a]);var u=r[a].length;if(a===s){var c=t-(o-u)+1,f=n>o?u-c:n-t;i.push("   |  "+La(" ",c)+La("^",f))}else if(a>s){if(n>o){var l=Math.min(n-o,u);i.push("   |  "+La("^",l))}o+=u+1}}break}return i.join("\n")}(n,e.start,e.end),o)})):i("Error compiling template:\n\n"+n+"\n\n"+a.errors.map((function(e){return"- "+e})).join("\n")+"\n",o)),a.tips&&a.tips.length&&(r.outputSourceRange?a.tips.forEach((function(e){return le(e.msg,o)})):a.tips.forEach((function(e){return le(e,o)})));var u={},c=[];return u.render=ka(a.render,c),u.staticRenderFns=a.staticRenderFns.map((function(e){return ka(e,c)})),a.errors&&a.errors.length||!c.length||i("Failed to generate render function:\n\n"+c.map((function(e){var t=e.err,n=e.code;return t.toString()+" in\n\n"+n+"\n"})).join("\n"),o),t[s]=u}}var ja,Ua,$a=(ja=function(e,t){var n=Ms(e.trim(),t);!1!==t.optimize&&Qs(n,t);var r=pa(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(e){function t(t,n){var r=Object.create(e),o=[],i=[],s=function(e,t,n){(n?i:o).push(e)};if(n){if(n.outputSourceRange){var a=t.match(/^\s*/)[0].length;s=function(e,t,n){var r={msg:e};t&&(null!=t.start&&(r.start=t.start+a),null!=t.end&&(r.end=t.end+a)),(n?i:o).push(r)}}for(var u in n.modules&&(r.modules=(e.modules||[]).concat(n.modules)),n.directives&&(r.directives=B(Object.create(e.directives||null),n.directives)),n)"modules"!==u&&"directives"!==u&&(r[u]=n[u])}r.warn=s;var c=ja(t.trim(),r);return Ra(c.ast,s),c.errors=o,c.tips=i,c}return{compile:t,compileToFunctions:Ma(t)}})(Xs),Fa=($a.compile,$a.compileToFunctions);function qa(e){return(Ua=Ua||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',Ua.innerHTML.indexOf("&#10;")>0}var Wa=!!G&&qa(!1),Ya=!!G&&qa(!0),Ha=A((function(e){var t=Sr(e);return t&&t.innerHTML})),Ka=Jn.prototype.$mount;return Jn.prototype.$mount=function(e,t){if((e=e&&Sr(e))===document.body||e===document.documentElement)return fe("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&((r=Ha(r))||fe("Template element not found or is empty: "+n.template,this));else{if(!r.nodeType)return fe("invalid template option:"+r,this),this;r=r.innerHTML}else e&&(r=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(r){$.performance&&st&&st("compile");var o=Fa(r,{outputSourceRange:!0,shouldDecodeNewlines:Wa,shouldDecodeNewlinesForHref:Ya,delimiters:n.delimiters,comments:n.comments},this),i=o.render,s=o.staticRenderFns;n.render=i,n.staticRenderFns=s,$.performance&&st&&(st("compile end"),at("vue "+this._name+" compile","compile","compile end"))}}return Ka.call(this,e,t)},Jn.compile=Fa,Jn},e.exports=r()}).call(this,n(3),n(32).setImmediate)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ERRORS=void 0,t.ERRORS={INVALID_PARAMS:"INVALID_PARAMS",INVALID_SYNTAX:"INVALID_SYNTAX",INVALID_OPERATION:"INVALID_OPERATION",OPERATION_FAIL:"OPERATION_FAIL",NETWORK_ERROR:"NETWORK_ERROR",UNKOWN_ERROR:"UNKOWN_ERROR"}},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.useDefaultAdapter=t.useAdapters=t.RUNTIME=void 0;var s,a=i(n(17)),u=n(5);!function(e){e.WEB="web",e.WX_MP="wx_mp"}(s=t.RUNTIME||(t.RUNTIME={})),t.useAdapters=function(e){for(var t=0,n=u.isArray(e)?e:[e];t<n.length;t++){var r=n[t],o=r.isMatch,i=r.genAdapter,s=r.runtime;if(o())return{adapter:i(),runtime:s}}},t.useDefaultAdapter=function(){return{adapter:a.genAdapter(),runtime:s.WEB}}},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},s=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},a=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.WebRequest=t.genAdapter=void 0;var u=n(4),c=n(5),f=n(9),l=function(e){function t(t){var n=e.call(this)||this,r=t.timeout,o=t.timeoutMsg,i=t.restrictedMethods;return n._timeout=r||0,n._timeoutMsg=o||"请求超时",n._restrictedMethods=i||["get","post","upload","download"],n}return o(t,e),t.prototype.get=function(e){return this._request(i(i({},e),{method:"get"}),this._restrictedMethods.includes("get"))},t.prototype.post=function(e){return this._request(i(i({},e),{method:"post"}),this._restrictedMethods.includes("post"))},t.prototype.put=function(e){return this._request(i(i({},e),{method:"put"}))},t.prototype.upload=function(e){var t=e.data,n=e.file,r=e.name,o=new FormData;for(var s in t)o.append(s,t[s]);return o.append("key",r),o.append("file",n),this._request(i(i({},e),{data:o,method:"post"}),this._restrictedMethods.includes("upload"))},t.prototype.download=function(e){return s(this,void 0,void 0,(function(){var t,n,r,o;return a(this,(function(s){switch(s.label){case 0:return s.trys.push([0,2,,3]),[4,this.get(i(i({},e),{headers:{},responseType:"blob"}))];case 1:return t=s.sent().data,n=window.URL.createObjectURL(new Blob([t])),r=decodeURIComponent(new URL(e.url).pathname.split("/").pop()||""),(o=document.createElement("a")).href=n,o.setAttribute("download",r),o.style.display="none",document.body.appendChild(o),o.click(),window.URL.revokeObjectURL(n),document.body.removeChild(o),[3,3];case 2:return s.sent(),[3,3];case 3:return[2,new Promise((function(t){t({statusCode:200,tempFilePath:e.url})}))]}}))}))},t.prototype._request=function(e,t){var n=this;void 0===t&&(t=!1);var r=String(e.method).toLowerCase()||"get";return new Promise((function(o){var i,s,a=e.url,u=e.headers,l=void 0===u?{}:u,p=e.data,h=e.responseType,d=e.withCredentials,y=e.body,g=e.onUploadProgress,v=c.formatUrl(f.getProtocol(),a,"get"===r?p:{}),m=new XMLHttpRequest;for(var _ in m.open(r,v),h&&(m.responseType=h),l)m.setRequestHeader(_,l[_]);g&&m.addEventListener("progress",g),m.onreadystatechange=function(){var e={};if(4===m.readyState){var t=m.getAllResponseHeaders().trim().split(/[\r\n]+/),n={};t.forEach((function(e){var t=e.split(": "),r=t.shift().toLowerCase(),o=t.join(": ");n[r]=o})),e.header=n,e.statusCode=m.status;try{e.data="blob"===h?m.response:JSON.parse(m.responseText)}catch(t){e.data="blob"===h?m.response:m.responseText}clearTimeout(i),o(e)}},t&&n._timeout&&(i=setTimeout((function(){console.warn(n._timeoutMsg),m.abort()}),n._timeout)),s=c.isFormData(p)?p:"application/x-www-form-urlencoded"===l["content-type"]?c.toQueryString(p):y||(p?JSON.stringify(p):void 0),d&&(m.withCredentials=!0),m.send(s)}))},t}(u.AbstractSDKRequest);t.WebRequest=l,t.genAdapter=function(){return{root:window,reqClass:l,wsClass:WebSocket,localStorage:localStorage,sessionStorage:sessionStorage}}},function(e,t,n){var r;e.exports=(r=n(6),n(19),n(20),r.HmacSHA256)},function(e,t,n){var r;e.exports=(r=n(6),function(e){var t=r,n=t.lib,o=n.WordArray,i=n.Hasher,s=t.algo,a=[],u=[];!function(){function t(t){for(var n=e.sqrt(t),r=2;r<=n;r++)if(!(t%r))return!1;return!0}function n(e){return 4294967296*(e-(0|e))|0}for(var r=2,o=0;o<64;)t(r)&&(o<8&&(a[o]=n(e.pow(r,.5))),u[o]=n(e.pow(r,1/3)),o++),r++}();var c=[],f=s.SHA256=i.extend({_doReset:function(){this._hash=new o.init(a.slice(0))},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],s=n[3],a=n[4],f=n[5],l=n[6],p=n[7],h=0;h<64;h++){if(h<16)c[h]=0|e[t+h];else{var d=c[h-15],y=(d<<25|d>>>7)^(d<<14|d>>>18)^d>>>3,g=c[h-2],v=(g<<15|g>>>17)^(g<<13|g>>>19)^g>>>10;c[h]=y+c[h-7]+v+c[h-16]}var m=r&o^r&i^o&i,_=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),b=p+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&f^~a&l)+u[h]+c[h];p=l,l=f,f=a,a=s+b|0,s=i,i=o,o=r,r=b+(_+m)|0}n[0]=n[0]+r|0,n[1]=n[1]+o|0,n[2]=n[2]+i|0,n[3]=n[3]+s|0,n[4]=n[4]+a|0,n[5]=n[5]+f|0,n[6]=n[6]+l|0,n[7]=n[7]+p|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,o=8*t.sigBytes;return n[o>>>5]|=128<<24-o%32,n[14+(o+64>>>9<<4)]=e.floor(r/4294967296),n[15+(o+64>>>9<<4)]=r,t.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});t.SHA256=i._createHelper(f),t.HmacSHA256=i._createHmacHelper(f)}(Math),r.SHA256)},function(e,t,n){var r,o,i,s;e.exports=(r=n(6),i=(o=r).lib.Base,s=o.enc.Utf8,void(o.algo.HMAC=i.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=s.parse(t));var n=e.blockSize,r=4*n;t.sigBytes>r&&(t=e.finalize(t)),t.clamp();for(var o=this._oKey=t.clone(),i=this._iKey=t.clone(),a=o.words,u=i.words,c=0;c<n;c++)a[c]^=1549556828,u[c]^=909522486;o.sigBytes=i.sigBytes=r,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})))},function(e,t,n){var r,o,i;e.exports=(i=n(6),o=(r=i).lib.WordArray,r.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,r=this._map;e.clamp();for(var o=[],i=0;i<n;i+=3)for(var s=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,a=0;a<4&&i+.75*a<n;a++)o.push(r.charAt(s>>>6*(3-a)&63));var u=r.charAt(64);if(u)for(;o.length%4;)o.push(u);return o.join("")},parse:function(e){var t=e.length,n=this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var i=0;i<n.length;i++)r[n.charCodeAt(i)]=i}var s=n.charAt(64);if(s){var a=e.indexOf(s);-1!==a&&(t=a)}return function(e,t,n){for(var r=[],i=0,s=0;s<t;s++)if(s%4){var a=n[e.charCodeAt(s-1)]<<s%4*2,u=n[e.charCodeAt(s)]>>>6-s%4*2;r[i>>>2]|=(a|u)<<24-i%4*8,i++}return o.create(r,i)}(e,t,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},i.enc.Base64)},function(e,t,n){var r;e.exports=(r=n(6),r.enc.Utf8)},function(e,t,n){"use strict";(function(e){var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.CloudbaseCache=void 0;var a=n(4),u=n(5),c=n(7),f=function(e){function t(t){var n=e.call(this)||this;return n._root=t,t.tcbCacheObject||(t.tcbCacheObject={}),n}return o(t,e),t.prototype.setItem=function(e,t){this._root.tcbCacheObject[e]=t},t.prototype.getItem=function(e){return this._root.tcbCacheObject[e]},t.prototype.removeItem=function(e){delete this._root.tcbCacheObject[e]},t.prototype.clear=function(){delete this._root.tcbCacheObject},t}(a.AbstractStorage);function l(e,t){switch(e){case"local":return t.localStorage?t.localStorage:(u.printWarn(c.ERRORS.INVALID_PARAMS,"localStorage is not supported on current platform"),new f(t.root));case"none":return new f(t.root);default:return t.sessionStorage?t.sessionStorage:(u.printWarn(c.ERRORS.INVALID_PARAMS,"sessionStorage is not supported on current platform"),new f(t.root))}}var p=function(){function t(e){this.keys={};var t=e.persistence,n=e.platformInfo,r=void 0===n?{}:n,o=e.keys,i=void 0===o?{}:o,s=e.alwaysLocalKeys,a=void 0===s?[]:s;this._platformInfo=r,this._alwaysLocalKeys=a,this._storage||(this._persistence=r.adapter.primaryStorage||t,this._storage=l(this._persistence,r.adapter),this.keys=i)}return Object.defineProperty(t.prototype,"mode",{get:function(){return this._storage.mode||"sync"},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"persistence",{get:function(){return this._persistence},enumerable:!1,configurable:!0}),t.prototype.updatePersistence=function(e){if("async"!==this.mode){if(e!==this._persistence){var t="local"===this._persistence;this._persistence=e;var n=l(e,this._platformInfo.adapter);for(var r in this.keys){var o=this.keys[r];if(!t||!this._alwaysLocalKeys.includes(r)){var i=this._storage.getItem(o);u.isUndefined(i)||u.isNull(i)||(n.setItem(o,i),this._storage.removeItem(o))}}this._storage=n}}else u.printWarn(c.ERRORS.INVALID_OPERATION,"current platform's storage is asynchronous, please use updatePersistenceAsync insteed")},t.prototype.updatePersistenceAsync=function(e){return i(this,void 0,void 0,(function(){var t,n,r,o,i,a,c,f;return s(this,(function(s){switch(s.label){case 0:if(e===this._persistence)return[2];for(o in t="local"===this._persistence,this._persistence=e,n=l(e,this._platformInfo.adapter),r=[],this.keys)r.push(o);i=0,s.label=1;case 1:return i<r.length?(a=r[i],c=this.keys[a],t&&this._alwaysLocalKeys.includes(a)?[3,4]:[4,this._storage.getItem(c)]):[3,5];case 2:return f=s.sent(),u.isUndefined(f)||u.isNull(f)?[3,4]:(n.setItem(c,f),[4,this._storage.removeItem(c)]);case 3:s.sent(),s.label=4;case 4:return i++,[3,1];case 5:return this._storage=n,[2]}}))}))},t.prototype.setStore=function(e,t,n){if("async"!==this.mode){if(this._storage)try{var r={version:n||"localCachev1",content:t};this._storage.setItem(e,JSON.stringify(r))}catch(e){throw new Error(JSON.stringify({code:c.ERRORS.OPERATION_FAIL,msg:"["+c.getSdkName()+"]["+c.ERRORS.OPERATION_FAIL+"]setStore failed",info:e}))}}else u.printWarn(c.ERRORS.INVALID_OPERATION,"current platform's storage is asynchronous, please use setStoreAsync insteed")},t.prototype.setStoreAsync=function(e,t,n){return i(this,void 0,void 0,(function(){var r;return s(this,(function(o){switch(o.label){case 0:if(!this._storage)return[2];o.label=1;case 1:return o.trys.push([1,3,,4]),r={version:n||"localCachev1",content:t},[4,this._storage.setItem(e,JSON.stringify(r))];case 2:return o.sent(),[3,4];case 3:return o.sent(),[2];case 4:return[2]}}))}))},t.prototype.getStore=function(t,n){var r;if("async"!==this.mode){try{if(void 0!==e&&(null===(r=e.env)||void 0===r?void 0:r.tcb_token))return e.env.tcb_token;if(!this._storage)return""}catch(e){return""}n=n||"localCachev1";var o=this._storage.getItem(t);return o&&o.indexOf(n)>=0?JSON.parse(o).content:""}u.printWarn(c.ERRORS.INVALID_OPERATION,"current platform's storage is asynchronous, please use getStoreAsync insteed")},t.prototype.getStoreAsync=function(t,n){var r;return i(this,void 0,void 0,(function(){var o;return s(this,(function(i){switch(i.label){case 0:try{if(void 0!==e&&(null===(r=e.env)||void 0===r?void 0:r.tcb_token))return[2,e.env.tcb_token];if(!this._storage)return[2,""]}catch(e){return[2,""]}return n=n||"localCachev1",[4,this._storage.getItem(t)];case 1:return(o=i.sent())&&o.indexOf(n)>=0?[2,JSON.parse(o).content]:[2,""]}}))}))},t.prototype.removeStore=function(e){"async"!==this.mode?this._storage.removeItem(e):u.printWarn(c.ERRORS.INVALID_OPERATION,"current platform's storage is asynchronous, please use removeStoreAsync insteed")},t.prototype.removeStoreAsync=function(e){return i(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,this._storage.removeItem(e)];case 1:return t.sent(),[2]}}))}))},t}();t.CloudbaseCache=p}).call(this,n(8))},function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__spreadArrays||function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r};Object.defineProperty(t,"__esModule",{value:!0}),t.removeEventListener=t.activateEvent=t.addEventListener=t.CloudbaseEventEmitter=t.IErrorEvent=t.CloudbaseEvent=void 0;var s=n(5);var a=function(e,t){this.data=t||null,this.name=e};t.CloudbaseEvent=a;var u=function(e){function t(t,n){var r=e.call(this,"error",{error:t,data:n})||this;return r.error=t,r}return o(t,e),t}(a);t.IErrorEvent=u;var c=function(){function e(){this._listeners={}}return e.prototype.on=function(e,t){return function(e,t,n){n[e]=n[e]||[],n[e].push(t)}(e,t,this._listeners),this},e.prototype.off=function(e,t){return function(e,t,n){if(null==n?void 0:n[e]){var r=n[e].indexOf(t);-1!==r&&n[e].splice(r,1)}}(e,t,this._listeners),this},e.prototype.fire=function(e,t){if(s.isInstanceOf(e,u))return console.error(e.error),this;var n=s.isString(e)?new a(e,t||{}):e,r=n.name;if(this._listens(r)){n.target=this;for(var o=0,c=this._listeners[r]?i(this._listeners[r]):[];o<c.length;o++){c[o].call(this,n)}}return this},e.prototype._listens=function(e){return this._listeners[e]&&this._listeners[e].length>0},e}();t.CloudbaseEventEmitter=c;var f=new c;t.addEventListener=function(e,t){f.on(e,t)},t.activateEvent=function(e,t){void 0===t&&(t={}),f.fire(e,t)},t.removeEventListener=function(e,t){f.off(e,t)}},function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__exportStar||function(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||r(t,e,n)};Object.defineProperty(t,"__esModule",{value:!0}),o(n(26),t)},function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.catchErrorsDecorator=void 0;var i=n(5),s=n(7),a=!1;"undefined"!=typeof navigator&&navigator.userAgent&&(a=-1!==navigator.userAgent.indexOf("Firefox"));var u=a?/(\.js\/)?__decorate(\$\d+)?<@.*\d$/:/(\/\w+\.js\.)?__decorate(\$\d+)?\s*\(.*\)$/,c=/https?\:\/\/.+\:\d*\/.*\.js\:\d+\:\d+/;function f(e){var t=e.err,n=e.className,r=e.methodName,o=e.sourceLink;if(!o)return null;var i,s=t.stack.split("\n"),u=a?/^catchErrorsDecorator\/<\/descriptor.value@.*\d$/:new RegExp(n+"\\.descriptor.value\\s*\\[as\\s"+r+"\\]\\s*\\(.*\\)$"),f=a?/^catchErrorsDecorator\/<\/descriptor.value/:new RegExp(n+"\\.descriptor.value\\s*\\[as\\s"+r+"\\]"),l=s.findIndex((function(e){return u.test(e)}));if(-1!==l){var p=s.filter((function(e,t){return t>l}));p.unshift(s[l].replace(f,n+"."+r).replace(c,o)),(i=new Error).stack=(a?"@debugger":"Error")+"\n"+p.join("\n")}return i}t.catchErrorsDecorator=function(e){var t=e.mode,n=void 0===t?"async":t,a=e.customInfo,l=void 0===a?{}:a,p=e.title,h=e.messages,d=void 0===h?[]:h;return function(e,t,a){if(s.IS_DEBUG_MODE){var h=l.className||e.constructor.name,y=l.methodName||t,g=a.value,v=function(e){var t="",n=e.stack.split("\n"),r=n.findIndex((function(e){return u.test(e)}));if(-1!==r){var o=c.exec(n[r+1]||"");t=o?o[0]:""}return t}(new Error);a.value="sync"===n?function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=f({err:new Error,className:h,methodName:y,sourceLink:v});try{return g.apply(this,e)}catch(e){var r=e,o=e.message,s={title:p||h+"."+y+" failed",content:[{type:"error",body:e}]};if(o&&/^\{.*\}$/.test(o)){var a=JSON.parse(o);s.subtitle=o,a.code&&(r=n||e,s.content=d.map((function(e){return{type:"info",body:e}})))}throw i.printGroupLog(s),r}}:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return r(this,void 0,void 0,(function(){var t,n,r,s,a,u;return o(this,(function(o){switch(o.label){case 0:t=f({err:new Error,className:h,methodName:y,sourceLink:v}),o.label=1;case 1:return o.trys.push([1,3,,4]),[4,g.apply(this,e)];case 2:return[2,o.sent()];case 3:throw n=o.sent(),r=n,s=n.message,a={title:p||h+"."+y+" failed",content:[{type:"error",body:n}]},s&&/^\{.*\}$/.test(s)&&(u=JSON.parse(s),a.subtitle=u,u.code&&(r=t||n,a.content=d.map((function(e){return{type:"info",body:e}})))),i.printGroupLog(a),r;case 4:return[2]}}))}))}}}}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(29),o=n(30),i=n(31);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return l(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(t,n),o=(e=a(e,r)).write(t,n);o!==r&&(e=e.slice(0,o));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|h(t.length);return 0===(e=a(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?a(e,0):p(e,t);if("Buffer"===t.type&&i(t.data))return p(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function f(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function l(e,t){if(f(t),e=a(e,t<0?0:0|h(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|h(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function h(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function d(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return $(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return F(e).length;default:if(r)return $(e).length;t=(""+t).toLowerCase(),r=!0}}function y(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return R(this,t,n);case"utf8":case"utf-8":return I(this,t,n);case"ascii":return T(this,t,n);case"latin1":case"binary":return N(this,t,n);case"base64":return O(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return B(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function g(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:m(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):m(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function m(e,t,n,r,o){var i,s=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var f=-1;for(i=n;i<a;i++)if(c(e,i)===c(t,-1===f?0:i-f)){if(-1===f&&(f=i),i-f+1===u)return f*s}else-1!==f&&(i-=i-f),f=-1}else for(n+u>a&&(n=a-u),i=n;i>=0;i--){for(var l=!0,p=0;p<u;p++)if(c(e,i+p)!==c(t,p)){l=!1;break}if(l)return i}return-1}function _(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function b(e,t,n,r){return q($(t,e.length-n),e,n,r)}function w(e,t,n,r){return q(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function A(e,t,n,r){return w(e,t,n,r)}function E(e,t,n,r){return q(F(t),e,n,r)}function S(e,t,n,r){return q(function(e,t){for(var n,r,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function O(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function I(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,s,a,u,c=e[o],f=null,l=c>239?4:c>223?3:c>191?2:1;if(o+l<=n)switch(l){case 1:c<128&&(f=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(f=u);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(f=u);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(f=u)}null===f?(f=65533,l=1):f>65535&&(f-=65536,r.push(f>>>10&1023|55296),f=56320|1023&f),r.push(f),o+=l}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=4096));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return c(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return f(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return l(null,e)},u.allocUnsafeSlow=function(e){return l(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var s=e[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,o),o+=s.length}return r},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)g(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)g(this,t,t+3),g(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)g(this,t,t+7),g(this,t+1,t+6),g(this,t+2,t+5),g(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?I(this,0,e):y.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(i,s),c=this.slice(r,o),f=e.slice(t,n),l=0;l<a;++l)if(c[l]!==f[l]){i=c[l],s=f[l];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return _(this,e,t,n);case"utf8":case"utf-8":return b(this,e,t,n);case"ascii":return w(this,e,t,n);case"latin1":case"binary":return A(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function T(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function N(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function R(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=t;i<n;++i)o+=U(e[i]);return o}function B(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function D(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function P(e,t,n,r,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function x(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function C(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function L(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function k(e,t,n,r,i){return i||L(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function M(e,t,n,r,i){return i||L(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||D(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||D(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||D(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||D(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||D(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||D(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||D(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||D(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||D(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||D(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||D(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||D(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||D(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||D(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||D(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||P(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):x(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):x(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):C(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);P(this,e,t,n,o-1,-o)}var i=0,s=1,a=0;for(this[t]=255&e;++i<n&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);P(this,e,t,n,o-1,-o)}var i=n-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):x(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):x(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):C(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||P(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):C(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return k(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return k(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return M(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return M(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var s=u.isBuffer(e)?e:$(new u(e,r).toString()),a=s.length;for(i=0;i<n-t;++i)this[i+t]=s[i%a]}return this};var j=/[^+\/0-9A-Za-z-_]/g;function U(e){return e<16?"0"+e.toString(16):e.toString(16)}function $(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function F(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(j,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}}).call(this,n(3))},function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,r=c(e),s=r[0],a=r[1],u=new i(function(e,t,n){return 3*(t+n)/4-n}(0,s,a)),f=0,l=a>0?s-4:s;for(n=0;n<l;n+=4)t=o[e.charCodeAt(n)]<<18|o[e.charCodeAt(n+1)]<<12|o[e.charCodeAt(n+2)]<<6|o[e.charCodeAt(n+3)],u[f++]=t>>16&255,u[f++]=t>>8&255,u[f++]=255&t;2===a&&(t=o[e.charCodeAt(n)]<<2|o[e.charCodeAt(n+1)]>>4,u[f++]=255&t);1===a&&(t=o[e.charCodeAt(n)]<<10|o[e.charCodeAt(n+1)]<<4|o[e.charCodeAt(n+2)]>>2,u[f++]=t>>8&255,u[f++]=255&t);return u},t.fromByteArray=function(e){for(var t,n=e.length,o=n%3,i=[],s=0,a=n-o;s<a;s+=16383)i.push(f(e,s,s+16383>a?a:s+16383));1===o?(t=e[n-1],i.push(r[t>>2]+r[t<<4&63]+"==")):2===o&&(t=(e[n-2]<<8)+e[n-1],i.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=s.length;a<u;++a)r[a]=s[a],o[s.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function f(e,t,n){for(var o,i,s=[],a=t;a<n;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return s.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,o){var i,s,a=8*o-r-1,u=(1<<a)-1,c=u>>1,f=-7,l=n?o-1:0,p=n?-1:1,h=e[t+l];for(l+=p,i=h&(1<<-f)-1,h>>=-f,f+=a;f>0;i=256*i+e[t+l],l+=p,f-=8);for(s=i&(1<<-f)-1,i>>=-f,f+=r;f>0;s=256*s+e[t+l],l+=p,f-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,r),i-=c}return(h?-1:1)*s*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var s,a,u,c=8*i-o-1,f=(1<<c)-1,l=f>>1,p=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:i-1,d=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=f):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+l>=1?p/u:p*Math.pow(2,1-l))*u>=2&&(s++,u/=2),s+l>=f?(a=0,s=f):s+l>=1?(a=(t*u-1)*Math.pow(2,o),s+=l):(a=t*Math.pow(2,l-1)*Math.pow(2,o),s=0));o>=8;e[n+h]=255&a,h+=d,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[n+h]=255&s,h+=d,s/=256,c-=8);e[n+h-d]|=128*y}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){(function(e){var r=void 0!==e&&e||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},t.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout((function(){e._onTimeout&&e._onTimeout()}),t))},n(33),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(3))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var r,o,i,s,a,u=1,c={},f=!1,l=e.document,p=Object.getPrototypeOf&&Object.getPrototypeOf(e);p=p&&p.setTimeout?p:e,"[object process]"==={}.toString.call(e.process)?r=function(e){t.nextTick((function(){d(e)}))}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){d(e.data)},r=function(e){i.port2.postMessage(e)}):l&&"onreadystatechange"in l.createElement("script")?(o=l.documentElement,r=function(e){var t=l.createElement("script");t.onreadystatechange=function(){d(e),t.onreadystatechange=null,o.removeChild(t),t=null},o.appendChild(t)}):r=function(e){setTimeout(d,0,e)}:(s="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&d(+t.data.slice(s.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),r=function(t){e.postMessage(s+t,"*")}),p.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return c[u]=o,r(u),u++},p.clearImmediate=h}function h(e){delete c[e]}function d(e){if(f)setTimeout(d,0,e);else{var t=c[e];if(t){f=!0;try{!function(e){var t=e.callback,n=e.args;switch(n.length){case 0:t();break;case 1:t(n[0]);break;case 2:t(n[0],n[1]);break;case 3:t(n[0],n[1],n[2]);break;default:t.apply(void 0,n)}}(t)}finally{h(e),f=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(3),n(8))},function(e,t,n){"use strict";n.r(t);var r={};n.r(r),n.d(r,"Point",(function(){return Kr})),n.d(r,"LineString",(function(){return Dr})),n.d(r,"Polygon",(function(){return xr})),n.d(r,"MultiPoint",(function(){return Lr})),n.d(r,"MultiLineString",(function(){return Mr})),n.d(r,"MultiPolygon",(function(){return Ur}));var o,i=n(14),s=n.n(i),a=n(0),u=n(4),c=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),f=function(){return(f=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},l=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},p=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};var h=function(e){function t(t){void 0===t&&(t={});var n=e.call(this)||this,r=t.timeout,o=t.timeoutMsg,i=t.restrictedMethods;return n._timeout=r||0,n._timeoutMsg=o||"请求超时",n._restrictedMethods=i||["get","post","upload","download"],n}return c(t,e),t.prototype.post=function(e){var t=this;return new Promise((function(n,r){var o=e.url,i=e.data,s=e.headers,a=wx.request({url:Object(u.formatUrl)("https:",o),data:i,timeout:t._timeout,method:"POST",header:s,success:function(e){n(e)},fail:function(e){r(e)},complete:function(e){if(e&&e.errMsg&&(t._timeout&&-1!==t._restrictedMethods.indexOf("post")&&"request:fail timeout"===e.errMsg)){console.warn(t._timeoutMsg);try{a.abort()}catch(e){}}}})}))},t.prototype.upload=function(e){var t=this,n=this;return new Promise((function(r){return l(t,void 0,void 0,(function(){var t,o,i,s,a,u;return p(this,(function(c){return t=e.url,o=e.file,i=e.data,s=e.headers,a=e.onUploadProgress,u=wx.uploadFile({url:t,filePath:o,name:"file",formData:f({},i),header:s,timeout:this._timeout,success:function(e){var t={statusCode:e.statusCode,data:e.data||{}};200===e.statusCode&&i.success_action_status&&(t.statusCode=parseInt(i.success_action_status,10)),r(t)},fail:function(e){r(e)},complete:function(e){if(e&&e.errMsg&&(n._timeout&&-1!==n._restrictedMethods.indexOf("upload")&&"request:fail timeout"===e.errMsg)){console.warn(n._timeoutMsg);try{u.abort()}catch(e){}}}}),a&&u.onProgressUpdate((function(e){a(e)})),[2]}))}))}))},t.prototype.download=function(e){var t=this,n=this;return new Promise((function(r,o){var i=e.url,s=e.headers,a=wx.downloadFile({url:Object(u.formatUrl)("https:",i),header:s,timeout:t._timeout,success:function(e){200===e.statusCode&&e.tempFilePath?r({statusCode:200,tempFilePath:e.tempFilePath}):r(e)},fail:function(e){o(e)},complete:function(e){if(e&&e.errMsg&&(n._timeout&&-1!==n._restrictedMethods.indexOf("download")&&"request:fail timeout"===e.errMsg)){console.warn(n._timeoutMsg);try{a.abort()}catch(e){}}}})}))},t}(u.AbstractSDKRequest),d={setItem:function(e,t){wx.setStorageSync(e,t)},getItem:function(e){return wx.getStorageSync(e)},removeItem:function(e){wx.removeStorageSync(e)},clear:function(){wx.clearStorageSync()}},y=function(e,t){void 0===t&&(t={});var n=wx.connectSocket(f({url:e},t));return{set onopen(e){n.onOpen(e)},set onmessage(e){n.onMessage(e)},set onclose(e){n.onClose(e)},set onerror(e){n.onError(e)},send:function(e){return n.send({data:e})},close:function(e,t){return n.close({code:e,reason:t})},get readyState(){return n.readyState},CONNECTING:0,OPEN:1,CLOSING:2,CLOSED:3}};var g={genAdapter:function(){return{root:{},reqClass:h,wsClass:y,localStorage:d,primaryStorage:u.StorageType.local,getAppSign:function(){var e=wx.getAccountInfoSync();return"undefined"!=typeof App||"undefined"!=typeof getApp||wx.onAppHide||wx.offAppHide||wx.onAppShow||wx.offAppShow?e&&e.miniProgram?e.miniProgram.appId:"":e&&e.plugin?e.plugin.appId:""}}},isMatch:function(){if("undefined"==typeof wx)return!1;if("undefined"==typeof Page)return!1;if(!wx.getSystemInfoSync)return!1;if(!wx.getStorageSync)return!1;if(!wx.setStorageSync)return!1;if(!wx.connectSocket)return!1;if(!wx.request)return!1;try{if(!wx.getSystemInfoSync())return!1;if("qq"===wx.getSystemInfoSync().AppPlatform)return!1}catch(e){return!1}return!0},runtime:"wx_mp"},v=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r},m=a.constants.ERRORS,_={};function b(e,t){var n=t.name,r=t.namespace,o=t.entity,i=t.injectEvents,s=t.IIFE,a=void 0!==s&&s;if(_[n]||r&&e[r])throw new Error(JSON.stringify({code:m.INVALID_OPERATION,msg:"Duplicate component "+n}));if(a){if(!o||"function"!=typeof o)throw new Error(JSON.stringify({code:m.INVALID_PARAMS,msg:"IIFE component's entity must be a function"}));o.call(e)}if(_[n]=t,r?e.prototype[r]=o:function e(t,n){if(!(n instanceof Object))return n;switch(n.constructor){case Date:return new Date(n.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return n}for(var r in n)n.hasOwnProperty(r)&&(t[r]=e(t[r],n[r]));return t}(e.prototype,o),i){var u=i.bus,c=i.events;if(!u||!c||0===c.length)return;var f=e.prototype.fire||function(){};e.prototype.events||(e.prototype.events={}),(e.prototype.events||{})[n]?e.prototype.events[n].events=v(e.prototype.events[n].events,c):e.prototype.events[n]={bus:u,events:c},e.prototype.fire=function(e,t){for(var n in f(e,t),this.events){var r=this.events[n],o=r.bus;if(r.events.includes(e)){o.fire(e,t);break}}}}}var w={},A=function(){return(A=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},E=a.cache.CloudbaseCache,S={},O={};function I(e){var t=e.env,n=e.persistence,r=e.platformInfo,o={accessTokenKey:"access_token_"+t,accessTokenExpireKey:"access_token_expire_"+t,refreshTokenKey:"refresh_token_"+t,anonymousUuidKey:"anonymous_uuid_"+t,loginTypeKey:"login_type_"+t,userInfoKey:"user_info_"+t};S[t]?S[t].updatePersistence(n):S[t]=new E(A(A({},e),{keys:o,platformInfo:r,alwaysLocalKeys:["anonymousUuidKey"]})),O[t]=O[t]||new E(A(A({},e),{keys:o,platformInfo:r,persistence:"local"}))}function T(e){return S[e]}function N(e){return O[e]}var R=n(2),B="loginStateExpire",D="refreshAccessToken",P=function(){return(P=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},x=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},C=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},L=a.constants.ERRORS,k=a.utils.genSeqId,M=a.utils.isFormData,j=a.utils.formatUrl,U=a.utils.createSign,$=a.adapters.RUNTIME,F=["auth.getJwt","auth.logout","auth.signInWithTicket","auth.signInAnonymously","auth.signIn","auth.fetchAccessTokenWithRefreshToken","auth.signUpWithEmailAndPassword","auth.activateEndUserMail","auth.sendPasswordResetEmail","auth.resetPasswordWithToken","auth.isUsernameRegistered"];function q(e,t,n){var r=e[t];e[t]=function(t){var o={},i={};n.forEach((function(n){var r=n.call(e,t),s=r.data,a=r.headers;Object.assign(o,s),Object.assign(i,a)}));var s=t.data;return s&&function(){if(M(s))for(var e in o)s.append(e,o[e]);else t.data=P(P({},s),o)}(),t.headers=P(P({},t.headers||{}),i),r.call(e,t)}}function W(){var e=k();return{data:{seqId:e},headers:{"X-SDK-Version":"@cloudbase/js-sdk/"+Object(R.e)(),"x-seqid":e}}}var Y=function(){function e(e){this._throwWhenRequestFail=!1,this.config=e,this._reqClass=new w.adapter.reqClass({timeout:this.config.timeout,timeoutMsg:"[@cloudbase/js-sdk] 请求在"+this.config.timeout/1e3+"s内未完成，已中断",restrictedMethods:["post"]}),this._throwWhenRequestFail=e.throw||!1,this._cache=T(this.config.env),this._localCache=N(this.config.env),q(this._reqClass,"post",[W]),q(this._reqClass,"upload",[W]),q(this._reqClass,"download",[W])}return e.prototype.post=function(e){return x(this,void 0,void 0,(function(){return C(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.post(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.upload=function(e){return x(this,void 0,void 0,(function(){return C(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.upload(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.download=function(e){return x(this,void 0,void 0,(function(){return C(this,(function(t){switch(t.label){case 0:return[4,this._reqClass.download(e)];case 1:return[2,t.sent()]}}))}))},e.prototype.refreshAccessToken=function(){return x(this,void 0,void 0,(function(){var e,t,n;return C(this,(function(r){switch(r.label){case 0:this._refreshAccessTokenPromise||(this._refreshAccessTokenPromise=this._refreshAccessToken()),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this._refreshAccessTokenPromise];case 2:return e=r.sent(),[3,4];case 3:return n=r.sent(),t=n,[3,4];case 4:if(this._refreshAccessTokenPromise=null,this._shouldRefreshAccessTokenHook=null,t)throw t;return[2,e]}}))}))},e.prototype.getAccessToken=function(){return x(this,void 0,void 0,(function(){var e,t,n,r,o,i,s,a,u;return C(this,(function(c){switch(c.label){case 0:return e=this._cache.keys,t=e.accessTokenKey,n=e.accessTokenExpireKey,r=e.refreshTokenKey,[4,this._cache.getStoreAsync(r)];case 1:if(!c.sent())throw new Error(JSON.stringify({code:L.OPERATION_FAIL,msg:"refresh token is not exist, your local data might be messed up, please retry after clear localStorage or sessionStorage"}));return[4,this._cache.getStoreAsync(t)];case 2:return o=c.sent(),s=Number,[4,this._cache.getStoreAsync(n)];case 3:return i=s.apply(void 0,[c.sent()]),a=!0,(u=this._shouldRefreshAccessTokenHook)?[4,this._shouldRefreshAccessTokenHook(o,i)]:[3,5];case 4:u=!c.sent(),c.label=5;case 5:return u&&(a=!1),o&&i&&!(i<Date.now())||!a?[3,7]:[4,this.refreshAccessToken()];case 6:return[2,c.sent()];case 7:return[2,{accessToken:o,accessTokenExpire:i}]}}))}))},e.prototype.request=function(e,t,n){return x(this,void 0,void 0,(function(){var r,o,i,s,a,u,c,f,l,p,h,d,y,g,v,m,_,b,A,E,S,O,I,T,N,B;return C(this,(function(D){switch(D.label){case 0:return r="x-tcb-trace_"+this.config.env,o="application/x-www-form-urlencoded",i=P({action:e,dataVersion:R.a,env:this.config.env},t),-1!==F.indexOf(e)?[3,3]:(s=this._cache.keys.refreshTokenKey,[4,this._cache.getStoreAsync(s)]);case 1:return D.sent()?(a=i,[4,this.getAccessToken()]):[3,3];case 2:a.access_token=D.sent().accessToken,D.label=3;case 3:if("storage.uploadFile"===e){for(c in u=new FormData)u.hasOwnProperty(c)&&void 0!==u[c]&&u.append(c,i[c]);o="multipart/form-data"}else for(c in o="application/json;charset=UTF-8",u={},i)void 0!==i[c]&&(u[c]=i[c]);return f={headers:{"content-type":o}},(null==n?void 0:n.onUploadProgress)&&(f.onUploadProgress=n.onUploadProgress),(l=this._localCache.getStore(r))&&(f.headers["X-TCB-Trace"]=l),w.runtime!==$.WEB&&(p=this.config,h=p.appSign,d=p.appSecret,y=Date.now(),g=d.appAccessKey,v=d.appAccessKeyId,m=U({data:u,timestamp:y,appAccessKeyId:v,appSign:h},g),f.headers["X-TCB-App-Source"]="timestamp="+y+";appAccessKeyId="+v+";appSign="+h+";sign="+m),_=t.parse,b=t.inQuery,A=t.search,E={env:this.config.env},_&&(E.parse=!0),b&&(E=P(P({},b),E)),S=Object(R.c)(),O=S.BASE_URL,I=S.PROTOCOL,T=j(I,O,E),A&&(T+=A),[4,this.post(P({url:T,data:u},f))];case 4:if(N=D.sent(),(B=N.header&&N.header["x-tcb-trace"])&&this._localCache.setStore(r,B),200!==Number(N.status)&&200!==Number(N.statusCode)||!N.data)throw new Error("network request error");return[2,N]}}))}))},e.prototype.send=function(e,t){return void 0===t&&(t={}),x(this,void 0,void 0,(function(){var n;return C(this,(function(r){switch(r.label){case 0:return[4,this.request(e,t,{onUploadProgress:t.onUploadProgress})];case 1:return"ACCESS_TOKEN_EXPIRED"!==(n=r.sent()).data.code||-1!==F.indexOf(e)?[3,4]:[4,this.refreshAccessToken()];case 2:return r.sent(),[4,this.request(e,t,{onUploadProgress:t.onUploadProgress})];case 3:n=r.sent(),r.label=4;case 4:if(n.data.code&&this._throwWhenRequestFail)throw new Error(JSON.stringify({code:L.OPERATION_FAIL,msg:"["+n.data.code+"] "+n.data.message}));return[2,n.data]}}))}))},e.prototype._refreshAccessToken=function(){return x(this,void 0,void 0,(function(){var e,t,n,r,o,i,s,a,u,c,f,l,p;return C(this,(function(h){switch(h.label){case 0:return e=this._cache.keys,t=e.accessTokenKey,n=e.accessTokenExpireKey,r=e.refreshTokenKey,o=e.loginTypeKey,i=e.anonymousUuidKey,[4,this._cache.removeStoreAsync(t)];case 1:return h.sent(),[4,this._cache.removeStoreAsync(n)];case 2:return h.sent(),[4,this._cache.getStoreAsync(r)];case 3:if(!(s=h.sent()))throw new Error(JSON.stringify({code:L.INVALID_OPERATION,msg:"not login"}));return a={refresh_token:s},[4,this.request("auth.fetchAccessTokenWithRefreshToken",a)];case 4:return(u=h.sent()).data.code?"SIGN_PARAM_INVALID"!==(c=u.data.code)&&"REFRESH_TOKEN_EXPIRED"!==c&&"INVALID_REFRESH_TOKEN"!==c?[3,11]:[4,this._cache.getStoreAsync(o)]:[3,12];case 5:return h.sent()===R.b.ANONYMOUS&&"INVALID_REFRESH_TOKEN"===c?[4,this._cache.getStoreAsync(i)]:[3,9];case 6:return f=h.sent(),[4,this._cache.getStoreAsync(r)];case 7:return l=h.sent(),[4,this.send("auth.signInAnonymously",{anonymous_uuid:f,refresh_token:l})];case 8:return p=h.sent(),this._setRefreshToken(p.refresh_token),[2,this._refreshAccessToken()];case 9:return se.fire(B),[4,this._cache.removeStoreAsync(r)];case 10:h.sent(),h.label=11;case 11:throw new Error(JSON.stringify({code:L.NETWORK_ERROR,msg:"refresh access_token failed："+u.data.code}));case 12:return u.data.access_token?(se.fire(D),[4,this._cache.setStoreAsync(t,u.data.access_token)]):[3,15];case 13:return h.sent(),[4,this._cache.setStoreAsync(n,u.data.access_token_expire+Date.now())];case 14:return h.sent(),[2,{accessToken:u.data.access_token,accessTokenExpire:u.data.access_token_expire}];case 15:return u.data.refresh_token?[4,this._cache.removeStoreAsync(r)]:[3,19];case 16:return h.sent(),[4,this._cache.setStoreAsync(r,u.data.refresh_token)];case 17:return h.sent(),[4,this._refreshAccessToken()];case 18:h.sent(),h.label=19;case 19:return[2]}}))}))},e.prototype._setRefreshToken=function(e){return x(this,void 0,void 0,(function(){var t,n,r,o;return C(this,(function(i){switch(i.label){case 0:return t=this._cache.keys,n=t.accessTokenKey,r=t.accessTokenExpireKey,o=t.refreshTokenKey,[4,this._cache.removeStoreAsync(n)];case 1:return i.sent(),[4,this._cache.removeStoreAsync(r)];case 2:return i.sent(),[4,this._cache.setStoreAsync(o,e)];case 3:return i.sent(),[2]}}))}))},e}(),H={};var K=function(){return(K=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},G=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},V=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},J=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},z=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},X=a.adapters.useAdapters,Z=a.adapters.useDefaultAdapter,Q=a.adapters.RUNTIME,ee=a.constants.ERRORS,te=a.constants.COMMUNITY_SITE_URL,ne=a.utils.printWarn,re=a.helpers.catchErrorsDecorator,oe={timeout:15e3,persistence:"session"},ie={},se=new(function(){function e(e){this._config=e||this._config,this.authInstance=null}return Object.defineProperty(e.prototype,"config",{get:function(){return this._config},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"platform",{get:function(){return w},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"cache",{get:function(){return T(this._config.env)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"localCache",{get:function(){return N(this._config.env)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"request",{get:function(){return e=this._config.env,H[e];var e},enumerable:!1,configurable:!0}),e.prototype.init=function(t){if(!t.env)throw new Error(JSON.stringify({code:ee.INVALID_PARAMS,msg:"env must not be specified"}));if(w.adapter||this._useDefaultAdapter(),this.requestClient=new w.adapter.reqClass({timeout:t.timeout||5e3,timeoutMsg:"["+Object(R.d)()+"][REQUEST TIMEOUT] request had been abort since didn't finished within"+t.timeout/1e3+"s"}),w.runtime!==Q.WEB){if(!t.appSecret)throw new Error(JSON.stringify({code:ee.INVALID_PARAMS,msg:"invalid appSecret"}));var n=w.adapter.getAppSign?w.adapter.getAppSign():"";if(t.appSign&&n&&t.appSign!==n)throw new Error(JSON.stringify({code:ee.INVALID_PARAMS,msg:"invalid appSign"}));if(n&&(t.appSign=n),!t.appSign)throw new Error(JSON.stringify({code:ee.INVALID_PARAMS,msg:"invalid appSign"}))}this._config=K(K({},oe),t),this._config.timeout=this._formatTimeout(this._config.timeout);var r=this._config,o=r.env,i=r.persistence,s=r.debug,a=r.timeout,u=r.appSecret,c=r.appSign;return I({env:o,persistence:i,debug:s,platformInfo:this.platform}),function(e){H[e.env]=new Y(P(P({},e),{throw:!0}))}({env:o,timeout:a,appSecret:u,appSign:c}),new e(this._config)},e.prototype.updateConfig=function(e){var t=e.persistence,n=e.debug;this._config.persistence=t,this._config.debug=n,I({env:this._config.env,persistence:t,debug:n,platformInfo:this.platform})},e.prototype.registerExtension=function(e){ie[e.name]=e},e.prototype.invokeExtension=function(e,t){return J(this,void 0,void 0,(function(){var n;return z(this,(function(r){switch(r.label){case 0:if(!(n=ie[e]))throw new Error(JSON.stringify({code:ee.INVALID_PARAMS,msg:"extension:"+e+" must be registered before invoke"}));return[4,n.invoke(t,this)];case 1:return[2,r.sent()]}}))}))},e.prototype.useAdapters=function(e){var t=X(e)||{},n=t.adapter,r=t.runtime;n&&(w.adapter=n),r&&(w.runtime=r)},e.prototype.registerHook=function(t){!function(e,t){var n=t.entity,r=t.target;if(!e.prototype.hasOwnProperty(r))throw new Error(JSON.stringify({code:m.INVALID_OPERATION,msg:"target:"+r+" is not exist"}));var o=e.prototype[r];if("function"!=typeof o)throw new Error(JSON.stringify({code:m.INVALID_OPERATION,msg:"target:"+r+" is not a function which is the only type supports hook"}));e.prototype[r]=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.call.apply(n,v([this],e)),o.call.apply(o,v([this],e))}}(e,t)},e.prototype.registerComponent=function(t){b(e,t)},e.prototype.registerVersion=function(e){Object(R.h)(e)},e.prototype.registerSdkName=function(e){Object(R.g)(e)},e.prototype.registerEndPoint=function(e,t){Object(R.f)(e,t)},e.prototype._useDefaultAdapter=function(){var e=Z(),t=e.adapter,n=e.runtime;w.adapter=t,w.runtime=n},e.prototype._formatTimeout=function(e){switch(!0){case e>6e5:return ne(ee.INVALID_PARAMS,"timeout is greater than maximum value[10min]"),6e5;case e<100:return ne(ee.INVALID_PARAMS,"timeout is less than maximum value[100ms]"),100;default:return e}},G([re({mode:"sync",title:"Cloudbase 初始化失败",messages:["请确认以下各项：","  1 - 调用 cloudbase.init() 的语法或参数是否正确","  2 - 如果是非浏览器环境，是否配置了安全应用来源（https://docs.cloudbase.net/api-reference/webv2/adapter.html#jie-ru-liu-cheng）","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+te]}),V("design:type",Function),V("design:paramtypes",[Object]),V("design:returntype",e)],e.prototype,"init",null),G([re({title:"调用扩展能力失败",messages:["请确认以下各项：","  1 - 调用 invokeExtension() 的语法或参数是否正确","  2 - 被调用的扩展能力是否已经安装并通过 registerExtension() 注册","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+te]}),V("design:type",Function),V("design:paramtypes",[String,Object]),V("design:returntype",Promise)],e.prototype,"invokeExtension",null),e}());se.useAdapters(g);var ae,ue=se,ce=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},fe=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},le=function(){function e(e){this._config=e,this._cache=e.cache,this._request=e.request}return e.prototype.checkLocalLoginState=function(){return ce(this,void 0,void 0,(function(){var e,t,n,r,o,i;return fe(this,(function(s){switch(s.label){case 0:return e=this._cache.keys,t=e.accessTokenKey,n=e.accessTokenExpireKey,[4,this._cache.getStoreAsync(t)];case 1:return r=s.sent(),[4,this._cache.getStoreAsync(n)];case 2:return o=s.sent(),r?o&&o>Date.now()?[4,(i=new Dt({envId:this._config.env,cache:this._cache,request:this._request})).checkLocalStateAsync()]:[3,4]:[3,7];case 3:return s.sent(),[2,i];case 4:return[4,this._cache.removeStoreAsync(t)];case 5:return s.sent(),[4,this._cache.removeStoreAsync(n)];case 6:s.sent(),s.label=7;case 7:return[2]}}))}))},e.prototype.setRefreshToken=function(e){return ce(this,void 0,void 0,(function(){var t,n,r,o;return fe(this,(function(i){switch(i.label){case 0:return t=this._cache.keys,n=t.accessTokenKey,r=t.accessTokenExpireKey,o=t.refreshTokenKey,[4,this._cache.removeStoreAsync(n)];case 1:return i.sent(),[4,this._cache.removeStoreAsync(r)];case 2:return i.sent(),[4,this._cache.setStoreAsync(o,e)];case 3:return i.sent(),[2]}}))}))},e.prototype.setAccessToken=function(e,t){return ce(this,void 0,void 0,(function(){var n,r,o;return fe(this,(function(i){switch(i.label){case 0:return n=this._cache.keys,r=n.accessTokenKey,o=n.accessTokenExpireKey,[4,this._cache.setStoreAsync(r,e)];case 1:return i.sent(),[4,this._cache.setStoreAsync(o,t)];case 2:return i.sent(),[2]}}))}))},e.prototype.refreshUserInfo=function(){return ce(this,void 0,void 0,(function(){var e;return fe(this,(function(t){switch(t.label){case 0:return"auth.getUserInfo",[4,this._request.send("auth.getUserInfo",{})];case 1:return e=t.sent().data,[4,this.setLocalUserInfo(e)];case 2:return t.sent(),[2,e]}}))}))},e.prototype.setLocalUserInfo=function(e){return ce(this,void 0,void 0,(function(){var t;return fe(this,(function(n){switch(n.label){case 0:return t=this._cache.keys.userInfoKey,[4,this._cache.setStoreAsync(t,e)];case 1:return n.sent(),[2]}}))}))},e}();!function(e){e.ANONYMOUS="ANONYMOUS",e.WECHAT="WECHAT",e.WECHAT_PUBLIC="WECHAT-PUBLIC",e.WECHAT_OPEN="WECHAT-OPEN",e.CUSTOM="CUSTOM",e.EMAIL="EMAIL",e.USERNAME="USERNAME",e.NULL="NULL"}(ae||(ae={}));var pe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),he=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},de=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},ye=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},ge=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},ve=a.constants.getSdkName,me=a.constants.ERRORS,_e=a.constants.COMMUNITY_SITE_URL,be=a.adapters.RUNTIME,we=a.utils.getQuery,Ae=a.utils.getHash,Ee=a.utils.removeParam,Se=a.utils.printWarn,Oe=a.helpers.catchErrorsDecorator,Ie=function(e){function t(t,n,r,o){var i=e.call(this,t)||this;return i._runtime=t.runtime,i._appid=n,i._scope=r,i._state=o||"weixin",i}return pe(t,e),t.prototype.signIn=function(){return ye(this,void 0,void 0,(function(){return ge(this,(function(e){return[2,Se(me.OPERATION_FAIL,"API signIn has been deprecated, please use signInWithRedirect insteed")]}))}))},t.prototype.signInWithRedirect=function(){return ye(this,void 0,void 0,(function(){return ge(this,(function(e){return[2,this._redirect()]}))}))},t.prototype.getRedirectResult=function(e){return ye(this,void 0,void 0,(function(){var t;return ge(this,(function(n){return(t=Te())?[2,this._signInWithCode(t,e)]:[2,null]}))}))},t.prototype.getLinkRedirectResult=function(e){return void 0===e&&(e={}),ye(this,void 0,void 0,(function(){var t,n,r,o,i,s;return ge(this,(function(a){return t=e.withUnionId,n=void 0!==t&&t,(r=Te())?(o=this._appid,i=function(e){switch(e){case"snsapi_login":return"WECHAT-OPEN";default:return"WECHAT-PUBLIC"}}(this._scope),s=this._runtime===be.WX_MP?"1":"0",[2,this._request.send("auth.linkWithWeixinCode",{payload:{appid:o,loginType:i,code:r,hybridMiniapp:s,withUnionId:n}})]):[2,null]}))}))},t.prototype._redirect=function(){var e=Ee("code",location.href);e=Ee("state",e),e=encodeURIComponent(e);var t="//open.weixin.qq.com/connect/oauth2/authorize";"snsapi_login"===this._scope&&(t="//open.weixin.qq.com/connect/qrconnect");try{location.href=t+"?appid="+this._appid+"&redirect_uri="+e+"&response_type=code&scope="+this._scope+"&state="+this._state+"#wechat_redirect"}catch(e){throw new Error("["+ve()+"]["+me.UNKOWN_ERROR+"]"+e)}},t.prototype._signInWithCode=function(e,t){return ye(this,void 0,void 0,(function(){var n,r,o,i,s,a,u,c;return ge(this,(function(f){switch(f.label){case 0:return n=this._cache.keys,r=n.accessTokenKey,o=n.accessTokenExpireKey,i=n.refreshTokenKey,s=function(e){switch(e){case"snsapi_login":return"WECHAT-OPEN";default:return"WECHAT-PUBLIC"}}(this._scope),[4,this._getRefreshTokenByWXCode(this._appid,s,e,t)];case 1:return a=f.sent(),u=a.refreshToken,[4,this._cache.setStoreAsync(i,u)];case 2:return f.sent(),a.accessToken?[4,this._cache.setStoreAsync(r,a.accessToken)]:[3,4];case 3:f.sent(),f.label=4;case 4:return a.accessTokenExpire?[4,this._cache.setStoreAsync(o,String(a.accessTokenExpire+Date.now()))]:[3,6];case 5:f.sent(),f.label=6;case 6:return Rt.fire(xt.LOGIN_STATE_CHANGED),Rt.fire(xt.LOGIN_TYPE_CHANGED,{env:this._config.env,loginType:ae.WECHAT,persistence:this._config.persistence}),[4,this.refreshUserInfo()];case 7:return f.sent(),[4,(c=new Dt({envId:this._config.env,cache:this._cache,request:this._request})).checkLocalStateAsync()];case 8:return f.sent(),[2,c]}}))}))},t.prototype._getRefreshTokenByWXCode=function(e,t,n,r){return void 0===r&&(r={}),ye(this,void 0,void 0,(function(){var o,i,s,a,u,c;return ge(this,(function(f){return o=r.withUnionId,i=void 0!==o&&o,s=r.createUser,a=void 0===s||s,u="snsapi_base"!==this._scope&&(r.syncUserInfo||!1),"auth.signIn",c=this._runtime===be.WX_MP?"1":"0",[2,this._request.send("auth.signIn",{appid:e,loginType:t,hybridMiniapp:c,syncUserInfo:u,loginCredential:n,withUnionId:i,createUser:a}).then((function(e){if(e.code)throw new Error("["+ve()+"]["+me.OPERATION_FAIL+"] failed login via wechat: "+e.code);if(e.refresh_token)return{refreshToken:e.refresh_token,accessToken:e.access_token,accessTokenExpire:e.access_token_expire};throw new Error("["+ve()+"]["+me.OPERATION_FAIL+"] action:getJwt not return refreshToken")}))]}))}))},he([Oe({title:"跳转微信公众号授权失败",messages:["请确认以下各项：","  1 - 调用 auth().weixinAuthProvider().signInWithRedirect() 的语法或参数是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+_e]}),de("design:type",Function),de("design:paramtypes",[]),de("design:returntype",Promise)],t.prototype,"signInWithRedirect",null),he([Oe({title:"微信公众号登录失败",messages:["请确认以下各项：","  1 - 调用 auth().weixinAuthProvider().getRedirectResult() 的语法或参数是否正确","  2 - 当前环境是否开通了微信公众号登录授权","  3 - 微信公众号的 AppId 与 AppSecret 配置是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+_e]}),de("design:type",Function),de("design:paramtypes",[Object]),de("design:returntype",Promise)],t.prototype,"getRedirectResult",null),he([Oe({title:"获取微信重定向绑定结果",messages:["请确认以下各项：","  1 - 调用 auth().weixinAuthProvider().getLinkRedirectResult() 的语法或参数是否正确","  2 - 当前环境是否开通了微信公众号登录授权","  3 - 微信公众号的 AppId 与 AppSecret 配置是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+_e]}),de("design:type",Function),de("design:paramtypes",[Object]),de("design:returntype",Promise)],t.prototype,"getLinkRedirectResult",null),t}(le);function Te(){return we("code")||Ae("code")}var Ne=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Re=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},Be=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},De=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},Pe=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},xe=a.constants.ERRORS,Ce=a.constants.COMMUNITY_SITE_URL,Le=a.utils.throwError,ke=a.utils.isString,Me=a.events.addEventListener,je=a.helpers.catchErrorsDecorator,Ue=function(e){function t(t){var n=e.call(this,t)||this;return n._onConverted=n._onConverted.bind(n),Me(xt.ANONYMOUS_CONVERTED,n._onConverted),n}return Ne(t,e),t.prototype.signIn=function(){return De(this,void 0,void 0,(function(){var e,t,n,r,o,i,s;return Pe(this,(function(a){switch(a.label){case 0:return[4,this._cache.updatePersistenceAsync("local")];case 1:return a.sent(),e=this._cache.keys,t=e.anonymousUuidKey,n=e.refreshTokenKey,[4,this._cache.getStoreAsync(t)];case 2:return r=a.sent(),[4,this._cache.getStoreAsync(n)];case 3:return o=a.sent(),[4,this._request.send("auth.signInAnonymously",{anonymous_uuid:r,refresh_token:o})];case 4:return(i=a.sent()).uuid&&i.refresh_token?[4,this._setAnonymousUUID(i.uuid)]:[3,10];case 5:return a.sent(),[4,this.setRefreshToken(i.refresh_token)];case 6:return a.sent(),[4,this._request.refreshAccessToken()];case 7:return a.sent(),Rt.fire(xt.LOGIN_TYPE_CHANGED,{env:this._config.env,loginType:ae.ANONYMOUS,persistence:"local"}),Rt.fire(xt.LOGIN_STATE_CHANGED),[4,(s=new Dt({envId:this._config.env,cache:this._cache,request:this._request})).checkLocalStateAsync()];case 8:return a.sent(),[4,s.user.refresh()];case 9:return a.sent(),[2,s];case 10:throw new Error(JSON.stringify({code:xe.OPERATION_FAIL,msg:JSON.stringify(i)||"anonymous signIn failed"}))}}))}))},t.prototype.linkAndRetrieveDataWithTicket=function(e){return De(this,void 0,void 0,(function(){var t,n,r,o,i,s,a;return Pe(this,(function(u){switch(u.label){case 0:return ke(e)||Le(xe.INVALID_PARAMS,"ticket must be a string"),t=this._cache.keys,n=t.anonymousUuidKey,r=t.refreshTokenKey,[4,this._cache.getStoreAsync(n)];case 1:return o=u.sent(),[4,this._cache.getStoreAsync(r)];case 2:return i=u.sent(),[4,this._request.send("auth.linkAndRetrieveDataWithTicket",{anonymous_uuid:o,refresh_token:i,ticket:e})];case 3:return(s=u.sent()).refresh_token?[4,this._clearAnonymousUUID()]:[3,8];case 4:return u.sent(),[4,this.setRefreshToken(s.refresh_token)];case 5:return u.sent(),[4,this._request.refreshAccessToken()];case 6:return u.sent(),Rt.fire(xt.ANONYMOUS_CONVERTED,{env:this._config.env}),Rt.fire(xt.LOGIN_TYPE_CHANGED,{loginType:ae.CUSTOM,persistence:"local"}),[4,(a=new Dt({envId:this._config.env,cache:this._cache,request:this._request})).checkLocalStateAsync()];case 7:return u.sent(),[2,a];case 8:Le(xe.OPERATION_FAIL,JSON.stringify(s)||"linkAndRetrieveDataWithTicket failed"),u.label=9;case 9:return[2]}}))}))},t.prototype._setAnonymousUUID=function(e){return De(this,void 0,void 0,(function(){var t,n,r;return Pe(this,(function(o){switch(o.label){case 0:return t=this._cache.keys,n=t.anonymousUuidKey,r=t.loginTypeKey,[4,this._cache.removeStoreAsync(n)];case 1:return o.sent(),[4,this._cache.setStoreAsync(n,e)];case 2:return o.sent(),[4,this._cache.setStoreAsync(r,ae.ANONYMOUS)];case 3:return o.sent(),[2]}}))}))},t.prototype._clearAnonymousUUID=function(){return De(this,void 0,void 0,(function(){return Pe(this,(function(e){switch(e.label){case 0:return[4,this._cache.removeStoreAsync(this._cache.keys.anonymousUuidKey)];case 1:return e.sent(),[2]}}))}))},t.prototype._onConverted=function(e){return De(this,void 0,void 0,(function(){return Pe(this,(function(t){switch(t.label){case 0:return e.data.env!==this._config.env?[2]:[4,this._cache.updatePersistenceAsync(this._config.persistence)];case 1:return t.sent(),[2]}}))}))},Re([je({title:"匿名登录失败",messages:["请确认以下各项：","  1 - 当前环境是否开启了匿名登录","  2 - 调用 auth().anonymouseProvider().signIn() 的语法或参数是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Ce]}),Be("design:type",Function),Be("design:paramtypes",[]),Be("design:returntype",Promise)],t.prototype,"signIn",null),t}(le),$e=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Fe=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},qe=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},We=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},Ye=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},He=a.constants.ERRORS,Ke=a.constants.COMMUNITY_SITE_URL,Ge=a.utils.isString,Ve=a.helpers.catchErrorsDecorator,Je=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return $e(t,e),t.prototype.signIn=function(e){return We(this,void 0,void 0,(function(){var t,n,r,o,i,s,a;return Ye(this,(function(u){switch(u.label){case 0:if(!Ge(e))throw new Error(JSON.stringify({code:He.INVALID_PARAMS,msg:"ticket must be a string"}));return t=this._cache.keys.refreshTokenKey,o=(r=this._request).send,i=["auth.signInWithTicket"],s={ticket:e},[4,this._cache.getStoreAsync(t)];case 1:return[4,o.apply(r,i.concat([(s.refresh_token=u.sent()||"",s)]))];case 2:return(n=u.sent()).refresh_token?[4,this.setRefreshToken(n.refresh_token)]:[3,7];case 3:return u.sent(),[4,this._request.refreshAccessToken()];case 4:return u.sent(),Rt.fire(xt.LOGIN_TYPE_CHANGED,{env:this._config.env,loginType:ae.CUSTOM,persistence:this._config.persistence}),Rt.fire(xt.LOGIN_STATE_CHANGED),[4,this.refreshUserInfo()];case 5:return u.sent(),[4,(a=new Dt({envId:this._config.env,cache:this._cache,request:this._request})).checkLocalStateAsync()];case 6:return u.sent(),[2,a];case 7:throw new Error(JSON.stringify({code:He.OPERATION_FAIL,msg:"custom signIn failed"}))}}))}))},Fe([Ve({title:"自定义登录失败",messages:["请确认以下各项：","  1 - 当前环境是否开启了自定义登录","  2 - 调用 auth().customAuthProvider().signIn() 的语法或参数是否正确","  3 - ticket 是否归属于当前环境","  4 - 创建 ticket 的自定义登录私钥是否过期","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Ke]}),qe("design:type",Function),qe("design:paramtypes",[String]),qe("design:returntype",Promise)],t.prototype,"signIn",null),t}(le),ze=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Xe=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},Ze=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},Qe=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},et=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},tt=a.utils.throwError,nt=a.utils.isString,rt=a.constants.ERRORS,ot=a.constants.COMMUNITY_SITE_URL,it=a.helpers.catchErrorsDecorator,st=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ze(t,e),t.prototype.signIn=function(e,t){return Qe(this,void 0,void 0,(function(){var n,r,o,i,s;return et(this,(function(a){switch(a.label){case 0:return nt(e)||tt(rt.INVALID_PARAMS,"email must be a string"),n=this._cache.keys.refreshTokenKey,[4,this._request.send("auth.signIn",{loginType:"EMAIL",email:e,password:t,refresh_token:this._cache.getStore(n)||""})];case 1:return r=a.sent(),o=r.refresh_token,i=r.access_token,s=r.access_token_expire,o?[4,this.setRefreshToken(o)]:[3,8];case 2:return a.sent(),i&&s?[4,this.setAccessToken(i,s)]:[3,4];case 3:return a.sent(),[3,6];case 4:return[4,this._request.refreshAccessToken()];case 5:a.sent(),a.label=6;case 6:return[4,this.refreshUserInfo()];case 7:return a.sent(),Rt.fire(xt.LOGIN_STATE_CHANGED),Rt.fire(xt.LOGIN_TYPE_CHANGED,{env:this._config.env,loginType:ae.EMAIL,persistence:this._config.persistence}),[2,new Dt({envId:this._config.env,cache:this._cache,request:this._request})];case 8:r.code?tt(rt.OPERATION_FAIL,"Email login fail["+r.code+"] "+r.message):tt(rt.OPERATION_FAIL,"Email login fail"),a.label=9;case 9:return[2]}}))}))},t.prototype.signUp=function(e,t){return Qe(this,void 0,void 0,(function(){return et(this,(function(n){return[2,this._request.send("auth.signUpWithEmailAndPassword",{email:e,password:t})]}))}))},t.prototype.resetPassword=function(e){return Qe(this,void 0,void 0,(function(){return et(this,(function(t){return[2,this._request.send("auth.sendPasswordResetEmail",{email:e})]}))}))},t.prototype.resetPasswordWithToken=function(e,t){return Qe(this,void 0,void 0,(function(){return et(this,(function(n){return[2,this._request.send("auth.resetPasswordWithToken",{token:e,newPassword:t})]}))}))},t.prototype.activate=function(e){return Qe(this,void 0,void 0,(function(){return et(this,(function(t){return[2,this._request.send("auth.activateEndUserMail",{token:e})]}))}))},Xe([it({title:"邮箱密码登录失败",messages:["请确认以下各项：","  1 - 调用 auth().emailAuthProvider() 的语法或参数是否正确","  2 - 当前环境是否开通了邮箱登录","  3 - 邮箱地址与密码是否匹配","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+ot]}),Ze("design:type",Function),Ze("design:paramtypes",[String,String]),Ze("design:returntype",Promise)],t.prototype,"signIn",null),Xe([it({title:"邮箱注册失败",messages:["请确认以下各项：","  1 - 调用 auth().signUpWithEmailAndPassword() 的语法或参数是否正确","  2 - 当前环境是否开通了邮箱登录","  3 - 此邮箱地址是否已经被其他用户占用","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+ot]}),Ze("design:type",Function),Ze("design:paramtypes",[String,String]),Ze("design:returntype",Promise)],t.prototype,"signUp",null),Xe([it({title:"重置密码失败",messages:["请确认以下各项：","  1 - 调用 auth().sendPasswordResetEmail() 的语法或参数是否正确","  2 - 当前环境是否开通了邮箱登录","  3 - 此邮箱地址是否已经与当前用户绑定","  4 - 此邮箱地址是否已经被其他用户占用","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+ot]}),Ze("design:type",Function),Ze("design:paramtypes",[String]),Ze("design:returntype",Promise)],t.prototype,"resetPassword",null),Xe([it({title:"重置密码失败",messages:["请确认以下各项：","  1 - 调用语法或参数是否正确","  2 - 当前环境是否开通了邮箱登录","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+ot]}),Ze("design:type",Function),Ze("design:paramtypes",[String,String]),Ze("design:returntype",Promise)],t.prototype,"resetPasswordWithToken",null),Xe([it({title:"邮箱激活失败",messages:["请确认以下各项：","  1 - 调用语法或参数是否正确","  2 - 当前环境是否开通了邮箱登录","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+ot]}),Ze("design:type",Function),Ze("design:paramtypes",[String]),Ze("design:returntype",Promise)],t.prototype,"activate",null),t}(le),at=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ut=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},ct=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},ft=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},lt=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},pt=a.utils.printWarn,ht=a.constants.ERRORS,dt=a.constants.COMMUNITY_SITE_URL,yt=a.helpers.catchErrorsDecorator,gt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return at(t,e),t.prototype.signIn=function(e,t){return ft(this,void 0,void 0,(function(){var n,r,o,i,s,a,u,c,f;return lt(this,(function(l){switch(l.label){case 0:if("string"!=typeof e)throw new Error(JSON.stringify({code:ht.INVALID_PARAMS,msg:"username must be a string"}));return"string"!=typeof t&&(t="",pt(ht.INVALID_PARAMS,"password is empty")),n=this._cache.keys.refreshTokenKey,i=(o=this._request).send,s=["auth.signIn"],a={loginType:ae.USERNAME,username:e,password:t},[4,this._cache.getStoreAsync(n)];case 1:return[4,i.apply(o,s.concat([(a.refresh_token=l.sent()||"",a)]))];case 2:return r=l.sent(),u=r.refresh_token,c=r.access_token_expire,f=r.access_token,u?[4,this.setRefreshToken(u)]:[3,9];case 3:return l.sent(),f&&c?[4,this.setAccessToken(f,c)]:[3,5];case 4:return l.sent(),[3,7];case 5:return[4,this._request.refreshAccessToken()];case 6:l.sent(),l.label=7;case 7:return[4,this.refreshUserInfo()];case 8:return l.sent(),Rt.fire(xt.LOGIN_STATE_CHANGED),Rt.fire(xt.LOGIN_TYPE_CHANGED,{env:this._config.env,loginType:ae.USERNAME,persistence:this._config.persistence}),[2,new Dt({envId:this._config.env,cache:this._cache,request:this._request})];case 9:throw r.code?new Error(JSON.stringify({code:ht.OPERATION_FAIL,msg:"login by username failed:["+r.code+"] "+r.message})):new Error(JSON.stringify({code:ht.OPERATION_FAIL,msg:"login by username failed"}));case 10:return[2]}}))}))},ut([yt({title:"用户名密码登录失败",messages:["请确认以下各项：","  1 - 调用 auth().signInWithUsernameAndPassword() 的语法或参数是否正确","  2 - 当前环境是否开通了用户名密码登录","  3 - 用户名密码是否匹配","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+dt]}),ct("design:type",Function),ct("design:paramtypes",[String,String]),ct("design:returntype",Promise)],t.prototype,"signIn",null),t}(le),vt=function(){return(vt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},mt=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},_t=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},bt=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},wt=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},At=a.events.CloudbaseEventEmitter,Et=a.adapters.RUNTIME,St=a.utils.printWarn,Ot=a.utils.throwError,It=a.constants.ERRORS,Tt=a.constants.COMMUNITY_SITE_URL,Nt=a.helpers.catchErrorsDecorator,Rt=new At,Bt=function(){function e(e){var t=e.cache,n=e.request;this._cache=t,this._request=n,this._setUserInfo()}return e.prototype.checkLocalInfo=function(){return bt(this,void 0,void 0,(function(){return wt(this,(function(e){return this.uid=this._getLocalUserInfo("uid"),this.loginType=this._getLocalUserInfo("loginType"),this.openid=this._getLocalUserInfo("wxOpenId"),this.wxOpenId=this._getLocalUserInfo("wxOpenId"),this.wxPublicId=this._getLocalUserInfo("wxPublicId"),this.unionId=this._getLocalUserInfo("wxUnionId"),this.qqMiniOpenId=this._getLocalUserInfo("qqMiniOpenId"),this.customUserId=this._getLocalUserInfo("customUserId"),this.nickName=this._getLocalUserInfo("nickName"),this.gender=this._getLocalUserInfo("gender"),this.avatarUrl=this._getLocalUserInfo("avatarUrl"),this.email=this._getLocalUserInfo("email"),this.hasPassword=Boolean(this._getLocalUserInfo("hasPassword")),this.location={country:this._getLocalUserInfo("country"),province:this._getLocalUserInfo("province"),city:this._getLocalUserInfo("city")},[2]}))}))},e.prototype.checkLocalInfoAsync=function(){return bt(this,void 0,void 0,(function(){var e,t,n,r,o,i,s,a,u,c,f,l,p,h,d,y;return wt(this,(function(g){switch(g.label){case 0:return e=this,[4,this._getLocalUserInfoAsync("uid")];case 1:return e.uid=g.sent(),t=this,[4,this._getLocalUserInfoAsync("loginType")];case 2:return t.loginType=g.sent(),n=this,[4,this._getLocalUserInfoAsync("wxOpenId")];case 3:return n.openid=g.sent(),r=this,[4,this._getLocalUserInfoAsync("wxOpenId")];case 4:return r.wxOpenId=g.sent(),o=this,[4,this._getLocalUserInfoAsync("wxPublicId")];case 5:return o.wxPublicId=g.sent(),i=this,[4,this._getLocalUserInfoAsync("wxUnionId")];case 6:return i.unionId=g.sent(),s=this,[4,this._getLocalUserInfoAsync("qqMiniOpenId")];case 7:return s.qqMiniOpenId=g.sent(),a=this,[4,this._getLocalUserInfoAsync("customUserId")];case 8:return a.customUserId=g.sent(),u=this,[4,this._getLocalUserInfoAsync("nickName")];case 9:return u.nickName=g.sent(),c=this,[4,this._getLocalUserInfoAsync("gender")];case 10:return c.gender=g.sent(),f=this,[4,this._getLocalUserInfoAsync("avatarUrl")];case 11:return f.avatarUrl=g.sent(),l=this,[4,this._getLocalUserInfoAsync("email")];case 12:return l.email=g.sent(),p=this,h=Boolean,[4,this._getLocalUserInfoAsync("hasPassword")];case 13:return p.hasPassword=h.apply(void 0,[g.sent()]),d=this,y={},[4,this._getLocalUserInfoAsync("country")];case 14:return y.country=g.sent(),[4,this._getLocalUserInfoAsync("province")];case 15:return y.province=g.sent(),[4,this._getLocalUserInfoAsync("city")];case 16:return d.location=(y.city=g.sent(),y),[2]}}))}))},e.prototype.linkWithTicket=function(e){if("string"!=typeof e)throw new Error("ticket must be string");return this._request.send("auth.linkWithTicket",{ticket:e})},e.prototype.linkWithRedirect=function(e){e.signInWithRedirect()},e.prototype.getLinkedUidList=function(){return bt(this,void 0,void 0,(function(){var e,t,n,r,o,i;return wt(this,(function(s){switch(s.label){case 0:return[4,this._request.send("auth.getLinkedUidList",{})];case 1:for(e=s.sent().data,t=!1,n=e.users,r=0,o=n;r<o.length;r++)if((i=o[r]).wxOpenId&&i.wxPublicId){t=!0;break}return[2,{users:n,hasPrimaryUid:t}]}}))}))},e.prototype.setPrimaryUid=function(e){return this._request.send("auth.setPrimaryUid",{uid:e})},e.prototype.unlink=function(e){return this._request.send("auth.unlink",{platform:e})},e.prototype.update=function(e){return bt(this,void 0,void 0,(function(){var t,n,r,o,i,s,a;return wt(this,(function(u){switch(u.label){case 0:return t=e.nickName,n=e.gender,r=e.avatarUrl,o=e.province,i=e.country,s=e.city,[4,this._request.send("auth.updateUserInfo",{nickName:t,gender:n,avatarUrl:r,province:o,country:i,city:s})];case 1:return a=u.sent().data,this._setLocalUserInfo(a),[2]}}))}))},e.prototype.updatePassword=function(e,t){return this._request.send("auth.updatePassword",{oldPassword:t,newPassword:e})},e.prototype.updateEmail=function(e){return this._request.send("auth.updateEmail",{newEmail:e})},e.prototype.updateUsername=function(e){return"string"!=typeof e&&Ot(It.INVALID_PARAMS,"username must be a string"),this._request.send("auth.updateUsername",{username:e})},e.prototype.refresh=function(){return bt(this,void 0,void 0,(function(){var e;return wt(this,(function(t){switch(t.label){case 0:return"auth.getUserInfo",[4,this._request.send("auth.getUserInfo",{})];case 1:return e=t.sent().data,this._setLocalUserInfo(e),[2,e]}}))}))},e.prototype._getLocalUserInfo=function(e){var t=this._cache.keys.userInfoKey;return this._cache.getStore(t)[e]},e.prototype._getLocalUserInfoAsync=function(e){return bt(this,void 0,void 0,(function(){var t;return wt(this,(function(n){switch(n.label){case 0:return t=this._cache.keys.userInfoKey,[4,this._cache.getStoreAsync(t)];case 1:return[2,n.sent()[e]]}}))}))},e.prototype._setUserInfo=function(){var e=this,t=this._cache.keys.userInfoKey,n=this._cache.getStore(t);["uid","loginType","openid","wxOpenId","wxPublicId","unionId","qqMiniOpenId","email","hasPassword","customUserId","nickName","gender","avatarUrl"].forEach((function(t){e[t]=n[t]})),this.location={country:n.country,province:n.province,city:n.city}},e.prototype._setLocalUserInfo=function(e){var t=this._cache.keys.userInfoKey;this._cache.setStore(t,e),this._setUserInfo()},mt([Nt({title:"绑定自定义登录失败",messages:["请确认以下各项：","  1 - 调用 User.linkWithTicket() 的语法或参数是否正确","  2 - 此账户是否已经绑定自定义登录","  3 - ticket 参数是否归属当前环境","  4 - 创建 ticket 的自定义登录私钥是否过期","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[String]),_t("design:returntype",Promise)],e.prototype,"linkWithTicket",null),mt([Nt({title:"绑定第三方登录方式失败",messages:["请确认以下各项：","  1 - 调用 User.linkWithRedirect() 的语法或参数是否正确","  2 - 此账户是否已经绑定此第三方","  3 - 此第三方是否已经授权","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[Object]),_t("design:returntype",void 0)],e.prototype,"linkWithRedirect",null),mt([Nt({title:"获取账户列表失败",messages:["请确认以下各项：","  1 - 调用 User.getLinkedUidList() 的语法或参数是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[]),_t("design:returntype",Promise)],e.prototype,"getLinkedUidList",null),mt([Nt({title:"设置微信主账号失败",messages:["请确认以下各项：","  1 - 调用 User.setPrimaryUid() 的语法或参数是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[String]),_t("design:returntype",void 0)],e.prototype,"setPrimaryUid",null),mt([Nt({title:"接触绑定失败",messages:["请确认以下各项：","  1 - 调用 User.unlink() 的语法或参数是否正确","  2 - 当前账户是否已经与此登录方式解绑","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[String]),_t("design:returntype",void 0)],e.prototype,"unlink",null),mt([Nt({title:"更新用户信息失败",messages:["请确认以下各项：","  1 - 调用 User.update() 的语法或参数是否正确","  2 - 用户信息中是否包含非法值","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[Object]),_t("design:returntype",Promise)],e.prototype,"update",null),mt([Nt({title:"更新密码失败",messages:["请确认以下各项：","  1 - 调用 User.updatePassword() 的语法或参数是否正确","  3 - 新密码中是否包含非法字符","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[String,String]),_t("design:returntype",void 0)],e.prototype,"updatePassword",null),mt([Nt({title:"更新邮箱地址失败",messages:["请确认以下各项：","  1 - 调用 User.updateEmail() 的语法或参数是否正确","  2 - 当前环境是否开通了邮箱密码登录","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[String]),_t("design:returntype",void 0)],e.prototype,"updateEmail",null),mt([Nt({title:"更新用户名失败",messages:["请确认以下各项：","  1 - 调用 User.updateUsername() 的语法或参数是否正确","  2 - 当前环境是否开通了用户名密码登录","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[String]),_t("design:returntype",void 0)],e.prototype,"updateUsername",null),mt([Nt({title:"刷新本地用户信息失败",messages:["请确认以下各项：","  1 - 调用 User.refresh() 的语法或参数是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[]),_t("design:returntype",Promise)],e.prototype,"refresh",null),e}(),Dt=function(){function e(e){var t=e.envId,n=e.cache,r=e.request;t||Ot(It.INVALID_PARAMS,"envId is not defined"),this._cache=n,this.user=new Bt({cache:n,request:r})}return e.prototype.checkLocalState=function(){return bt(this,void 0,void 0,(function(){var e,t,n,r,o,i,s;return wt(this,(function(a){return e=this._cache.keys,t=e.refreshTokenKey,n=e.accessTokenKey,r=e.accessTokenExpireKey,o=this._cache.getStore(t),i=this._cache.getStore(n),s=this._cache.getStore(r),this.credential={refreshToken:o,accessToken:i,accessTokenExpire:s},this._loginType=this._cache.getStore(this._cache.keys.loginTypeKey),this.user.checkLocalInfo(),[2]}))}))},e.prototype.checkLocalStateAsync=function(){return bt(this,void 0,void 0,(function(){var e,t,n,r,o,i,s,a;return wt(this,(function(u){switch(u.label){case 0:return e=this._cache.keys,t=e.refreshTokenKey,n=e.accessTokenKey,r=e.accessTokenExpireKey,[4,this._cache.getStoreAsync(t)];case 1:return o=u.sent(),[4,this._cache.getStoreAsync(n)];case 2:return i=u.sent(),[4,this._cache.getStoreAsync(r)];case 3:return s=u.sent(),this.credential={refreshToken:o,accessToken:i,accessTokenExpire:s},a=this,[4,this._cache.getStoreAsync(this._cache.keys.loginTypeKey)];case 4:return a._loginType=u.sent(),[4,this.user.checkLocalInfoAsync()];case 5:return u.sent(),[2]}}))}))},Object.defineProperty(e.prototype,"isAnonymousAuth",{get:function(){return this.loginType===ae.ANONYMOUS},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isCustomAuth",{get:function(){return this.loginType===ae.CUSTOM},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isWeixinAuth",{get:function(){return this.loginType===ae.WECHAT||this.loginType===ae.WECHAT_OPEN||this.loginType===ae.WECHAT_PUBLIC},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isUsernameAuth",{get:function(){return this.loginType===ae.USERNAME},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loginType",{get:function(){return this._loginType},enumerable:!1,configurable:!0}),e}(),Pt=function(){function e(e){this._config=e,this._cache=e.cache,this._request=e.request,this._runtime=e.runtime||Et.WEB,Rt.on(xt.LOGIN_TYPE_CHANGED,this._onLoginTypeChanged.bind(this))}return Object.defineProperty(e.prototype,"currentUser",{get:function(){if("async"!==this._cache.mode){var e=this.hasLoginState();return e&&e.user||null}St(It.INVALID_OPERATION,"current platform's storage is asynchronous, please use getCurrenUser insteed")},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"loginType",{get:function(){return this._cache.getStore(this._cache.keys.loginTypeKey)},enumerable:!1,configurable:!0}),e.prototype.getCurrenUser=function(){return bt(this,void 0,void 0,(function(){var e;return wt(this,(function(t){switch(t.label){case 0:return[4,this.getLoginState()];case 1:return(e=t.sent())?[4,e.user.checkLocalInfoAsync()]:[3,3];case 2:return t.sent(),[2,e.user||null];case 3:return[2,null]}}))}))},e.prototype.getLoginType=function(){return bt(this,void 0,void 0,(function(){return wt(this,(function(e){switch(e.label){case 0:return[4,this._cache.getStoreAsync(this._cache.keys.loginTypeKey)];case 1:return[2,e.sent()]}}))}))},e.prototype.getAccessToken=function(){return bt(this,void 0,void 0,(function(){var e;return wt(this,(function(t){switch(t.label){case 0:return e={},[4,this._request.getAccessToken()];case 1:return[2,(e.accessToken=t.sent().accessToken,e.env=this._config.env,e)]}}))}))},e.prototype.weixinAuthProvider=function(e){var t=e.appid,n=e.scope,r=e.state;return this._weixinAuthProvider||(this._weixinAuthProvider=new Ie(vt(vt({},this._config),{cache:this._cache,request:this._request,runtime:this._runtime}),t,n,r)),this._weixinAuthProvider},e.prototype.anonymousAuthProvider=function(){return this._anonymousAuthProvider||(this._anonymousAuthProvider=new Ue(vt(vt({},this._config),{cache:this._cache,request:this._request}))),this._anonymousAuthProvider},e.prototype.customAuthProvider=function(){return this._customAuthProvider||(this._customAuthProvider=new Je(vt(vt({},this._config),{cache:this._cache,request:this._request}))),this._customAuthProvider},e.prototype.emailAuthProvider=function(){return this._emailAuthProvider||(this._emailAuthProvider=new st(vt(vt({},this._config),{cache:this._cache,request:this._request}))),this._emailAuthProvider},e.prototype.usernameAuthProvider=function(){return this._usernameAuthProvider||(this._usernameAuthProvider=new gt(vt(vt({},this._config),{cache:this._cache,request:this._request}))),this._usernameAuthProvider},e.prototype.signInWithUsernameAndPassword=function(e,t){return bt(this,void 0,void 0,(function(){return wt(this,(function(n){return[2,this.usernameAuthProvider().signIn(e,t)]}))}))},e.prototype.isUsernameRegistered=function(e){return bt(this,void 0,void 0,(function(){var t;return wt(this,(function(n){switch(n.label){case 0:return"string"!=typeof e&&Ot(It.INVALID_PARAMS,"username must be a string"),[4,this._request.send("auth.isUsernameRegistered",{username:e})];case 1:return[2,null==(t=n.sent().data)?void 0:t.isRegistered]}}))}))},e.prototype.signInWithEmailAndPassword=function(e,t){return bt(this,void 0,void 0,(function(){return wt(this,(function(n){return[2,this.emailAuthProvider().signIn(e,t)]}))}))},e.prototype.signUpWithEmailAndPassword=function(e,t){return bt(this,void 0,void 0,(function(){return wt(this,(function(n){return[2,this.emailAuthProvider().signUp(e,t)]}))}))},e.prototype.sendPasswordResetEmail=function(e){return bt(this,void 0,void 0,(function(){return wt(this,(function(t){return[2,this.emailAuthProvider().resetPassword(e)]}))}))},e.prototype.signOut=function(){return bt(this,void 0,void 0,(function(){var e,t,n,r,o,i,s;return wt(this,(function(a){switch(a.label){case 0:return[4,this.getLoginType()];case 1:if(a.sent()===ae.ANONYMOUS)throw new Error(JSON.stringify({code:It.INVALID_OPERATION,msg:"anonymous user doesn't support signOut action"}));return e=this._cache.keys,t=e.refreshTokenKey,n=e.accessTokenKey,r=e.accessTokenExpireKey,o="auth.logout",[4,this._cache.getStoreAsync(t)];case 2:return(i=a.sent())?[4,this._request.send(o,{refresh_token:i})]:[2];case 3:return s=a.sent(),this._cache.removeStoreAsync(t),this._cache.removeStoreAsync(n),this._cache.removeStoreAsync(r),Rt.fire(xt.LOGIN_STATE_CHANGED),Rt.fire(xt.LOGIN_TYPE_CHANGED,{env:this._config.env,loginType:ae.NULL,persistence:this._config.persistence}),[2,s]}}))}))},e.prototype.onLoginStateChanged=function(e){return bt(this,void 0,void 0,(function(){var t,n=this;return wt(this,(function(r){switch(r.label){case 0:return Rt.on(xt.LOGIN_STATE_CHANGED,(function(){return bt(n,void 0,void 0,(function(){var t;return wt(this,(function(n){switch(n.label){case 0:return[4,this.getLoginState()];case 1:return t=n.sent(),e.call(this,t),[2]}}))}))})),[4,this.getLoginState()];case 1:return t=r.sent(),e.call(this,t),[2]}}))}))},e.prototype.onLoginStateExpired=function(e){Rt.on(xt.LOGIN_STATE_EXPIRED,e.bind(this))},e.prototype.onAccessTokenRefreshed=function(e){Rt.on(xt.ACCESS_TOKEN_REFRESHD,e.bind(this))},e.prototype.onAnonymousConverted=function(e){Rt.on(xt.ANONYMOUS_CONVERTED,e.bind(this))},e.prototype.onLoginTypeChanged=function(e){var t=this;Rt.on(xt.LOGIN_TYPE_CHANGED,(function(){return bt(t,void 0,void 0,(function(){var t;return wt(this,(function(n){switch(n.label){case 0:return[4,this.getLoginState()];case 1:return t=n.sent(),e.call(this,t),[2]}}))}))}))},e.prototype.hasLoginState=function(){if("async"!==this._cache.mode){var e=this._cache.keys.refreshTokenKey;if(this._cache.getStore(e)){var t=new Dt({envId:this._config.env,cache:this._cache,request:this._request});return t.checkLocalState(),t}return null}St(It.INVALID_OPERATION,"current platform's storage is asynchronous, please use getLoginState insteed")},e.prototype.getLoginState=function(){return bt(this,void 0,void 0,(function(){var e,t;return wt(this,(function(n){switch(n.label){case 0:return e=this._cache.keys.refreshTokenKey,[4,this._cache.getStoreAsync(e)];case 1:return n.sent()?[4,(t=new Dt({envId:this._config.env,cache:this._cache,request:this._request})).checkLocalStateAsync()]:[3,3];case 2:return n.sent(),[2,t];case 3:return[2,null]}}))}))},e.prototype.shouldRefreshAccessToken=function(e){this._request._shouldRefreshAccessTokenHook=e.bind(this)},e.prototype.getUserInfo=function(){return bt(this,void 0,void 0,(function(){var e;return wt(this,(function(t){switch(t.label){case 0:return"auth.getUserInfo",[4,this._request.send("auth.getUserInfo",{})];case 1:return(e=t.sent()).code?[2,e]:[2,vt(vt({},e.data),{requestId:e.seqId})]}}))}))},e.prototype.getAuthHeader=function(){var e=this._cache.keys,t=e.refreshTokenKey,n=e.accessTokenKey,r=this._cache.getStore(t);return{"x-cloudbase-credentials":this._cache.getStore(n)+"/@@/"+r}},e.prototype.getAuthHeaderAsync=function(){return bt(this,void 0,void 0,(function(){var e,t,n,r;return wt(this,(function(o){switch(o.label){case 0:return[4,this._request.refreshAccessToken()];case 1:return o.sent(),e=this._cache.keys,t=e.refreshTokenKey,n=e.accessTokenKey,[4,this._cache.getStoreAsync(t)];case 2:return r=o.sent(),[4,this._cache.getStoreAsync(n)];case 3:return[2,{"x-cloudbase-credentials":o.sent()+"/@@/"+r}]}}))}))},e.prototype._onLoginTypeChanged=function(e){return bt(this,void 0,void 0,(function(){var t,n,r;return wt(this,(function(o){switch(o.label){case 0:return t=e.data,n=t.loginType,r=t.persistence,t.env!==this._config.env?[2]:[4,this._cache.updatePersistenceAsync(r)];case 1:return o.sent(),[4,this._cache.setStoreAsync(this._cache.keys.loginTypeKey,n)];case 2:return o.sent(),[2]}}))}))},mt([Nt({title:"获取用户信息失败",messages:["请确认以下各项：","  1 - 调用 auth().getCurrenUser() 的语法或参数是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[]),_t("design:returntype",Promise)],e.prototype,"getCurrenUser",null),mt([Nt({title:"获取用户是否被占用失败",messages:["请确认以下各项：","  1 - 调用 auth().isUsernameRegistered() 的语法或参数是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[String]),_t("design:returntype",Promise)],e.prototype,"isUsernameRegistered",null),mt([Nt({title:"用户登出失败",messages:["请确认以下各项：","  1 - 调用 auth().signOut() 的语法或参数是否正确","  2 - 当前用户是否为匿名登录（匿名登录不支持signOut）","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[]),_t("design:returntype",Promise)],e.prototype,"signOut",null),mt([Nt({title:"获取本地登录态失败",messages:["请确认以下各项：","  1 - 调用 auth().getLoginState() 的语法或参数是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[]),_t("design:returntype",Promise)],e.prototype,"getLoginState",null),mt([Nt({title:"获取用户信息失败",messages:["请确认以下各项：","  1 - 是否已登录","  2 - 调用 auth().getUserInfo() 的语法或参数是否正确","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Tt]}),_t("design:type",Function),_t("design:paramtypes",[]),_t("design:returntype",Promise)],e.prototype,"getUserInfo",null),e}(),xt={LOGIN_STATE_CHANGED:"loginStateChanged",LOGIN_STATE_EXPIRED:"loginStateExpire",LOGIN_TYPE_CHANGED:"loginTypeChanged",ANONYMOUS_CONVERTED:"anonymousConverted",ACCESS_TOKEN_REFRESHD:"refreshAccessToken"},Ct={name:"auth",namespace:"auth",injectEvents:{bus:Rt,events:[xt.LOGIN_TYPE_CHANGED,xt.LOGIN_STATE_EXPIRED,xt.LOGIN_STATE_CHANGED,xt.ACCESS_TOKEN_REFRESHD,xt.ANONYMOUS_CONVERTED]},entity:function(e){if(void 0===e&&(e={persistence:"session"}),this.authInstance)return St(It.INVALID_OPERATION,"every cloudbase instance should has only one auth object"),this.authInstance;var t=this.platform,n=t.adapter,r=t.runtime,o=e.persistence||n.primaryStorage;o&&o!==this.config.persistence&&this.updateConfig({persistence:o});var i=this.config,s=i.env,a=i.persistence,u=i.debug;return this.authInstance=new Pt({env:s,persistence:a,debug:u,cache:this.cache,request:this.request,runtime:r}),this.authInstance}};try{cloudbase.registerComponent(Ct)}catch(e){}var Lt=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},kt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},Mt=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},jt=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Ut=a.constants.getSdkName,$t=a.constants.ERRORS,Ft=a.constants.COMMUNITY_SITE_URL,qt=a.utils.execCallback,Wt=a.helpers.catchErrorsDecorator,Yt={name:"functions",entity:{callFunction:(new(function(){function e(){}return e.prototype.callFunction=function(e,t){return Mt(this,void 0,void 0,(function(){var n,r,o,i,s,a,u,c,f,l,p,h;return jt(this,(function(d){switch(d.label){case 0:if(n=e.name,r=e.data,o=e.query,i=e.parse,s=e.search,!n)throw new Error(JSON.stringify({code:$t.INVALID_PARAMS,msg:"[functions.callFunction] invalid function name"}));try{a=r?JSON.stringify(r):""}catch(e){throw new Error(JSON.stringify({code:$t.INVALID_PARAMS,msg:"[functions.callFunction] invalid data"}))}u="functions.invokeFunction",c={inQuery:o,parse:i,search:s,function_name:n,request_data:a},f=this.request,d.label=1;case 1:return d.trys.push([1,3,,4]),[4,f.send(u,c)];case 2:if((l=d.sent()).code)return[2,qt(t,null,l)];if(p=l.data.response_data,i)return[2,qt(t,null,{result:p,requestId:l.requestId})];try{return p=JSON.parse(l.data.response_data),[2,qt(t,null,{result:p,requestId:l.requestId})]}catch(e){qt(t,new Error("["+Ut()+"]["+$t.INVALID_PARAMS+"][functions.callFunction] response data must be json"))}return[3,4];case 3:return h=d.sent(),qt(t,h),[3,4];case 4:return[2]}}))}))},Lt([Wt({customInfo:{className:"Cloudbase",methodName:"callFunction"},title:"函数调用失败",messages:["请确认以下各项：","  1 - 调用 callFunction() 的语法或参数是否正确","  2 - 当前环境下是否存在此函数","  3 - 函数安全规则是否限制了当前登录状态访问","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Ft]}),kt("design:type",Function),kt("design:paramtypes",[Object,Function]),kt("design:returntype",Promise)],e.prototype,"callFunction",null),e}())).callFunction}};try{cloudbase.registerComponent(Yt)}catch(e){}var Ht=function(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s},Kt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},Gt=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},Vt=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Jt=a.constants.getSdkName,zt=a.constants.ERRORS,Xt=a.constants.COMMUNITY_SITE_URL,Zt=a.utils.isArray,Qt=a.utils.isString,en=a.utils.isPalinObject,tn=a.utils.execCallback,nn=a.helpers.catchErrorsDecorator,rn=new(function(){function e(){}return e.prototype.uploadFile=function(e,t){return Gt(this,void 0,void 0,(function(){var n,r,o,i,s,a,u,c,f,l,p,h,d,y;return Vt(this,(function(g){switch(g.label){case 0:if(n=e.cloudPath,r=e.filePath,o=e.onUploadProgress,!Qt(n)||!r)throw new Error(JSON.stringify({code:zt.INVALID_PARAMS,msg:"[storage.uploadFile] invalid params"}));return"storage.getUploadMetadata",[4,(i=this.request).send("storage.getUploadMetadata",{path:n})];case 1:return s=g.sent(),a=s.data,u=a.url,c=a.authorization,f=a.token,l=a.fileId,p=a.cosFileId,h=s.requestId,d={key:n,signature:c,"x-cos-meta-fileid":p,success_action_status:"201","x-cos-security-token":f},[4,i.upload({url:u,data:d,file:r,name:n,onUploadProgress:o})];case 2:return 201===(y=g.sent()).statusCode?[2,tn(t,null,{fileID:l,requestId:h})]:[2,tn(t,new Error("["+Jt()+"]["+zt.OPERATION_FAIL+"][storage]:"+y.data))]}}))}))},e.prototype.getUploadMetadata=function(e,t){return Gt(this,void 0,void 0,(function(){var n,r,o,i,s;return Vt(this,(function(a){switch(a.label){case 0:if(n=e.cloudPath,!Qt(n))throw new Error(JSON.stringify({code:zt.INVALID_PARAMS,msg:"[storage.getUploadMetadata] invalid cloudPath"}));r=this.request,o="storage.getUploadMetadata",a.label=1;case 1:return a.trys.push([1,3,,4]),[4,r.send(o,{path:n})];case 2:return i=a.sent(),[2,tn(t,null,i)];case 3:return s=a.sent(),[2,tn(t,s)];case 4:return[2]}}))}))},e.prototype.deleteFile=function(e,t){return Gt(this,void 0,void 0,(function(){var n,r,o,i,s,a;return Vt(this,(function(u){switch(u.label){case 0:if(!(n=e.fileList)||!Zt(n)||0===n.length)throw new Error(JSON.stringify({code:zt.INVALID_PARAMS,msg:"[storage.deleteFile] fileList must not be empty"}));for(r=0,o=n;r<o.length;r++)if(!(i=o[r])||!Qt(i))throw new Error(JSON.stringify({code:zt.INVALID_PARAMS,msg:"[storage.deleteFile] fileID must be string"}));return"storage.batchDeleteFile",[4,this.request.send("storage.batchDeleteFile",{fileid_list:n})];case 1:return(s=u.sent()).code?[2,tn(t,null,s)]:(a={fileList:s.data.delete_list,requestId:s.requestId},[2,tn(t,null,a)])}}))}))},e.prototype.getTempFileURL=function(e,t){return Gt(this,void 0,void 0,(function(){var n,r,o,i,s,a;return Vt(this,(function(u){switch(u.label){case 0:if(!(n=e.fileList)||!Zt(n)||0===n.length)throw new Error(JSON.stringify({code:zt.INVALID_PARAMS,msg:"[storage.getTempFileURL] fileList must not be empty"}));for(r=[],o=0,i=n;o<i.length;o++)if(s=i[o],en(s)){if(!s.hasOwnProperty("fileID")||!s.hasOwnProperty("maxAge"))throw new Error(JSON.stringify({code:zt.INVALID_PARAMS,msg:"[storage.getTempFileURL] file info must include fileID and maxAge"}));r.push({fileid:s.fileID,max_age:s.maxAge})}else{if(!Qt(s))throw new Error(JSON.stringify({code:zt.INVALID_PARAMS,msg:"[storage.getTempFileURL] invalid fileList"}));r.push({fileid:s})}return"storage.batchGetDownloadUrl",[4,this.request.send("storage.batchGetDownloadUrl",{file_list:r})];case 1:return(a=u.sent()).code?[2,tn(t,null,a)]:[2,tn(t,null,{fileList:a.data.download_list,requestId:a.requestId})]}}))}))},e.prototype.downloadFile=function(e,t){return Gt(this,void 0,void 0,(function(){var n,r,o,i,s,a;return Vt(this,(function(u){switch(u.label){case 0:if(n=e.fileID,!Qt(n))throw new Error(JSON.stringify({code:zt.INVALID_PARAMS,msg:"[storage.getTempFileURL] fileID must be string"}));return[4,this.getTempFileURL.call(this,{fileList:[{fileID:n,maxAge:600}]})];case 1:return r=u.sent(),"SUCCESS"!==(o=r.fileList[0]).code?[2,tn(t,o)]:(i=this.request,s=encodeURI(o.download_url),[4,i.download({url:s})]);case 2:return a=u.sent(),[2,tn(t,null,a)]}}))}))},Ht([nn({customInfo:{className:"Cloudbase",methodName:"uploadFile"},title:"上传文件失败",messages:["请确认以下各项：","  1 - 调用 uploadFile() 的语法或参数是否正确","  2 - 当前域名是否在安全域名列表中：https://console.cloud.tencent.com/tcb/env/safety","  3 - 云存储安全规则是否限制了当前登录状态访问","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Xt]}),Kt("design:type",Function),Kt("design:paramtypes",[Object,Function]),Kt("design:returntype",Promise)],e.prototype,"uploadFile",null),Ht([nn({customInfo:{className:"Cloudbase",methodName:"getUploadMetadata"},title:"获取上传元信息失败",messages:["请确认以下各项：","  1 - 调用 getUploadMetadata() 的语法或参数是否正确","  2 - 当前域名是否在安全域名列表中：https://console.cloud.tencent.com/tcb/env/safety","  3 - 云存储安全规则是否限制了当前登录状态访问","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Xt]}),Kt("design:type",Function),Kt("design:paramtypes",[Object,Function]),Kt("design:returntype",Promise)],e.prototype,"getUploadMetadata",null),Ht([nn({customInfo:{className:"Cloudbase",methodName:"deleteFile"},title:"删除文件失败",messages:["请确认以下各项：","  1 - 调用 deleteFile() 的语法或参数是否正确","  2 - 当前域名是否在安全域名列表中：https://console.cloud.tencent.com/tcb/env/safety","  3 - 云存储安全规则是否限制了当前登录状态访问","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Xt]}),Kt("design:type",Function),Kt("design:paramtypes",[Object,Function]),Kt("design:returntype",Promise)],e.prototype,"deleteFile",null),Ht([nn({customInfo:{className:"Cloudbase",methodName:"getTempFileURL"},title:"获取文件下载链接",messages:["请确认以下各项：","  1 - 调用 getTempFileURL() 的语法或参数是否正确","  2 - 当前域名是否在安全域名列表中：https://console.cloud.tencent.com/tcb/env/safety","  3 - 云存储安全规则是否限制了当前登录状态访问","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Xt]}),Kt("design:type",Function),Kt("design:paramtypes",[Object,Function]),Kt("design:returntype",Promise)],e.prototype,"getTempFileURL",null),Ht([nn({customInfo:{className:"Cloudbase",methodName:"downloadFile"},title:"下载文件失败",messages:["请确认以下各项：","  1 - 调用 downloadFile() 的语法或参数是否正确","  2 - 当前域名是否在安全域名列表中：https://console.cloud.tencent.com/tcb/env/safety","  3 - 云存储安全规则是否限制了当前登录状态访问","如果问题依然存在，建议到官方问答社区提问或寻找帮助："+Xt]}),Kt("design:type",Function),Kt("design:paramtypes",[Object,Function]),Kt("design:returntype",Promise)],e.prototype,"downloadFile",null),e}()),on={name:"storage",entity:{uploadFile:rn.uploadFile,deleteFile:rn.deleteFile,getTempFileURL:rn.getTempFileURL,downloadFile:rn.downloadFile,getUploadMetadata:rn.getUploadMetadata}};try{cloudbase.registerComponent(on)}catch(e){}var sn=n(10),an=n.n(sn),un=n(11),cn=n.n(un),fn=n(12),ln=n.n(fn);function pn(e){return void 0===e&&(e=""),(e?e+"_":"")+ +new Date+"_"+Math.random()}var hn,dn=function(e){this.close=e.close,this.onChange=e.onChange,this.onError=e.onError,e.debug&&Object.defineProperty(this,"virtualClient",{get:function(){return e.virtualClient}})},yn=function(e){var t,n,r=e.id,o=e.docChanges,i=e.docs,s=e.msgType,a=e.type;Object.defineProperties(this,{id:{get:function(){return r},enumerable:!0},docChanges:{get:function(){return t||(t=JSON.parse(JSON.stringify(o))),t},enumerable:!0},docs:{get:function(){return n||(n=JSON.parse(JSON.stringify(i))),n},enumerable:!0},msgType:{get:function(){return s},enumerable:!0},type:{get:function(){return a},enumerable:!0}})},gn=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),vn=function(e){function t(t){var n=e.call(this,"Watch Error "+JSON.stringify(t.msgData)+" (requestid: "+t.requestId+")")||this;return n.isRealtimeErrorMessageError=!0,n.payload=t,n}return gn(t,e),t}(Error),mn=function(e){return null==e?void 0:e.isRealtimeErrorMessageError},_n=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type="timeout",t.payload=null,t.generic=!0,t}return gn(t,e),t}(Error),bn=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type="cancelled",t.payload=null,t.generic=!0,t}return gn(t,e),t}(Error),wn=function(e){function t(t){var n=e.call(this,t.errMsg)||this;return n.errCode="UNKNOWN_ERROR",Object.defineProperties(n,{message:{get:function(){return"errCode: "+this.errCode+" "+(An[this.errCode]||"")+" | errMsg: "+this.errMsg},set:function(e){this.errMsg=e}}}),n.errCode=t.errCode||"UNKNOWN_ERROR",n.errMsg=t.errMsg,n}return gn(t,e),Object.defineProperty(t.prototype,"message",{get:function(){return"errCode: "+this.errCode+" | errMsg: "+this.errMsg},set:function(e){this.errMsg=e},enumerable:!1,configurable:!0}),t}(Error),An={UNKNOWN_ERROR:"UNKNOWN_ERROR",SDK_DATABASE_REALTIME_LISTENER_INIT_WATCH_FAIL:"SDK_DATABASE_REALTIME_LISTENER_INIT_WATCH_FAIL",SDK_DATABASE_REALTIME_LISTENER_RECONNECT_WATCH_FAIL:"SDK_DATABASE_REALTIME_LISTENER_RECONNECT_WATCH_FAIL",SDK_DATABASE_REALTIME_LISTENER_REBUILD_WATCH_FAIL:"SDK_DATABASE_REALTIME_LISTENER_REBUILD_WATCH_FAIL",SDK_DATABASE_REALTIME_LISTENER_CLOSE_WATCH_FAIL:"SDK_DATABASE_REALTIME_LISTENER_CLOSE_WATCH_FAIL",SDK_DATABASE_REALTIME_LISTENER_SERVER_ERROR_MSG:"SDK_DATABASE_REALTIME_LISTENER_SERVER_ERROR_MSG",SDK_DATABASE_REALTIME_LISTENER_RECEIVE_INVALID_SERVER_DATA:"SDK_DATABASE_REALTIME_LISTENER_RECEIVE_INVALID_SERVER_DATA",SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_ERROR:"SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_ERROR",SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_CLOSED:"SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_CLOSED",SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL:"SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL",SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR:"SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR"},En=function(e){return void 0===e&&(e=0),new Promise((function(t){return setTimeout(t,e)}))},Sn=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},On=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},In=function(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r};!function(e){e.LOGGINGIN="LOGGINGIN",e.INITING="INITING",e.REBUILDING="REBUILDING",e.ACTIVE="ACTIVE",e.ERRORED="ERRORED",e.CLOSING="CLOSING",e.CLOSED="CLOSED",e.PAUSED="PAUSED",e.RESUMING="RESUMING"}(hn||(hn={}));var Tn=function(){function e(e){var t=this;this.watchStatus=hn.INITING,this._login=function(e,n){return Sn(t,void 0,void 0,(function(){var t;return On(this,(function(r){switch(r.label){case 0:return this.watchStatus=hn.LOGGINGIN,[4,this.login(e,n)];case 1:return t=r.sent(),this.envId||(this.envId=t.envId),[2,t]}}))}))},this.initWatch=function(e){return Sn(t,void 0,void 0,(function(){var t,n=this;return On(this,(function(r){switch(r.label){case 0:if(this._initWatchPromise)return[2,this._initWatchPromise];this._initWatchPromise=new Promise((function(t,r){return Sn(n,void 0,void 0,(function(){var n,o,i,s,a,u,c,f,l,p;return On(this,(function(h){switch(h.label){case 0:return h.trys.push([0,3,,4]),this.watchStatus===hn.PAUSED?(console.log("[realtime] initWatch cancelled on pause"),[2,t()]):[4,this._login(this.envId,e)];case 1:return n=h.sent().envId,this.watchStatus===hn.PAUSED?(console.log("[realtime] initWatch cancelled on pause"),[2,t()]):(this.watchStatus=hn.INITING,o={watchId:this.watchId,requestId:pn(),msgType:"INIT_WATCH",msgData:{envId:n,collName:this.collectionName,query:this.query,limit:this.limit,orderBy:this.orderBy}},[4,this.send({msg:o,waitResponse:!0,skipOnMessage:!0,timeout:1e4})]);case 2:if(i=h.sent(),s=i.msgData,a=s.events,u=s.currEvent,this.sessionInfo={queryID:i.msgData.queryID,currentEventId:u-1,currentDocs:[]},a.length>0){for(c=0,f=a;c<f.length;c++)f[c].ID=u;this.handleServerEvents(i)}else this.sessionInfo.currentEventId=u,l=new yn({id:u,docChanges:[],docs:[],type:"init"}),this.listener.onChange(l),this.scheduleSendACK();return this.onWatchStart(this,this.sessionInfo.queryID),this.watchStatus=hn.ACTIVE,this._availableRetries.INIT_WATCH=2,t(),[3,4];case 3:return p=h.sent(),this.handleWatchEstablishmentError(p,{operationName:"INIT_WATCH",resolve:t,reject:r}),[3,4];case 4:return[2]}}))}))})),t=!1,r.label=1;case 1:return r.trys.push([1,,3,4]),[4,this._initWatchPromise];case 2:return r.sent(),t=!0,[3,4];case 3:return this._initWatchPromise=void 0,[7];case 4:return console.log("[realtime] initWatch "+(t?"success":"fail")),[2]}}))}))},this.rebuildWatch=function(e){return Sn(t,void 0,void 0,(function(){var t,n=this;return On(this,(function(r){switch(r.label){case 0:if(this._rebuildWatchPromise)return[2,this._rebuildWatchPromise];this._rebuildWatchPromise=new Promise((function(t,r){return Sn(n,void 0,void 0,(function(){var n,o,i,s;return On(this,(function(a){switch(a.label){case 0:return a.trys.push([0,3,,4]),this.watchStatus===hn.PAUSED?(console.log("[realtime] rebuildWatch cancelled on pause"),[2,t()]):[4,this._login(this.envId,e)];case 1:if(n=a.sent().envId,!this.sessionInfo)throw new Error("can not rebuildWatch without a successful initWatch (lack of sessionInfo)");return this.watchStatus===hn.PAUSED?(console.log("[realtime] rebuildWatch cancelled on pause"),[2,t()]):(this.watchStatus=hn.REBUILDING,o={watchId:this.watchId,requestId:pn(),msgType:"REBUILD_WATCH",msgData:{envId:n,collName:this.collectionName,queryID:this.sessionInfo.queryID,eventID:this.sessionInfo.currentEventId}},[4,this.send({msg:o,waitResponse:!0,skipOnMessage:!1,timeout:1e4})]);case 2:return i=a.sent(),this.handleServerEvents(i),this.watchStatus=hn.ACTIVE,this._availableRetries.REBUILD_WATCH=2,t(),[3,4];case 3:return s=a.sent(),this.handleWatchEstablishmentError(s,{operationName:"REBUILD_WATCH",resolve:t,reject:r}),[3,4];case 4:return[2]}}))}))})),t=!1,r.label=1;case 1:return r.trys.push([1,,3,4]),[4,this._rebuildWatchPromise];case 2:return r.sent(),t=!0,[3,4];case 3:return this._rebuildWatchPromise=void 0,[7];case 4:return console.log("[realtime] rebuildWatch "+(t?"success":"fail")),[2]}}))}))},this.handleWatchEstablishmentError=function(e,n){return Sn(t,void 0,void 0,(function(){var t,r,o,i=this;return On(this,(function(s){return t="INIT_WATCH"===n.operationName,r=function(){i.closeWithError(new wn({errCode:t?An.SDK_DATABASE_REALTIME_LISTENER_INIT_WATCH_FAIL:An.SDK_DATABASE_REALTIME_LISTENER_REBUILD_WATCH_FAIL,errMsg:e})),n.reject(e)},o=function(e){i.useRetryTicket(n.operationName)?t?(i._initWatchPromise=void 0,n.resolve(i.initWatch(e))):(i._rebuildWatchPromise=void 0,n.resolve(i.rebuildWatch(e))):r()},this.handleCommonError(e,{onSignError:function(){return o(!0)},onTimeoutError:function(){return o(!1)},onNotRetryableError:r,onCancelledError:n.reject,onUnknownError:function(){return Sn(i,void 0,void 0,(function(){var e,t=this;return On(this,(function(r){switch(r.label){case 0:return r.trys.push([0,8,,9]),e=function(){return Sn(t,void 0,void 0,(function(){return On(this,(function(e){switch(e.label){case 0:return this.pause(),[4,this.onceWSConnected()];case 1:return e.sent(),o(!0),[2]}}))}))},this.isWSConnected()?[3,2]:[4,e()];case 1:return r.sent(),[3,7];case 2:return[4,En(100)];case 3:return r.sent(),this.watchStatus!==hn.PAUSED?[3,4]:(n.reject(new bn(n.operationName+" cancelled due to pause after unknownError")),[3,7]);case 4:return this.isWSConnected()?[3,6]:[4,e()];case 5:return r.sent(),[3,7];case 6:o(!1),r.label=7;case 7:return[3,9];case 8:return r.sent(),o(!0),[3,9];case 9:return[2]}}))}))}}),[2]}))}))},this.closeWatch=function(){return Sn(t,void 0,void 0,(function(){var e,t,n;return On(this,(function(r){switch(r.label){case 0:if(e=this.sessionInfo?this.sessionInfo.queryID:"",this.watchStatus!==hn.ACTIVE)return this.watchStatus=hn.CLOSED,this.onWatchClose(this,e),[2];r.label=1;case 1:return r.trys.push([1,3,4,5]),this.watchStatus=hn.CLOSING,t={watchId:this.watchId,requestId:pn(),msgType:"CLOSE_WATCH",msgData:null},[4,this.send({msg:t})];case 2:return r.sent(),this.sessionInfo=void 0,this.watchStatus=hn.CLOSED,[3,5];case 3:return n=r.sent(),this.closeWithError(new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_CLOSE_WATCH_FAIL,errMsg:n})),[3,5];case 4:return this.onWatchClose(this,e),[7];case 5:return[2]}}))}))},this.scheduleSendACK=function(){t.clearACKSchedule(),t._ackTimeoutId=setTimeout((function(){t._waitExpectedTimeoutId?t.scheduleSendACK():t.sendACK()}),1e4)},this.clearACKSchedule=function(){t._ackTimeoutId&&clearTimeout(t._ackTimeoutId)},this.sendACK=function(){return Sn(t,void 0,void 0,(function(){var e,t,n;return On(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),this.watchStatus!==hn.ACTIVE?(this.scheduleSendACK(),[2]):this.sessionInfo?(e={watchId:this.watchId,requestId:pn(),msgType:"CHECK_LAST",msgData:{queryID:this.sessionInfo.queryID,eventID:this.sessionInfo.currentEventId}},[4,this.send({msg:e})]):(console.warn("[realtime listener] can not send ack without a successful initWatch (lack of sessionInfo)"),[2]);case 1:return r.sent(),this.scheduleSendACK(),[3,3];case 2:if(t=r.sent(),mn(t))switch((n=t.payload).msgData.code){case"CHECK_LOGIN_FAILED":case"SIGN_EXPIRED_ERROR":case"SIGN_INVALID_ERROR":case"SIGN_PARAM_INVALID":return this.rebuildWatch(),[2];case"QUERYID_INVALID_ERROR":case"SYS_ERR":case"INVALIID_ENV":case"COLLECTION_PERMISSION_DENIED":return this.closeWithError(new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL,errMsg:n.msgData.code})),[2]}return this._availableRetries.CHECK_LAST&&this._availableRetries.CHECK_LAST>0?(this._availableRetries.CHECK_LAST--,this.scheduleSendACK()):this.closeWithError(new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL,errMsg:t})),[3,3];case 3:return[2]}}))}))},this.handleCommonError=function(e,t){if(mn(e)){switch(e.payload.msgData.code){case"CHECK_LOGIN_FAILED":case"SIGN_EXPIRED_ERROR":case"SIGN_INVALID_ERROR":case"SIGN_PARAM_INVALID":return void t.onSignError(e);case"QUERYID_INVALID_ERROR":case"SYS_ERR":case"INVALIID_ENV":case"COLLECTION_PERMISSION_DENIED":default:return void t.onNotRetryableError(e)}}else{if(function(e){return"timeout"===e.type}(e))return void t.onTimeoutError(e);if(function(e){return"cancelled"===e.type}(e))return void t.onCancelledError(e)}t.onUnknownError(e)},this.watchId="watchid_"+ +new Date+"_"+Math.random(),this.envId=e.envId,this.collectionName=e.collectionName,this.query=e.query,this.limit=e.limit,this.orderBy=e.orderBy,this.send=e.send,this.login=e.login,this.isWSConnected=e.isWSConnected,this.onceWSConnected=e.onceWSConnected,this.getWaitExpectedTimeoutLength=e.getWaitExpectedTimeoutLength,this.onWatchStart=e.onWatchStart,this.onWatchClose=e.onWatchClose,this.debug=e.debug,this._availableRetries={INIT_WATCH:2,REBUILD_WATCH:2,CHECK_LAST:2},this.listener=new dn({close:this.closeWatch,onChange:e.onChange,onError:e.onError,debug:this.debug,virtualClient:this}),this.initWatch()}return e.prototype.onMessage=function(e){var t=this;switch(this.watchStatus){case hn.PAUSED:if("ERROR"!==e.msgType)return;break;case hn.LOGGINGIN:case hn.INITING:case hn.REBUILDING:return void console.warn("[realtime listener] internal non-fatal error: unexpected message received while "+this.watchStatus);case hn.CLOSED:return void console.warn("[realtime listener] internal non-fatal error: unexpected message received when the watch has closed");case hn.ERRORED:return void console.warn("[realtime listener] internal non-fatal error: unexpected message received when the watch has ended with error")}if(this.sessionInfo)switch(this.scheduleSendACK(),e.msgType){case"NEXT_EVENT":console.warn("nextevent "+e.msgData.currEvent+" ignored",e),this.handleServerEvents(e);break;case"CHECK_EVENT":this.sessionInfo.currentEventId<e.msgData.currEvent&&(this.sessionInfo.expectEventId=e.msgData.currEvent,this.clearWaitExpectedEvent(),this._waitExpectedTimeoutId=setTimeout((function(){t.rebuildWatch()}),this.getWaitExpectedTimeoutLength()),console.log("[realtime] waitExpectedTimeoutLength "+this.getWaitExpectedTimeoutLength()));break;case"ERROR":this.closeWithError(new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_SERVER_ERROR_MSG,errMsg:e.msgData.code+" - "+e.msgData.message}));break;default:console.warn("[realtime listener] virtual client receive unexpected msg "+e.msgType+": ",e)}else console.warn("[realtime listener] internal non-fatal error: sessionInfo not found while message is received.")},e.prototype.closeWithError=function(e){this.watchStatus=hn.ERRORED,this.clearACKSchedule(),this.listener.onError(e),this.onWatchClose(this,this.sessionInfo&&this.sessionInfo.queryID||""),console.log("[realtime] client closed ("+this.collectionName+" "+this.query+") (watchId "+this.watchId+")")},e.prototype.pause=function(){this.watchStatus=hn.PAUSED,console.log("[realtime] client paused ("+this.collectionName+" "+this.query+") (watchId "+this.watchId+")")},e.prototype.resume=function(){return Sn(this,void 0,void 0,(function(){var e;return On(this,(function(t){switch(t.label){case 0:this.watchStatus=hn.RESUMING,console.log("[realtime] client resuming with "+(this.sessionInfo?"REBUILD_WATCH":"INIT_WATCH")+" ("+this.collectionName+" "+this.query+") ("+this.watchId+")"),t.label=1;case 1:return t.trys.push([1,3,,4]),[4,this.sessionInfo?this.rebuildWatch():this.initWatch()];case 2:return t.sent(),console.log("[realtime] client successfully resumed ("+this.collectionName+" "+this.query+") ("+this.watchId+")"),[3,4];case 3:return e=t.sent(),console.error("[realtime] client resume failed ("+this.collectionName+" "+this.query+") ("+this.watchId+")",e),[3,4];case 4:return[2]}}))}))},e.prototype.useRetryTicket=function(e){return!!(this._availableRetries[e]&&this._availableRetries[e]>0)&&(this._availableRetries[e]--,console.log("[realtime] "+e+" use a retry ticket, now only "+this._availableRetries[e]+" retry left"),!0)},e.prototype.handleServerEvents=function(e){return Sn(this,void 0,void 0,(function(){var t;return On(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),this.scheduleSendACK(),[4,this._handleServerEvents(e)];case 1:return n.sent(),this._postHandleServerEventsValidityCheck(e),[3,3];case 2:throw t=n.sent(),console.error("[realtime listener] internal non-fatal error: handle server events failed with error: ",t),t;case 3:return[2]}}))}))},e.prototype._handleServerEvents=function(e){return Sn(this,void 0,void 0,(function(){var t,n,r,o,i,s,a,u,c,f,l,p;return On(this,(function(h){switch(h.label){case 0:if(t=e.requestId,n=e.msgData.events,r=e.msgType,!n.length||!this.sessionInfo)return[2];o=this.sessionInfo;try{i=n.map(Nn)}catch(e){return this.closeWithError(new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_RECEIVE_INVALID_SERVER_DATA,errMsg:e})),[2]}s=In(o.currentDocs),a=!1,u=function(n,u){var f,l,p,h,d,y,g,v,m,_,b;return On(this,(function(w){switch(w.label){case 0:return f=i[n],o.currentEventId>=f.id?(!i[n-1]||f.id>i[n-1].id?console.warn("[realtime] duplicate event received, cur "+o.currentEventId+" but got "+f.id):console.error("[realtime listener] server non-fatal error: events out of order (the latter event's id is smaller than that of the former) (requestId "+t+")"),[2,"continue"]):[3,1];case 1:if(o.currentEventId!==f.id-1)return[3,2];switch(f.dataType){case"update":if(!f.doc)switch(f.queueType){case"update":case"dequeue":if(l=s.find((function(e){return e._id===f.docId}))){if(y=ln()(l),f.updatedFields)for(d in f.updatedFields)an()(y,d,f.updatedFields[d]);if(f.removedFields)for(p=0,h=f.removedFields;p<h.length;p++)d=h[p],cn()(y,d);f.doc=y}else console.error("[realtime listener] internal non-fatal server error: unexpected update dataType event where no doc is associated.");break;case"enqueue":throw g=new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR,errMsg:'HandleServerEvents: full doc is not provided with dataType="update" and queueType="enqueue" (requestId '+e.requestId+")"}),c.closeWithError(g),g}break;case"replace":if(!f.doc)throw g=new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR,errMsg:'HandleServerEvents: full doc is not provided with dataType="replace" (requestId '+e.requestId+")"}),c.closeWithError(g),g;break;case"remove":(y=s.find((function(e){return e._id===f.docId})))?f.doc=y:console.error("[realtime listener] internal non-fatal server error: unexpected remove event where no doc is associated.");break;case"limit":if(!f.doc)switch(f.queueType){case"dequeue":(y=s.find((function(e){return e._id===f.docId})))?f.doc=y:console.error("[realtime listener] internal non-fatal server error: unexpected limit dataType event where no doc is associated.");break;case"enqueue":throw g=new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR,errMsg:'HandleServerEvents: full doc is not provided with dataType="limit" and queueType="enqueue" (requestId '+e.requestId+")"}),c.closeWithError(g),g}}switch(f.queueType){case"init":a?s.push(f.doc):(a=!0,s=[f.doc]);break;case"enqueue":s.push(f.doc);break;case"dequeue":(v=s.findIndex((function(e){return e._id===f.docId})))>-1?s.splice(v,1):console.error("[realtime listener] internal non-fatal server error: unexpected dequeue event where no doc is associated.");break;case"update":(v=s.findIndex((function(e){return e._id===f.docId})))>-1?s[v]=f.doc:console.error("[realtime listener] internal non-fatal server error: unexpected queueType update event where no doc is associated.")}return(n===u-1||i[n+1]&&i[n+1].id!==f.id)&&(m=In(s),_=i.slice(0,n+1).filter((function(e){return e.id===f.id})),c.sessionInfo.currentEventId=f.id,c.sessionInfo.currentDocs=s,b=new yn({id:f.id,docChanges:_,docs:m,msgType:r}),c.listener.onChange(b)),[3,4];case 2:return console.warn("[realtime listener] event received is out of order, cur "+c.sessionInfo.currentEventId+" but got "+f.id),[4,c.rebuildWatch()];case 3:return w.sent(),[2,{value:void 0}];case 4:return[2]}}))},c=this,f=0,l=i.length,h.label=1;case 1:return f<l?[5,u(f,l)]:[3,4];case 2:if("object"==typeof(p=h.sent()))return[2,p.value];h.label=3;case 3:return f++,[3,1];case 4:return[2]}}))}))},e.prototype._postHandleServerEventsValidityCheck=function(e){this.sessionInfo?(this.sessionInfo.expectEventId&&this.sessionInfo.currentEventId>=this.sessionInfo.expectEventId&&this.clearWaitExpectedEvent(),this.sessionInfo.currentEventId<e.msgData.currEvent&&console.warn("[realtime listener] internal non-fatal error: client eventId does not match with server event id after server event handling")):console.error("[realtime listener] internal non-fatal error: sessionInfo lost after server event handling, this should never occur")},e.prototype.clearWaitExpectedEvent=function(){this._waitExpectedTimeoutId&&(clearTimeout(this._waitExpectedTimeoutId),this._waitExpectedTimeoutId=void 0)},e}();function Nn(e){var t={id:e.ID,dataType:e.DataType,queueType:e.QueueType,docId:e.DocID,doc:e.Doc&&"{}"!==e.Doc?JSON.parse(e.Doc):void 0};return"update"===e.DataType&&(e.UpdatedFields&&(t.updatedFields=JSON.parse(e.UpdatedFields)),(e.removedFields||e.RemovedFields)&&(t.removedFields=JSON.parse(e.removedFields))),t}var Rn,Bn={1e3:{code:1e3,name:"Normal Closure",description:"Normal closure; the connection successfully completed whatever purpose for which it was created."},1001:{code:1001,name:"Going Away",description:"The endpoint is going away, either because of a server failure or because the browser is navigating away from the page that opened the connection."},1002:{code:1002,name:"Protocol Error",description:"The endpoint is terminating the connection due to a protocol error."},1003:{code:1003,name:"Unsupported Data",description:"The connection is being terminated because the endpoint received data of a type it cannot accept (for example, a text-only endpoint received binary data)."},1005:{code:1005,name:"No Status Received",description:"Indicates that no status code was provided even though one was expected."},1006:{code:1006,name:"Abnormal Closure",description:"Used to indicate that a connection was closed abnormally (that is, with no close frame being sent) when a status code is expected."},1007:{code:1007,name:"Invalid frame payload data",description:"The endpoint is terminating the connection because a message was received that contained inconsistent data (e.g., non-UTF-8 data within a text message)."},1008:{code:1008,name:"Policy Violation",description:"The endpoint is terminating the connection because it received a message that violates its policy. This is a generic status code, used when codes 1003 and 1009 are not suitable."},1009:{code:1009,name:"Message too big",description:"The endpoint is terminating the connection because a data frame was received that is too large."},1010:{code:1010,name:"Missing Extension",description:"The client is terminating the connection because it expected the server to negotiate one or more extension, but the server didn't."},1011:{code:1011,name:"Internal Error",description:"The server is terminating the connection because it encountered an unexpected condition that prevented it from fulfilling the request."},1012:{code:1012,name:"Service Restart",description:"The server is terminating the connection because it is restarting."},1013:{code:1013,name:"Try Again Later",description:"The server is terminating the connection due to a temporary condition, e.g. it is overloaded and is casting off some of its clients."},1014:{code:1014,name:"Bad Gateway",description:"The server was acting as a gateway or proxy and received an invalid response from the upstream server. This is similar to 502 HTTP Status Code."},1015:{code:1015,name:"TLS Handshake",description:"Indicates that the connection was closed due to a failure to perform a TLS handshake (e.g., the server certificate can't be verified)."},3e3:{code:3e3,name:"Reconnect WebSocket",description:"The client is terminating the connection because it wants to reconnect"},3001:{code:3001,name:"No Realtime Listeners",description:"The client is terminating the connection because no more realtime listeners exist"},3002:{code:3002,name:"Heartbeat Ping Error",description:"The client is terminating the connection due to its failure in sending heartbeat messages"},3003:{code:3003,name:"Heartbeat Pong Timeout Error",description:"The client is terminating the connection because no heartbeat response is received from the server"},3050:{code:3050,name:"Server Close",description:"The client is terminating the connection because no heartbeat response is received from the server"}};!function(e){e[e.NormalClosure=1e3]="NormalClosure",e[e.GoingAway=1001]="GoingAway",e[e.ProtocolError=1002]="ProtocolError",e[e.UnsupportedData=1003]="UnsupportedData",e[e.NoStatusReceived=1005]="NoStatusReceived",e[e.AbnormalClosure=1006]="AbnormalClosure",e[e.InvalidFramePayloadData=1007]="InvalidFramePayloadData",e[e.PolicyViolation=1008]="PolicyViolation",e[e.MessageTooBig=1009]="MessageTooBig",e[e.MissingExtension=1010]="MissingExtension",e[e.InternalError=1011]="InternalError",e[e.ServiceRestart=1012]="ServiceRestart",e[e.TryAgainLater=1013]="TryAgainLater",e[e.BadGateway=1014]="BadGateway",e[e.TLSHandshake=1015]="TLSHandshake",e[e.ReconnectWebSocket=3e3]="ReconnectWebSocket",e[e.NoRealtimeListeners=3001]="NoRealtimeListeners",e[e.HeartbeatPingError=3002]="HeartbeatPingError",e[e.HeartbeatPongTimeoutError=3003]="HeartbeatPongTimeoutError",e[e.NoAuthentication=3050]="NoAuthentication"}(Rn||(Rn={}));var Dn=function(e,t){var n=Bn[e],r=n?n.name+", code "+e+", reason "+(t||n.description):"code "+e;return new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_CLOSED,errMsg:r})},Pn=null,xn="web";function Cn(){return xn}var Ln,kn,Mn=function(){return(Mn=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},jn=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},Un=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},$n=1,Fn=function(){function e(e){var t=this;this._virtualWSClient=new Set,this._queryIdClientMap=new Map,this._watchIdClientMap=new Map,this._pingFailed=0,this._pongMissed=0,this._logins=new Map,this._wsReadySubsribers=[],this._wsResponseWait=new Map,this._rttObserved=[],this.send=function(e){return jn(t,void 0,void 0,(function(){var t=this;return Un(this,(function(n){return[2,new Promise((function(n,r){return jn(t,void 0,void 0,(function(){var t,o,i,s,a,u,c,f=this;return Un(this,(function(l){switch(l.label){case 0:o=!1,i=!1,s=function(e){o=!0,t&&clearTimeout(t),n(e)},a=function(e){i=!0,t&&clearTimeout(t),r(e)},e.timeout&&(t=setTimeout((function(){return jn(f,void 0,void 0,(function(){return Un(this,(function(e){switch(e.label){case 0:return o&&i?[3,2]:[4,En(0)];case 1:e.sent(),o&&i||a(new _n("wsclient.send timedout")),e.label=2;case 2:return[2]}}))}))}),e.timeout)),l.label=1;case 1:return l.trys.push([1,8,,9]),this._wsInitPromise?[4,this._wsInitPromise]:[3,3];case 2:l.sent(),l.label=3;case 3:if(!this._ws)return a(new Error("invalid state: ws connection not exists, can not send message")),[2];if(this._ws.readyState!==$n)return a(new Error("ws readyState invalid: "+this._ws.readyState+", can not send message")),[2];e.waitResponse&&this._wsResponseWait.set(e.msg.requestId,{resolve:s,reject:a,skipOnMessage:e.skipOnMessage}),l.label=4;case 4:return l.trys.push([4,6,,7]),[4,this._ws.send(JSON.stringify(e.msg))];case 5:return l.sent(),e.waitResponse||s(),[3,7];case 6:return(u=l.sent())&&(a(u),e.waitResponse&&this._wsResponseWait.delete(e.msg.requestId)),[3,7];case 7:return[3,9];case 8:return c=l.sent(),a(c),[3,9];case 9:return[2]}}))}))}))]}))}))},this.closeAllClients=function(e){t._virtualWSClient.forEach((function(t){t.closeWithError(e)}))},this.pauseClients=function(e){(e||t._virtualWSClient).forEach((function(e){e.pause()}))},this.resumeClients=function(e){(e||t._virtualWSClient).forEach((function(e){e.resume()}))},this.initWebSocketConnection=function(e,n){return void 0===n&&(n=t._maxReconnect),jn(t,void 0,void 0,(function(){var t=this;return Un(this,(function(r){switch(r.label){case 0:if(e&&this._reconnectState)return[2];if(e&&(this._reconnectState=!0),this._wsInitPromise)return[2,this._wsInitPromise];e&&this.pauseClients(),this.close(Rn.ReconnectWebSocket),this._wsInitPromise=new Promise((function(r,o){return jn(t,void 0,void 0,(function(){var t,i,s=this;return Un(this,(function(a){switch(a.label){case 0:return a.trys.push([0,6,,11]),[4,this.getWsSign()];case 1:return t=a.sent(),[4,new Promise((function(e){var n=t.wsUrl||"wss://tcb-ws.tencentcloudapi.com",r=Pn;s._ws=r?new r(n):new WebSocket(n),e()}))];case 2:return a.sent(),this._ws.connect?[4,this._ws.connect()]:[3,4];case 3:a.sent(),a.label=4;case 4:return[4,this.initWebSocketEvent()];case 5:return a.sent(),r(),e&&(this.resumeClients(),this._reconnectState=!1),[3,11];case 6:return i=a.sent(),console.error("[realtime] initWebSocketConnection connect fail",i),n>0?(!0,this._wsInitPromise=void 0,[4,En(this._reconnectInterval)]):[3,9];case 7:a.sent(),e&&(this._reconnectState=!1),a.label=8;case 8:return r(this.initWebSocketConnection(e,n-1)),[3,10];case 9:o(i),e&&this.closeAllClients(new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_RECONNECT_WATCH_FAIL,errMsg:i})),a.label=10;case 10:return[3,11];case 11:return[2]}}))}))})),r.label=1;case 1:return r.trys.push([1,3,4,5]),[4,this._wsInitPromise];case 2:return r.sent(),this._wsReadySubsribers.forEach((function(e){return(0,e.resolve)()})),[3,5];case 3:return r.sent(),this._wsReadySubsribers.forEach((function(e){return(0,e.reject)()})),[3,5];case 4:return this._wsInitPromise=void 0,this._wsReadySubsribers=[],[7];case 5:return[2]}}))}))},this.initWebSocketEvent=function(){return new Promise((function(e,n){if(!t._ws)throw new Error("can not initWebSocketEvent, ws not exists");var r=!1;t._ws.onopen=function(t){console.warn("[realtime] ws event: open",t),r=!0,e()},t._ws.onerror=function(e){t._logins=new Map,r?(console.error("[realtime] ws event: error",e),t.clearHeartbeat(),t._virtualWSClient.forEach((function(t){return t.closeWithError(new wn({errCode:An.SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_ERROR,errMsg:e}))}))):(console.error("[realtime] ws open failed with ws event: error",e),n(e))},t._ws.onclose=function(e){switch(console.warn("[realtime] ws event: close",e),t._logins=new Map,t.clearHeartbeat(),e.code){case Rn.ReconnectWebSocket:case Rn.NoRealtimeListeners:break;case Rn.HeartbeatPingError:case Rn.HeartbeatPongTimeoutError:case Rn.NormalClosure:case Rn.AbnormalClosure:t._maxReconnect>0?t.initWebSocketConnection(!0,t._maxReconnect):t.closeAllClients(Dn(e.code));break;case Rn.NoAuthentication:t.closeAllClients(Dn(e.code,e.reason));break;default:t._maxReconnect>0?t.initWebSocketConnection(!0,t._maxReconnect):t.closeAllClients(Dn(e.code))}},t._ws.onmessage=function(e){var n,r=e.data;t.heartbeat();try{n=JSON.parse(r)}catch(e){throw new Error("[realtime] onMessage parse res.data error: "+e)}if("ERROR"===n.msgType){var o=null;t._virtualWSClient.forEach((function(e){e.watchId===n.watchId&&(o=e)})),o&&o.listener.onError(n)}var i=t._wsResponseWait.get(n.requestId);if(i){try{"ERROR"===n.msgType?i.reject(new vn(n)):i.resolve(n)}catch(e){console.error("ws onMessage responseWaitSpec.resolve(msg) errored:",e)}finally{t._wsResponseWait.delete(n.requestId)}if(i.skipOnMessage)return}if("PONG"!==n.msgType){var s=n.watchId&&t._watchIdClientMap.get(n.watchId);if(s)s.onMessage(n);else switch(console.error("[realtime] no realtime listener found responsible for watchId "+n.watchId+": ",n),n.msgType){case"INIT_EVENT":case"NEXT_EVENT":case"CHECK_EVENT":(s=t._queryIdClientMap.get(n.msgData.queryID))&&s.onMessage(n);break;default:for(var a=0,u=Array.from(t._watchIdClientMap.entries());a<u.length;a++){u[a][1].onMessage(n);break}}}else if(t._lastPingSendTS){var c=Date.now()-t._lastPingSendTS;if(c>1e4)return void console.warn("[realtime] untrusted rtt observed: "+c);t._rttObserved.length>=3&&t._rttObserved.splice(0,t._rttObserved.length-3+1),t._rttObserved.push(c)}},t.heartbeat()}))},this.isWSConnected=function(){return Boolean(t._ws&&t._ws.readyState===$n)},this.onceWSConnected=function(){return jn(t,void 0,void 0,(function(){var e=this;return Un(this,(function(t){return this.isWSConnected()?[2]:this._wsInitPromise?[2,this._wsInitPromise]:[2,new Promise((function(t,n){e._wsReadySubsribers.push({resolve:t,reject:n})}))]}))}))},this.webLogin=function(e,n){return jn(t,void 0,void 0,(function(){var t,r,o,i,s,a,u,c,f=this;return Un(this,(function(l){switch(l.label){case 0:if(!n)if(e){if(t=this._logins.get(e)){if(t.loggedIn&&t.loginResult)return[2,t.loginResult];if(t.loggingInPromise)return[2,t.loggingInPromise]}}else if(null==(r=this._logins.get(""))?void 0:r.loggingInPromise)return[2,r.loggingInPromise];o=new Promise((function(e,t){return jn(f,void 0,void 0,(function(){var n,r,o,i,s;return Un(this,(function(a){switch(a.label){case 0:return a.trys.push([0,3,,4]),[4,this.getWsSign()];case 1:return n=a.sent(),r={envId:n.envId||"",accessToken:"",referrer:"web",sdkVersion:"",dataVersion:""},o={watchId:void 0,requestId:pn(),msgType:"LOGIN",msgData:r,exMsgData:{runtime:Cn(),signStr:n.signStr,secretVersion:n.secretVersion}},[4,this.send({msg:o,waitResponse:!0,skipOnMessage:!0,timeout:5e3})];case 2:return(i=a.sent()).msgData.code?t(new Error(i.msgData.code+" "+i.msgData.message)):e({envId:n.envId}),[3,4];case 3:return s=a.sent(),t(s),[3,4];case 4:return[2]}}))}))})),i=e&&this._logins.get(e),s=Date.now(),i?(i.loggedIn=!1,i.loggingInPromise=o,i.loginStartTS=s):(i={loggedIn:!1,loggingInPromise:o,loginStartTS:s},this._logins.set(e||"",i)),l.label=1;case 1:return l.trys.push([1,3,,4]),[4,o];case 2:if(a=l.sent(),(u=e&&this._logins.get(e))&&u===i&&u.loginStartTS===s)return i.loggedIn=!0,i.loggingInPromise=void 0,i.loginStartTS=void 0,i.loginResult=a,[2,a];if(u){if(u.loggedIn&&u.loginResult)return[2,u.loginResult];if(u.loggingInPromise)return[2,u.loggingInPromise];throw new Error("ws unexpected login info")}throw new Error("ws login info reset");case 3:throw c=l.sent(),i.loggedIn=!1,i.loggingInPromise=void 0,i.loginStartTS=void 0,i.loginResult=void 0,c;case 4:return[2]}}))}))},this.getWsSign=function(){return jn(t,void 0,void 0,(function(){var e,t,n,r,o,i,s;return Un(this,(function(a){switch(a.label){case 0:return this._wsSign&&this._wsSign.expiredTs>Date.now()?[2,this._wsSign]:(e=Date.now()+6e4,[4,this._context.appConfig.request.send("auth.wsWebSign",{runtime:Cn()})]);case 1:if((t=a.sent()).code)throw new Error("[tcb-js-sdk] 获取实时数据推送登录票据失败: "+t.code);if(t.data)return n=t.data,r=n.signStr,o=n.wsUrl,i=n.secretVersion,s=n.envId,[2,{signStr:r,wsUrl:o,secretVersion:i,envId:s,expiredTs:e}];throw new Error("[tcb-js-sdk] 获取实时数据推送登录票据失败")}}))}))},this.getWaitExpectedTimeoutLength=function(){return t._rttObserved.length?t._rttObserved.reduce((function(e,t){return e+t}))/t._rttObserved.length*1.5:5e3},this.ping=function(){return jn(t,void 0,void 0,(function(){var e;return Un(this,(function(t){switch(t.label){case 0:return e={watchId:void 0,requestId:pn(),msgType:"PING",msgData:null},[4,this.send({msg:e})];case 1:return t.sent(),[2]}}))}))},this.onWatchStart=function(e,n){t._queryIdClientMap.set(n,e)},this.onWatchClose=function(e,n){n&&t._queryIdClientMap.delete(n),t._watchIdClientMap.delete(e.watchId),t._virtualWSClient.delete(e),t._virtualWSClient.size||t.close(Rn.NoRealtimeListeners)},this._maxReconnect=e.maxReconnect||5,this._reconnectInterval=e.reconnectInterval||1e4,this._context=e.context}return e.prototype.clearHeartbeat=function(){this._pingTimeoutId&&clearTimeout(this._pingTimeoutId),this._pongTimeoutId&&clearTimeout(this._pongTimeoutId)},e.prototype.close=function(e){this.clearHeartbeat(),this._ws&&(this._ws.close(e,Bn[e].name),this._ws=void 0)},e.prototype.watch=function(e){this._ws||this._wsInitPromise||this.initWebSocketConnection(!1);var t=new Tn(Mn(Mn({},e),{send:this.send,login:this.webLogin,isWSConnected:this.isWSConnected,onceWSConnected:this.onceWSConnected,getWaitExpectedTimeoutLength:this.getWaitExpectedTimeoutLength,onWatchStart:this.onWatchStart,onWatchClose:this.onWatchClose,debug:!0}));return this._virtualWSClient.add(t),this._watchIdClientMap.set(t.watchId,t),t.listener},e.prototype.heartbeat=function(e){var t=this;this.clearHeartbeat(),this._pingTimeoutId=setTimeout((function(){return jn(t,void 0,void 0,(function(){var e=this;return Un(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),this._ws&&this._ws.readyState===$n?(this._lastPingSendTS=Date.now(),[4,this.ping()]):[2];case 1:return t.sent(),this._pingFailed=0,this._pongTimeoutId=setTimeout((function(){console.error("pong timed out"),e._pongMissed<2?(e._pongMissed++,e.heartbeat(!0)):e.initWebSocketConnection(!0)}),this._context.appConfig.realtimePongWaitTimeout),[3,3];case 2:return t.sent(),this._pingFailed<2?(this._pingFailed++,this.heartbeat()):this.close(Rn.HeartbeatPingError),[3,3];case 3:return[2]}}))}))}),e?0:this._context.appConfig.realtimePingInterval)},e}(),qn={target:"database",entity:function(){var e,t=this.platform,n=t.adapter,r=t.runtime;e=n.wsClass,Pn=e,function(e){xn=e}(r)}},Wn={name:"realtime",IIFE:!0,entity:function(){this.prototype.wsClientClass=Fn}};try{cloudbase.registerComponent(Wn),cloudbase.registerHook(qn)}catch(e){}!function(e){e.DocIDError="文档ID不合法",e.CollNameError="集合名称不合法",e.OpStrError="操作符不合法",e.DirectionError="排序字符不合法",e.IntergerError="must be integer",e.QueryParamTypeError="查询参数必须为对象",e.QueryParamValueError="查询参数对象值不能均为undefined"}(kn||(kn={}));var Yn,Hn="Number",Kn="Object",Gn="Array",Vn="GeoPoint",Jn="GeoLineString",zn="GeoPolygon",Xn="GeoMultiPoint",Zn="GeoMultiLineString",Qn="GeoMultiPolygon",er="Date",tr="ServerDate",nr="BsonDate",rr=["desc","asc"],or=["<","<=","==",">=",">"];!function(e){e.lt="<",e.gt=">",e.lte="<=",e.gte=">=",e.eq="=="}(Yn||(Yn={}));var ir;(Ln={})[Yn.eq]="$eq",Ln[Yn.lt]="$lt",Ln[Yn.lte]="$lte",Ln[Yn.gt]="$gt",Ln[Yn.gte]="$gte";!function(e){e.WHERE="WHERE",e.DOC="DOC"}(ir||(ir={}));var sr=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ar=[],ur={},cr=function(e){function t(t,n){if(n!==ur)throw new TypeError("InternalSymbol cannot be constructed with new operator");return e.call(this,t)||this}return sr(t,e),t.for=function(e){for(var n=0,r=ar.length;n<r;n++)if(ar[n].target===e)return ar[n].instance;var o=new t(e,ur);return ar.push({target:e,instance:o}),o},t}((function(e){Object.defineProperties(this,{target:{enumerable:!1,writable:!1,configurable:!1,value:e}})})),fr=cr,lr=fr.for("UNSET_FIELD_NAME"),pr=fr.for("UPDATE_COMMAND"),hr=fr.for("QUERY_COMMAND"),dr=fr.for("LOGIC_COMMAND"),yr=fr.for("GEO_POINT"),gr=fr.for("SYMBOL_GEO_LINE_STRING"),vr=fr.for("SYMBOL_GEO_POLYGON"),mr=fr.for("SYMBOL_GEO_MULTI_POINT"),_r=fr.for("SYMBOL_GEO_MULTI_LINE_STRING"),br=fr.for("SYMBOL_GEO_MULTI_POLYGON"),wr=fr.for("SERVER_DATE"),Ar=fr.for("REGEXP"),Er=function(e){return Object.prototype.toString.call(e).slice(8,-1).toLowerCase()},Sr=function(e){return"object"===Er(e)},Or=function(e){return"number"===Er(e)},Ir=function(e){return Array.isArray(e)},Tr=function(e){return"date"===Er(e)},Nr=function(e){return"regexp"===Er(e)},Rr=function(e){return e&&e._internalType instanceof cr},Br=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},Dr=function(){function e(e){if(!Ir(e))throw new TypeError('"points" must be of type Point[]. Received type '+typeof e);if(e.length<2)throw new Error('"points" must contain 2 points at least');e.forEach((function(e){if(!(e instanceof Kr))throw new TypeError('"points" must be of type Point[]. Received type '+typeof e+"[]")})),this.points=e}return e.prototype.parse=function(e){var t;return(t={})[e]={type:"LineString",coordinates:this.points.map((function(e){return e.toJSON().coordinates}))},t},e.prototype.toJSON=function(){return{type:"LineString",coordinates:this.points.map((function(e){return e.toJSON().coordinates}))}},e.validate=function(e){var t,n;if("LineString"!==e.type||!Ir(e.coordinates))return!1;try{for(var r=Br(e.coordinates),o=r.next();!o.done;o=r.next()){var i=o.value;if(!Or(i[0])||!Or(i[1]))return!1}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}return!0},e.isClosed=function(e){var t=e.points[0],n=e.points[e.points.length-1];if(t.latitude===n.latitude&&t.longitude===n.longitude)return!0},Object.defineProperty(e.prototype,"_internalType",{get:function(){return gr},enumerable:!0,configurable:!0}),e}(),Pr=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},xr=function(){function e(e){if(!Ir(e))throw new TypeError('"lines" must be of type LineString[]. Received type '+typeof e);if(0===e.length)throw new Error("Polygon must contain 1 linestring at least");e.forEach((function(e){if(!(e instanceof Dr))throw new TypeError('"lines" must be of type LineString[]. Received type '+typeof e+"[]");if(!Dr.isClosed(e))throw new Error("LineString "+e.points.map((function(e){return e.toReadableString()}))+" is not a closed cycle")})),this.lines=e}return e.prototype.parse=function(e){var t;return(t={})[e]={type:"Polygon",coordinates:this.lines.map((function(e){return e.points.map((function(e){return[e.longitude,e.latitude]}))}))},t},e.prototype.toJSON=function(){return{type:"Polygon",coordinates:this.lines.map((function(e){return e.points.map((function(e){return[e.longitude,e.latitude]}))}))}},e.validate=function(e){var t,n,r,o;if("Polygon"!==e.type||!Ir(e.coordinates))return!1;try{for(var i=Pr(e.coordinates),s=i.next();!s.done;s=i.next()){var a=s.value;if(!this.isCloseLineString(a))return!1;try{for(var u=(r=void 0,Pr(a)),c=u.next();!c.done;c=u.next()){var f=c.value;if(!Or(f[0])||!Or(f[1]))return!1}}catch(e){r={error:e}}finally{try{c&&!c.done&&(o=u.return)&&o.call(u)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return!0},e.isCloseLineString=function(e){var t=e[0],n=e[e.length-1];return t[0]===n[0]&&t[1]===n[1]},Object.defineProperty(e.prototype,"_internalType",{get:function(){return br},enumerable:!0,configurable:!0}),e}(),Cr=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},Lr=function(){function e(e){if(!Ir(e))throw new TypeError('"points" must be of type Point[]. Received type '+typeof e);if(0===e.length)throw new Error('"points" must contain 1 point at least');e.forEach((function(e){if(!(e instanceof Kr))throw new TypeError('"points" must be of type Point[]. Received type '+typeof e+"[]")})),this.points=e}return e.prototype.parse=function(e){var t;return(t={})[e]={type:"MultiPoint",coordinates:this.points.map((function(e){return e.toJSON().coordinates}))},t},e.prototype.toJSON=function(){return{type:"MultiPoint",coordinates:this.points.map((function(e){return e.toJSON().coordinates}))}},e.validate=function(e){var t,n;if("MultiPoint"!==e.type||!Ir(e.coordinates))return!1;try{for(var r=Cr(e.coordinates),o=r.next();!o.done;o=r.next()){var i=o.value;if(!Or(i[0])||!Or(i[1]))return!1}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}return!0},Object.defineProperty(e.prototype,"_internalType",{get:function(){return mr},enumerable:!0,configurable:!0}),e}(),kr=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},Mr=function(){function e(e){if(!Ir(e))throw new TypeError('"lines" must be of type LineString[]. Received type '+typeof e);if(0===e.length)throw new Error("Polygon must contain 1 linestring at least");e.forEach((function(e){if(!(e instanceof Dr))throw new TypeError('"lines" must be of type LineString[]. Received type '+typeof e+"[]")})),this.lines=e}return e.prototype.parse=function(e){var t;return(t={})[e]={type:"MultiLineString",coordinates:this.lines.map((function(e){return e.points.map((function(e){return[e.longitude,e.latitude]}))}))},t},e.prototype.toJSON=function(){return{type:"MultiLineString",coordinates:this.lines.map((function(e){return e.points.map((function(e){return[e.longitude,e.latitude]}))}))}},e.validate=function(e){var t,n,r,o;if("MultiLineString"!==e.type||!Ir(e.coordinates))return!1;try{for(var i=kr(e.coordinates),s=i.next();!s.done;s=i.next()){var a=s.value;try{for(var u=(r=void 0,kr(a)),c=u.next();!c.done;c=u.next()){var f=c.value;if(!Or(f[0])||!Or(f[1]))return!1}}catch(e){r={error:e}}finally{try{c&&!c.done&&(o=u.return)&&o.call(u)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return!0},Object.defineProperty(e.prototype,"_internalType",{get:function(){return _r},enumerable:!0,configurable:!0}),e}(),jr=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},Ur=function(){function e(e){var t,n;if(!Ir(e))throw new TypeError('"polygons" must be of type Polygon[]. Received type '+typeof e);if(0===e.length)throw new Error("MultiPolygon must contain 1 polygon at least");try{for(var r=jr(e),o=r.next();!o.done;o=r.next()){var i=o.value;if(!(i instanceof xr))throw new TypeError('"polygon" must be of type Polygon[]. Received type '+typeof i+"[]")}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}this.polygons=e}return e.prototype.parse=function(e){var t;return(t={})[e]={type:"MultiPolygon",coordinates:this.polygons.map((function(e){return e.lines.map((function(e){return e.points.map((function(e){return[e.longitude,e.latitude]}))}))}))},t},e.prototype.toJSON=function(){return{type:"MultiPolygon",coordinates:this.polygons.map((function(e){return e.lines.map((function(e){return e.points.map((function(e){return[e.longitude,e.latitude]}))}))}))}},e.validate=function(e){var t,n,r,o,i,s;if("MultiPolygon"!==e.type||!Ir(e.coordinates))return!1;try{for(var a=jr(e.coordinates),u=a.next();!u.done;u=a.next()){var c=u.value;try{for(var f=(r=void 0,jr(c)),l=f.next();!l.done;l=f.next()){var p=l.value;try{for(var h=(i=void 0,jr(p)),d=h.next();!d.done;d=h.next()){var y=d.value;if(!Or(y[0])||!Or(y[1]))return!1}}catch(e){i={error:e}}finally{try{d&&!d.done&&(s=h.return)&&s.call(h)}finally{if(i)throw i.error}}}}catch(e){r={error:e}}finally{try{l&&!l.done&&(o=f.return)&&o.call(f)}finally{if(r)throw r.error}}}}catch(e){t={error:e}}finally{try{u&&!u.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return!0},Object.defineProperty(e.prototype,"_internalType",{get:function(){return vr},enumerable:!0,configurable:!0}),e}(),$r=function(){function e(e){var t=(void 0===e?{}:e).offset,n=void 0===t?0:t;this.offset=n}return Object.defineProperty(e.prototype,"_internalType",{get:function(){return wr},enumerable:!0,configurable:!0}),e.prototype.parse=function(){return{$date:{offset:this.offset}}},e}();function Fr(e){return new $r(e)}var qr,Wr=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},Yr=function(){function e(){}return e.formatResDocumentData=function(t){return t.map((function(t){return e.formatField(t)}))},e.formatField=function(t){var n=Object.keys(t),r={};return Array.isArray(t)&&(r=[]),n.forEach((function(n){var o,i=t[n];switch(e.whichType(i)){case Vn:o=new Kr(i.coordinates[0],i.coordinates[1]);break;case Jn:o=new Dr(i.coordinates.map((function(e){return new Kr(e[0],e[1])})));break;case zn:o=new xr(i.coordinates.map((function(e){return new Dr(e.map((function(e){var t=Wr(e,2),n=t[0],r=t[1];return new Kr(n,r)})))})));break;case Xn:o=new Lr(i.coordinates.map((function(e){return new Kr(e[0],e[1])})));break;case Zn:o=new Mr(i.coordinates.map((function(e){return new Dr(e.map((function(e){var t=Wr(e,2),n=t[0],r=t[1];return new Kr(n,r)})))})));break;case Qn:o=new Ur(i.coordinates.map((function(e){return new xr(e.map((function(e){return new Dr(e.map((function(e){var t=Wr(e,2),n=t[0],r=t[1];return new Kr(n,r)})))})))})));break;case er:o=new Date(1e3*i.$timestamp);break;case Kn:case Gn:o=e.formatField(i);break;case tr:o=new Date(i.$date);break;default:o=i}Array.isArray(r)?r.push(o):r[n]=o})),r},e.whichType=function(e){var t=Object.prototype.toString.call(e).slice(8,-1);if(t===er)return nr;if(t===Kn){if(e instanceof Kr)return Vn;if(e instanceof Date)return er;if(e instanceof $r)return tr;e.$timestamp?t=er:e.$date?t=tr:Kr.validate(e)?t=Vn:Dr.validate(e)?t=Jn:xr.validate(e)?t=zn:Lr.validate(e)?t=Xn:Mr.validate(e)?t=Zn:Ur.validate(e)&&(t=Qn)}return t},e.generateDocId=function(){for(var e="ABCDEFabcdef0123456789",t="",n=0;n<24;n++)t+=e.charAt(Math.floor(Math.random()*e.length));return t},e}(),Hr=function(){function e(){}return e.isGeopoint=function(e,t){if(Yr.whichType(t)!==Hn)throw new Error("Geo Point must be number type");var n=Math.abs(t);if("latitude"===e&&n>90)throw new Error("latitude should be a number ranges from -90 to 90");if("longitude"===e&&n>180)throw new Error("longitude should be a number ranges from -180 to 180");return!0},e.isInteger=function(e,t){if(!Number.isInteger(t))throw new Error(e+kn.IntergerError);return!0},e.isFieldOrder=function(e){if(-1===rr.indexOf(e))throw new Error(kn.DirectionError);return!0},e.isFieldPath=function(e){if(!/^[a-zA-Z0-9-_\.]/.test(e))throw new Error;return!0},e.isOperator=function(e){if(-1===or.indexOf(e))throw new Error(kn.OpStrError);return!0},e.isCollName=function(e){if(!/^[a-zA-Z0-9]([a-zA-Z0-9-_]){1,32}$/.test(e))throw new Error(kn.CollNameError);return!0},e.isDocID=function(e){if(!/^([a-fA-F0-9]){24}$/.test(e))throw new Error(kn.DocIDError);return!0},e}(),Kr=function(){function e(e,t){Hr.isGeopoint("longitude",e),Hr.isGeopoint("latitude",t),this.longitude=e,this.latitude=t}return e.prototype.parse=function(e){var t;return(t={})[e]={type:"Point",coordinates:[this.longitude,this.latitude]},t},e.prototype.toJSON=function(){return{type:"Point",coordinates:[this.longitude,this.latitude]}},e.prototype.toReadableString=function(){return"["+this.longitude+","+this.latitude+"]"},e.validate=function(e){return"Point"===e.type&&Ir(e.coordinates)&&Hr.isGeopoint("longitude",e.coordinates[0])&&Hr.isGeopoint("latitude",e.coordinates[1])},Object.defineProperty(e.prototype,"_internalType",{get:function(){return yr},enumerable:!0,configurable:!0}),e}(),Gr=function(){var e;if(!Promise){(e=function(){}).promise={};var t=function(){throw new Error('Your Node runtime does support ES6 Promises. Set "global.Promise" to your preferred implementation of promises.')};return Object.defineProperty(e.promise,"then",{get:t}),Object.defineProperty(e.promise,"catch",{get:t}),e}var n=new Promise((function(t,n){e=function(e,r){return e?n(e):t(r)}}));return e.promise=n,e};!function(e){e.SET="set",e.REMOVE="remove",e.INC="inc",e.MUL="mul",e.PUSH="push",e.PULL="pull",e.PULL_ALL="pullAll",e.POP="pop",e.SHIFT="shift",e.UNSHIFT="unshift",e.ADD_TO_SET="addToSet",e.BIT="bit",e.RENAME="rename",e.MAX="max",e.MIN="min"}(qr||(qr={}));var Vr=function(){function e(e,t,n){this._internalType=pr,Object.defineProperties(this,{_internalType:{enumerable:!1,configurable:!1}}),this.operator=e,this.operands=t,this.fieldName=n||lr}return e.prototype._setFieldName=function(t){return new e(this.operator,this.operands,t)},e}();function Jr(e){return e&&e instanceof Vr&&e._internalType===pr}var zr;!function(e){e.AND="and",e.OR="or",e.NOT="not",e.NOR="nor"}(zr||(zr={}));var Xr=function(){function e(e,t,n){if(this._internalType=dr,Object.defineProperties(this,{_internalType:{enumerable:!1,configurable:!1}}),this.operator=e,this.operands=t,this.fieldName=n||lr,this.fieldName!==lr)if(Array.isArray(t)){t=t.slice(),this.operands=t;for(var r=0,o=t.length;r<o;r++){(Zr(i=t[r])||no(i))&&(t[r]=i._setFieldName(this.fieldName))}}else{var i;(Zr(i=t)||no(i))&&(t=i._setFieldName(this.fieldName))}}return e.prototype._setFieldName=function(t){var n=this.operands.map((function(n){return n instanceof e?n._setFieldName(t):n}));return new e(this.operator,n,t)},e.prototype.and=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=Array.isArray(arguments[0])?arguments[0]:Array.from(arguments);return r.unshift(this),new e(zr.AND,r,this.fieldName)},e.prototype.or=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=Array.isArray(arguments[0])?arguments[0]:Array.from(arguments);return r.unshift(this),new e(zr.OR,r,this.fieldName)},e}();function Zr(e){return e&&e instanceof Xr&&e._internalType===dr}var Qr,eo=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(e){e.EQ="eq",e.NEQ="neq",e.GT="gt",e.GTE="gte",e.LT="lt",e.LTE="lte",e.IN="in",e.NIN="nin",e.ALL="all",e.ELEM_MATCH="elemMatch",e.EXISTS="exists",e.SIZE="size",e.MOD="mod",e.GEO_NEAR="geoNear",e.GEO_WITHIN="geoWithin",e.GEO_INTERSECTS="geoIntersects"}(Qr||(Qr={}));var to=function(e){function t(t,n,r){var o=e.call(this,t,n,r)||this;return o.operator=t,o._internalType=hr,o}return eo(t,e),t.prototype.toJSON=function(){var e,t;switch(this.operator){case Qr.IN:case Qr.NIN:return(e={})["$"+this.operator]=this.operands,e;default:return(t={})["$"+this.operator]=this.operands[0],t}},t.prototype._setFieldName=function(e){return new t(this.operator,this.operands,e)},t.prototype.eq=function(e){var n=new t(Qr.EQ,[e],this.fieldName);return this.and(n)},t.prototype.neq=function(e){var n=new t(Qr.NEQ,[e],this.fieldName);return this.and(n)},t.prototype.gt=function(e){var n=new t(Qr.GT,[e],this.fieldName);return this.and(n)},t.prototype.gte=function(e){var n=new t(Qr.GTE,[e],this.fieldName);return this.and(n)},t.prototype.lt=function(e){var n=new t(Qr.LT,[e],this.fieldName);return this.and(n)},t.prototype.lte=function(e){var n=new t(Qr.LTE,[e],this.fieldName);return this.and(n)},t.prototype.in=function(e){var n=new t(Qr.IN,e,this.fieldName);return this.and(n)},t.prototype.nin=function(e){var n=new t(Qr.NIN,e,this.fieldName);return this.and(n)},t.prototype.geoNear=function(e){if(!(e.geometry instanceof Kr))throw new TypeError('"geometry" must be of type Point. Received type '+typeof e.geometry);if(void 0!==e.maxDistance&&!Or(e.maxDistance))throw new TypeError('"maxDistance" must be of type Number. Received type '+typeof e.maxDistance);if(void 0!==e.minDistance&&!Or(e.minDistance))throw new TypeError('"minDistance" must be of type Number. Received type '+typeof e.minDistance);var n=new t(Qr.GEO_NEAR,[e],this.fieldName);return this.and(n)},t.prototype.geoWithin=function(e){if(!(e.geometry instanceof Ur||e.geometry instanceof xr))throw new TypeError('"geometry" must be of type Polygon or MultiPolygon. Received type '+typeof e.geometry);var n=new t(Qr.GEO_WITHIN,[e],this.fieldName);return this.and(n)},t.prototype.geoIntersects=function(e){if(!(e.geometry instanceof Kr||e.geometry instanceof Dr||e.geometry instanceof xr||e.geometry instanceof Lr||e.geometry instanceof Mr||e.geometry instanceof Ur))throw new TypeError('"geometry" must be of type Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon. Received type '+typeof e.geometry);var n=new t(Qr.GEO_INTERSECTS,[e],this.fieldName);return this.and(n)},t}(Xr);function no(e){return e&&e instanceof to&&e._internalType===hr}function ro(e){return no(e)}var oo={};for(var io in Qr)oo[io]="$"+io;for(var io in zr)oo[io]="$"+io;for(var io in qr)oo[io]="$"+io;function so(e){return oo[e]||"$"+e}oo[Qr.NEQ]="$ne",oo[qr.REMOVE]="$unset",oo[qr.SHIFT]="$pop",oo[qr.UNSHIFT]="$push";var ao=function(){return(ao=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},uo=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},co=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(uo(arguments[t]));return e};function fo(e){return function e(t,n){if(!Rr(t)){if(Tr(t))return{$date:+t};if(Nr(t))return{$regex:t.source,$options:t.flags};if(Ir(t))return t.map((function(t){if(n.indexOf(t)>-1)throw new Error("Cannot convert circular structure to JSON");return e(t,co(n,[t]))}));if(Sr(t)){var r=ao({},t);for(var o in r){if(n.indexOf(r[o])>-1)throw new Error("Cannot convert circular structure to JSON");r[o]=e(r[o],co(n,[r[o]]))}return r}return t}switch(t._internalType){case yr:return t.toJSON();case wr:case Ar:return t.parse();default:return t.toJSON?t.toJSON():t}}(e,[e])}var lo=function(){return(lo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},po=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},ho=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(po(arguments[t]));return e};function yo(e,t,n,r){var o=lo({},e);for(var i in e)if(!/^\$/.test(i)){var s=e[i];if(s&&Sr(s)&&!t(s)){if(r.indexOf(s)>-1)throw new Error("Cannot convert circular structure to JSON");var a=yo(s,t,ho(n,[i]),ho(r,[s]));o[i]=a;var u=!1;for(var c in a)/^\$/.test(c)?u=!0:(o[i+"."+c]=a[c],delete o[i][c]);u||delete o[i]}}return o}function go(e){return yo(e,mo,[],[e])}function vo(e,t,n){for(var r in t[n]||delete e[n],t)e[r]?Ir(e[r])?e[r].push(t[r]):Sr(e[r])?Sr(t[r])?Object.assign(e[r],t[r]):(console.warn("unmergable condition, query is object but condition is "+Er(t)+", can only overwrite",t,n),e[r]=t[r]):(console.warn("to-merge query is of type "+Er(e)+", can only overwrite",e,t,n),e[r]=t[r]):e[r]=t[r]}function mo(e){return Rr(e)||Tr(e)||Nr(e)}function _o(e){return fo(e)}var bo=function(){function e(){}return e.encode=function(t){return(new e).encodeUpdate(t)},e.prototype.encodeUpdate=function(e){return Jr(e)?this.encodeUpdateCommand(e):"object"===Er(e)?this.encodeUpdateObject(e):e},e.prototype.encodeUpdateCommand=function(e){if(e.fieldName===lr)throw new Error("Cannot encode a comparison command with unset field name");switch(e.operator){case qr.PUSH:case qr.PULL:case qr.PULL_ALL:case qr.POP:case qr.SHIFT:case qr.UNSHIFT:case qr.ADD_TO_SET:return this.encodeArrayUpdateCommand(e);default:return this.encodeFieldUpdateCommand(e)}},e.prototype.encodeFieldUpdateCommand=function(e){var t,n,r,o,i=so(e.operator);switch(e.operator){case qr.REMOVE:return(t={})[i]=((n={})[e.fieldName]="",n),t;default:return(r={})[i]=((o={})[e.fieldName]=e.operands[0],o),r}},e.prototype.encodeArrayUpdateCommand=function(e){var t,n,r,o,i,s,a,u,c,f,l=so(e.operator);switch(e.operator){case qr.PUSH:var p=void 0;return p=Ir(e.operands)?{$each:e.operands.map(_o)}:e.operands,(t={})[l]=((n={})[e.fieldName]=p,n),t;case qr.UNSHIFT:p={$each:e.operands.map(_o),$position:0};return(r={})[l]=((o={})[e.fieldName]=p,o),r;case qr.POP:return(i={})[l]=((s={})[e.fieldName]=1,s),i;case qr.SHIFT:return(a={})[l]=((u={})[e.fieldName]=-1,u),a;default:return(c={})[l]=((f={})[e.fieldName]=_o(e.operands),f),c}},e.prototype.encodeUpdateObject=function(e){var t=go(e);for(var n in t)if(!/^\$/.test(n)){var r=t[n];if(Jr(r)){t[n]=r._setFieldName(n),vo(t,this.encodeUpdateCommand(t[n]),n)}else{t[n]=r=_o(r);var o=new Vr(qr.SET,[r],n);vo(t,this.encodeUpdateCommand(o),n)}}return t},e}(),wo={};function Ao(e){if(!ti.wsClientClass)throw new Error("to use realtime you must import realtime module first");var t=e.config.env;return wo[t]||(wo[t]=new ti.wsClientClass({context:{appConfig:{docSizeLimit:1e3,realtimePingInterval:1e4,realtimePongWaitTimeout:5e3,request:new ti.reqClass(e.config)}}})),wo[t]}var Eo=function(){return(Eo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},So=function(){function e(e,t,n,r){var o=this;void 0===r&&(r={}),this.watch=function(e){return Ao(o._db).watch(Eo(Eo({},e),{envId:o._db.config.env,collectionName:o._coll,query:JSON.stringify({_id:o.id})}))},this._db=e,this._coll=t,this.id=n,this.request=new ti.reqClass(this._db.config),this.projection=r}return e.prototype.create=function(e,t){t=t||Gr();var n={collectionName:this._coll,data:fo(e)};return this.id&&(n._id=this.id),this.request.send("database.addDocument",n).then((function(e){e.code?t(0,e):t(0,{id:e.data._id,requestId:e.requestId})})).catch((function(e){t(e)})),t.promise},e.prototype.set=function(e,t){if(t=t||Gr(),!this.id)return Promise.resolve({code:"INVALID_PARAM",message:"docId不能为空"});if(!e||"object"!=typeof e)return Promise.resolve({code:"INVALID_PARAM",message:"参数必需是非空对象"});if(e.hasOwnProperty("_id"))return Promise.resolve({code:"INVALID_PARAM",message:"不能更新_id的值"});var n=!1,r=function(e){if("object"==typeof e)for(var t in e)e[t]instanceof Vr?n=!0:"object"==typeof e[t]&&r(e[t])};if(r(e),n)return Promise.resolve({code:"DATABASE_REQUEST_FAILED",message:"update operator complicit"});var o={collectionName:this._coll,queryType:ir.DOC,data:fo(e),multi:!1,merge:!1,upsert:!0};return this.id&&(o.query={_id:this.id}),this.request.send("database.updateDocument",o).then((function(e){e.code?t(0,e):t(0,{updated:e.data.updated,upsertedId:e.data.upserted_id,requestId:e.requestId})})).catch((function(e){t(e)})),t.promise},e.prototype.update=function(e,t){if(t=t||Gr(),!e||"object"!=typeof e)return Promise.resolve({code:"INVALID_PARAM",message:"参数必需是非空对象"});if(e.hasOwnProperty("_id"))return Promise.resolve({code:"INVALID_PARAM",message:"不能更新_id的值"});var n={_id:this.id},r={collectionName:this._coll,data:bo.encode(e),query:n,queryType:ir.DOC,multi:!1,merge:!0,upsert:!1};return this.request.send("database.updateDocument",r).then((function(e){e.code?t(0,e):t(0,{updated:e.data.updated,upsertedId:e.data.upserted_id,requestId:e.requestId})})).catch((function(e){t(e)})),t.promise},e.prototype.remove=function(e){e=e||Gr();var t={_id:this.id},n={collectionName:this._coll,query:t,queryType:ir.DOC,multi:!1};return this.request.send("database.deleteDocument",n).then((function(t){t.code?e(0,t):e(0,{deleted:t.data.deleted,requestId:t.requestId})})).catch((function(t){e(t)})),e.promise},e.prototype.get=function(e){e=e||Gr();var t={_id:this.id},n={collectionName:this._coll,query:t,queryType:ir.DOC,multi:!1,projection:this.projection};return this.request.send("database.queryDocument",n).then((function(t){if(t.code)e(0,t);else{var n=Yr.formatResDocumentData(t.data.list);e(0,{data:n,requestId:t.requestId,total:t.TotalCount,limit:t.Limit,offset:t.Offset})}})).catch((function(t){e(t)})),e.promise},e.prototype.field=function(t){for(var n in t)t[n]?t[n]=1:t[n]=0;return new e(this._db,this._coll,this.id,t)},e}(),Oo=function(){function e(){}return e.encode=function(e){return(new Io).encodeQuery(e)},e}(),Io=function(){function e(){}return e.prototype.encodeQuery=function(e,t){var n;return mo(e)?Zr(e)?this.encodeLogicCommand(e):no(e)?this.encodeQueryCommand(e):((n={})[t]=this.encodeQueryObject(e),n):Sr(e)?this.encodeQueryObject(e):e},e.prototype.encodeRegExp=function(e){return{$regex:e.source,$options:e.flags}},e.prototype.encodeLogicCommand=function(e){var t,n,r,o,i,s,a,u=this;switch(e.operator){case zr.NOR:case zr.AND:case zr.OR:var c=so(e.operator),f=e.operands.map((function(t){return u.encodeQuery(t,e.fieldName)}));return(t={})[c]=f,t;case zr.NOT:c=so(e.operator);var l=e.operands[0];if(Nr(l))return(n={})[e.fieldName]=((r={})[c]=this.encodeRegExp(l),r),n;f=this.encodeQuery(l)[e.fieldName];return(o={})[e.fieldName]=((i={})[c]=f,i),o;default:c=so(e.operator);if(1===e.operands.length){var p=this.encodeQuery(e.operands[0]);return(s={})[c]=p,s}f=e.operands.map(this.encodeQuery.bind(this));return(a={})[c]=f,a}},e.prototype.encodeQueryCommand=function(e){return ro(e),this.encodeComparisonCommand(e)},e.prototype.encodeComparisonCommand=function(e){var t,n,r,o,i,s,a,u,c;if(e.fieldName===lr)throw new Error("Cannot encode a comparison command with unset field name");var f=so(e.operator);switch(e.operator){case Qr.EQ:case Qr.NEQ:case Qr.LT:case Qr.LTE:case Qr.GT:case Qr.GTE:case Qr.ELEM_MATCH:case Qr.EXISTS:case Qr.SIZE:case Qr.MOD:return(t={})[e.fieldName]=((n={})[f]=_o(e.operands[0]),n),t;case Qr.IN:case Qr.NIN:case Qr.ALL:return(r={})[e.fieldName]=((o={})[f]=_o(e.operands),o),r;case Qr.GEO_NEAR:var l=e.operands[0];return(i={})[e.fieldName]={$nearSphere:{$geometry:l.geometry.toJSON(),$maxDistance:l.maxDistance,$minDistance:l.minDistance}},i;case Qr.GEO_WITHIN:l=e.operands[0];return(s={})[e.fieldName]={$geoWithin:{$geometry:l.geometry.toJSON()}},s;case Qr.GEO_INTERSECTS:l=e.operands[0];return(a={})[e.fieldName]={$geoIntersects:{$geometry:l.geometry.toJSON()}},a;default:return(u={})[e.fieldName]=((c={})[f]=_o(e.operands[0]),c),u}},e.prototype.encodeQueryObject=function(e){var t=go(e);for(var n in t){var r=t[n];if(Zr(r)){t[n]=r._setFieldName(n);var o=this.encodeLogicCommand(t[n]);this.mergeConditionAfterEncode(t,o,n)}else if(ro(r)){t[n]=r._setFieldName(n);o=this.encodeComparisonCommand(t[n]);this.mergeConditionAfterEncode(t,o,n)}else mo(r)&&(t[n]=_o(r))}return t},e.prototype.mergeConditionAfterEncode=function(e,t,n){for(var r in t[n]||delete e[n],t)e[r]?Ir(e[r])?e[r]=e[r].concat(t[r]):Sr(e[r])?Sr(t[r])?Object.assign(e,t):(console.warn("unmergable condition, query is object but condition is "+Er(t)+", can only overwrite",t,n),e[r]=t[r]):(console.warn("to-merge query is of type "+Er(e)+", can only overwrite",e,t,n),e[r]=t[r]):e[r]=t[r]},e}(),To=function(){return(To=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},No=function(){function e(e,t,n,r,o){var i=this;this.watch=function(e){return Ao(i._db).watch(To(To({},e),{envId:i._db.config.env,collectionName:i._coll,query:JSON.stringify(i._fieldFilters||{}),limit:i._queryOptions.limit,orderBy:i._fieldOrders?i._fieldOrders.reduce((function(e,t){return e[t.field]=t.direction,e}),{}):void 0}))},this._db=e,this._coll=t,this._fieldFilters=n,this._fieldOrders=r||[],this._queryOptions=o||{},this._request=new ti.reqClass(this._db.config)}return e.prototype.get=function(e){e=e||Gr();var t=[];this._fieldOrders&&this._fieldOrders.forEach((function(e){t.push(e)}));var n={collectionName:this._coll,queryType:ir.WHERE};return this._fieldFilters&&(n.query=this._fieldFilters),t.length>0&&(n.order=t),this._queryOptions.offset&&(n.offset=this._queryOptions.offset),this._queryOptions.limit?n.limit=this._queryOptions.limit<1e3?this._queryOptions.limit:1e3:n.limit=100,this._queryOptions.projection&&(n.projection=this._queryOptions.projection),this._request.send("database.queryDocument",n).then((function(t){if(t.code)e(0,t);else{var n={data:Yr.formatResDocumentData(t.data.list),requestId:t.requestId};t.TotalCount&&(n.total=t.TotalCount),t.Limit&&(n.limit=t.Limit),t.Offset&&(n.offset=t.Offset),e(0,n)}})).catch((function(t){e(t)})),e.promise},e.prototype.count=function(e){e=e||Gr();var t={collectionName:this._coll,queryType:ir.WHERE};return this._fieldFilters&&(t.query=this._fieldFilters),this._request.send("database.countDocument",t).then((function(t){t.code?e(0,t):e(0,{requestId:t.requestId,total:t.data.total})})).catch((function(t){e(t)})),e.promise},e.prototype.where=function(t){if("Object"!==Object.prototype.toString.call(t).slice(8,-1))throw Error(kn.QueryParamTypeError);var n=Object.keys(t),r=n.some((function(e){return void 0!==t[e]}));if(n.length&&!r)throw Error(kn.QueryParamValueError);return new e(this._db,this._coll,Oo.encode(t),this._fieldOrders,this._queryOptions)},e.prototype.orderBy=function(t,n){Hr.isFieldPath(t),Hr.isFieldOrder(n);var r={field:t,direction:n},o=this._fieldOrders.concat(r);return new e(this._db,this._coll,this._fieldFilters,o,this._queryOptions)},e.prototype.limit=function(t){Hr.isInteger("limit",t);var n=To({},this._queryOptions);return n.limit=t,new e(this._db,this._coll,this._fieldFilters,this._fieldOrders,n)},e.prototype.skip=function(t){Hr.isInteger("offset",t);var n=To({},this._queryOptions);return n.offset=t,new e(this._db,this._coll,this._fieldFilters,this._fieldOrders,n)},e.prototype.update=function(e,t){if(t=t||Gr(),!e||"object"!=typeof e)return Promise.resolve({code:"INVALID_PARAM",message:"参数必需是非空对象"});if(e.hasOwnProperty("_id"))return Promise.resolve({code:"INVALID_PARAM",message:"不能更新_id的值"});var n={collectionName:this._coll,query:this._fieldFilters,queryType:ir.WHERE,multi:!0,merge:!0,upsert:!1,data:bo.encode(e)};return this._request.send("database.updateDocument",n).then((function(e){e.code?t(0,e):t(0,{requestId:e.requestId,updated:e.data.updated,upsertId:e.data.upsert_id})})).catch((function(e){t(e)})),t.promise},e.prototype.field=function(t){for(var n in t)t[n]?"object"!=typeof t[n]&&(t[n]=1):t[n]=0;var r=To({},this._queryOptions);return r.projection=t,new e(this._db,this._coll,this._fieldFilters,this._fieldOrders,r)},e.prototype.remove=function(e){e=e||Gr(),Object.keys(this._queryOptions).length>0&&console.warn("`offset`, `limit` and `projection` are not supported in remove() operation"),this._fieldOrders.length>0&&console.warn("`orderBy` is not supported in remove() operation");var t={collectionName:this._coll,query:Oo.encode(this._fieldFilters),queryType:ir.WHERE,multi:!0};return this._request.send("database.deleteDocument",t).then((function(t){t.code?e(0,t):e(0,{requestId:t.requestId,deleted:t.data.deleted})})).catch((function(t){e(t)})),e.promise},e}(),Ro=n(1),Bo=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},Do=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Po=function(){function e(e,t){this._stages=[],e&&t&&(this._db=e,this._request=new ti.reqClass(this._db.config),this._collectionName=t)}return e.prototype.end=function(){return Bo(this,void 0,void 0,(function(){var e;return Do(this,(function(t){switch(t.label){case 0:if(!this._collectionName||!this._db)throw new Error("Aggregation pipeline cannot send request");return[4,this._request.send("database.aggregate",{collectionName:this._collectionName,stages:this._stages})];case 1:return(e=t.sent())&&e.data&&e.data.list?[2,{requestId:e.requestId,data:JSON.parse(e.data.list).map(Ro.a.parse)}]:[2,e]}}))}))},e.prototype.unwrap=function(){return this._stages},e.prototype.done=function(){return this._stages.map((function(e){var t,n=e.stageKey,r=e.stageValue;return(t={})[n]=JSON.parse(r),t}))},e.prototype._pipe=function(e,t){return this._stages.push({stageKey:"$"+e,stageValue:JSON.stringify(t)}),this},e.prototype.addFields=function(e){return this._pipe("addFields",e)},e.prototype.bucket=function(e){return this._pipe("bucket",e)},e.prototype.bucketAuto=function(e){return this._pipe("bucketAuto",e)},e.prototype.count=function(e){return this._pipe("count",e)},e.prototype.geoNear=function(e){return this._pipe("geoNear",e)},e.prototype.group=function(e){return this._pipe("group",e)},e.prototype.limit=function(e){return this._pipe("limit",e)},e.prototype.match=function(e){return this._pipe("match",Oo.encode(e))},e.prototype.project=function(e){return this._pipe("project",e)},e.prototype.lookup=function(e){return this._pipe("lookup",e)},e.prototype.replaceRoot=function(e){return this._pipe("replaceRoot",e)},e.prototype.sample=function(e){return this._pipe("sample",e)},e.prototype.skip=function(e){return this._pipe("skip",e)},e.prototype.sort=function(e){return this._pipe("sort",e)},e.prototype.sortByCount=function(e){return this._pipe("sortByCount",e)},e.prototype.unwind=function(e){return this._pipe("unwind",e)},e}(),xo=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Co=function(e){function t(t,n){return e.call(this,t,n)||this}return xo(t,e),Object.defineProperty(t.prototype,"name",{get:function(){return this._coll},enumerable:!0,configurable:!0}),t.prototype.doc=function(e){if("string"!=typeof e&&"number"!=typeof e)throw new Error("docId必须为字符串或数字");return new So(this._db,this._coll,e)},t.prototype.add=function(e,t){return new So(this._db,this._coll,void 0).create(e,t)},t.prototype.aggregate=function(){return new Po(this._db,this._coll)},t}(No),Lo={eq:function(e){return new to(Qr.EQ,[e])},neq:function(e){return new to(Qr.NEQ,[e])},lt:function(e){return new to(Qr.LT,[e])},lte:function(e){return new to(Qr.LTE,[e])},gt:function(e){return new to(Qr.GT,[e])},gte:function(e){return new to(Qr.GTE,[e])},in:function(e){return new to(Qr.IN,e)},nin:function(e){return new to(Qr.NIN,e)},all:function(e){return new to(Qr.ALL,e)},elemMatch:function(e){return new to(Qr.ELEM_MATCH,[e])},exists:function(e){return new to(Qr.EXISTS,[e])},size:function(e){return new to(Qr.SIZE,[e])},mod:function(e){return new to(Qr.MOD,[e])},geoNear:function(e){return new to(Qr.GEO_NEAR,[e])},geoWithin:function(e){return new to(Qr.GEO_WITHIN,[e])},geoIntersects:function(e){return new to(Qr.GEO_INTERSECTS,[e])},and:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Ir(arguments[0])?arguments[0]:Array.from(arguments);return new Xr(zr.AND,n)},nor:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Ir(arguments[0])?arguments[0]:Array.from(arguments);return new Xr(zr.NOR,n)},or:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Ir(arguments[0])?arguments[0]:Array.from(arguments);return new Xr(zr.OR,n)},not:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Ir(arguments[0])?arguments[0]:Array.from(arguments);return new Xr(zr.NOT,n)},set:function(e){return new Vr(qr.SET,[e])},remove:function(){return new Vr(qr.REMOVE,[])},inc:function(e){return new Vr(qr.INC,[e])},mul:function(e){return new Vr(qr.MUL,[e])},push:function(){for(var e,t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];if(Sr(t[0])&&t[0].hasOwnProperty("each")){var r=t[0];e={$each:r.each,$position:r.position,$sort:r.sort,$slice:r.slice}}else e=Ir(t[0])?t[0]:Array.from(t);return new Vr(qr.PUSH,e)},pull:function(e){return new Vr(qr.PULL,e)},pullAll:function(e){return new Vr(qr.PULL_ALL,e)},pop:function(){return new Vr(qr.POP,[])},shift:function(){return new Vr(qr.SHIFT,[])},unshift:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=Ir(arguments[0])?arguments[0]:Array.from(arguments);return new Vr(qr.UNSHIFT,n)},addToSet:function(e){return new Vr(qr.ADD_TO_SET,e)},rename:function(e){return new Vr(qr.RENAME,[e])},bit:function(e){return new Vr(qr.BIT,[e])},max:function(e){return new Vr(qr.MAX,[e])},min:function(e){return new Vr(qr.MIN,[e])},expr:function(e){return{$expr:e}},jsonSchema:function(e){return{$jsonSchema:e}},text:function(e){return"string"===Er(e)?{$search:e.search}:{$search:e.search,$language:e.language,$caseSensitive:e.caseSensitive,$diacriticSensitive:e.diacriticSensitive}},aggregate:{pipeline:function(){return new Po},abs:function(e){return new ko("abs",e)},add:function(e){return new ko("add",e)},ceil:function(e){return new ko("ceil",e)},divide:function(e){return new ko("divide",e)},exp:function(e){return new ko("exp",e)},floor:function(e){return new ko("floor",e)},ln:function(e){return new ko("ln",e)},log:function(e){return new ko("log",e)},log10:function(e){return new ko("log10",e)},mod:function(e){return new ko("mod",e)},multiply:function(e){return new ko("multiply",e)},pow:function(e){return new ko("pow",e)},sqrt:function(e){return new ko("sqrt",e)},subtract:function(e){return new ko("subtract",e)},trunc:function(e){return new ko("trunc",e)},arrayElemAt:function(e){return new ko("arrayElemAt",e)},arrayToObject:function(e){return new ko("arrayToObject",e)},concatArrays:function(e){return new ko("concatArrays",e)},filter:function(e){return new ko("filter",e)},in:function(e){return new ko("in",e)},indexOfArray:function(e){return new ko("indexOfArray",e)},isArray:function(e){return new ko("isArray",e)},map:function(e){return new ko("map",e)},range:function(e){return new ko("range",e)},reduce:function(e){return new ko("reduce",e)},reverseArray:function(e){return new ko("reverseArray",e)},size:function(e){return new ko("size",e)},slice:function(e){return new ko("slice",e)},zip:function(e){return new ko("zip",e)},and:function(e){return new ko("and",e)},not:function(e){return new ko("not",e)},or:function(e){return new ko("or",e)},cmp:function(e){return new ko("cmp",e)},eq:function(e){return new ko("eq",e)},gt:function(e){return new ko("gt",e)},gte:function(e){return new ko("gte",e)},lt:function(e){return new ko("lt",e)},lte:function(e){return new ko("lte",e)},neq:function(e){return new ko("ne",e)},cond:function(e){return new ko("cond",e)},ifNull:function(e){return new ko("ifNull",e)},switch:function(e){return new ko("switch",e)},dateFromParts:function(e){return new ko("dateFromParts",e)},dateFromString:function(e){return new ko("dateFromString",e)},dayOfMonth:function(e){return new ko("dayOfMonth",e)},dayOfWeek:function(e){return new ko("dayOfWeek",e)},dayOfYear:function(e){return new ko("dayOfYear",e)},isoDayOfWeek:function(e){return new ko("isoDayOfWeek",e)},isoWeek:function(e){return new ko("isoWeek",e)},isoWeekYear:function(e){return new ko("isoWeekYear",e)},millisecond:function(e){return new ko("millisecond",e)},minute:function(e){return new ko("minute",e)},month:function(e){return new ko("month",e)},second:function(e){return new ko("second",e)},hour:function(e){return new ko("hour",e)},week:function(e){return new ko("week",e)},year:function(e){return new ko("year",e)},literal:function(e){return new ko("literal",e)},mergeObjects:function(e){return new ko("mergeObjects",e)},objectToArray:function(e){return new ko("objectToArray",e)},allElementsTrue:function(e){return new ko("allElementsTrue",e)},anyElementTrue:function(e){return new ko("anyElementTrue",e)},setDifference:function(e){return new ko("setDifference",e)},setEquals:function(e){return new ko("setEquals",e)},setIntersection:function(e){return new ko("setIntersection",e)},setIsSubset:function(e){return new ko("setIsSubset",e)},setUnion:function(e){return new ko("setUnion",e)},concat:function(e){return new ko("concat",e)},dateToString:function(e){return new ko("dateToString",e)},indexOfBytes:function(e){return new ko("indexOfBytes",e)},indexOfCP:function(e){return new ko("indexOfCP",e)},split:function(e){return new ko("split",e)},strLenBytes:function(e){return new ko("strLenBytes",e)},strLenCP:function(e){return new ko("strLenCP",e)},strcasecmp:function(e){return new ko("strcasecmp",e)},substr:function(e){return new ko("substr",e)},substrBytes:function(e){return new ko("substrBytes",e)},substrCP:function(e){return new ko("substrCP",e)},toLower:function(e){return new ko("toLower",e)},toUpper:function(e){return new ko("toUpper",e)},meta:function(e){return new ko("meta",e)},addToSet:function(e){return new ko("addToSet",e)},avg:function(e){return new ko("avg",e)},first:function(e){return new ko("first",e)},last:function(e){return new ko("last",e)},max:function(e){return new ko("max",e)},min:function(e){return new ko("min",e)},push:function(e){return new ko("push",e)},stdDevPop:function(e){return new ko("stdDevPop",e)},stdDevSamp:function(e){return new ko("stdDevSamp",e)},sum:function(e){return new ko("sum",e)},let:function(e){return new ko("let",e)}},project:{slice:function(e){return new Mo("slice",e)},elemMatch:function(e){return new Mo("elemMatch",e)}}},ko=function(e,t){this["$"+e]=t},Mo=function(e,t){this["$"+e]=t},jo=function(){function e(e){var t=e.regexp,n=e.options;if(!t)throw new TypeError("regexp must be a string");this.$regex=t,this.$options=n}return e.prototype.parse=function(){return{$regex:this.$regex,$options:this.$options}},Object.defineProperty(e.prototype,"_internalType",{get:function(){return Ar},enumerable:!0,configurable:!0}),e}();function Uo(e){return new jo(e)}var $o={code:"INSERT_DOC_FAIL",message:"insert document failed"},Fo={code:"DATABASE_TRANSACTION_CONFLICT",message:"database transaction conflict"},qo=function(){return(qo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},Wo=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},Yo=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Ho="database.updateDocInTransaction",Ko=function(){function e(e,t,n){this._coll=t,this.id=n,this._transaction=e,this._request=this._transaction.getRequestMethod(),this._transactionId=this._transaction.getTransactionId()}return e.prototype.create=function(e){return Wo(this,void 0,void 0,(function(){var t,n,r,o;return Yo(this,(function(i){switch(i.label){case 0:return t={collectionName:this._coll,transactionId:this._transactionId,data:Ro.a.stringify(fo(e),{relaxed:!1})},this.id&&(t._id=this.id),[4,this._request.send("database.insertDocInTransaction",t)];case 1:if((n=i.sent()).code)throw n;if(r=Ro.a.parse(n.inserted),1==(o=Ro.a.parse(n.ok))&&1==r)return[2,qo(qo({},n),{ok:o,inserted:r})];throw new Error($o.message)}}))}))},e.prototype.get=function(){return Wo(this,void 0,void 0,(function(){var e,t;return Yo(this,(function(n){switch(n.label){case 0:return e={collectionName:this._coll,transactionId:this._transactionId,query:{_id:{$eq:this.id}}},[4,this._request.send("database.getInTransaction",e)];case 1:if((t=n.sent()).code)throw t;return[2,{data:"null"!==t.data?Yr.formatField(Ro.a.parse(t.data)):Ro.a.parse(t.data),requestId:t.requestId}]}}))}))},e.prototype.set=function(e){return Wo(this,void 0,void 0,(function(){var t,n;return Yo(this,(function(r){switch(r.label){case 0:return t={collectionName:this._coll,transactionId:this._transactionId,query:{_id:{$eq:this.id}},data:Ro.a.stringify(fo(e),{relaxed:!1}),upsert:!0},[4,this._request.send(Ho,t)];case 1:if((n=r.sent()).code)throw n;return[2,qo(qo({},n),{updated:Ro.a.parse(n.updated),upserted:n.upserted?JSON.parse(n.upserted):null})]}}))}))},e.prototype.update=function(e){return Wo(this,void 0,void 0,(function(){var t,n;return Yo(this,(function(r){switch(r.label){case 0:return t={collectionName:this._coll,transactionId:this._transactionId,query:{_id:{$eq:this.id}},data:Ro.a.stringify(bo.encode(e),{relaxed:!1})},[4,this._request.send(Ho,t)];case 1:if((n=r.sent()).code)throw n;return[2,qo(qo({},n),{updated:Ro.a.parse(n.updated)})]}}))}))},e.prototype.delete=function(){return Wo(this,void 0,void 0,(function(){var e,t;return Yo(this,(function(n){switch(n.label){case 0:return e={collectionName:this._coll,transactionId:this._transactionId,query:{_id:{$eq:this.id}}},[4,this._request.send("database.deleteDocInTransaction",e)];case 1:if((t=n.sent()).code)throw t;return[2,qo(qo({},t),{deleted:Ro.a.parse(t.deleted)})]}}))}))},e}(),Go=function(e,t){this._coll=t,this._transaction=e},Vo=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Jo=function(e){function t(t,n){return e.call(this,t,n)||this}return Vo(t,e),Object.defineProperty(t.prototype,"name",{get:function(){return this._coll},enumerable:!0,configurable:!0}),t.prototype.doc=function(e){if("string"!=typeof e&&"number"!=typeof e)throw new Error("docId必须为字符串或数字");return new Ko(this._transaction,this._coll,e)},t.prototype.add=function(e){var t;return void 0!==e._id&&(t=e._id),new Ko(this._transaction,this._coll,t).create(e)},t}(Go),zo=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},Xo=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},Zo=function(){function e(e){this._db=e,this._request=new ti.reqClass(this._db.config),this.aborted=!1,this.commited=!1,this.inited=!1}return e.prototype.init=function(){return zo(this,void 0,void 0,(function(){var e;return Xo(this,(function(t){switch(t.label){case 0:return[4,this._request.send("database.startTransaction")];case 1:if((e=t.sent()).code)throw e;return this.inited=!0,this._id=e.transactionId,[2]}}))}))},e.prototype.collection=function(e){if(!e)throw new Error("Collection name is required");return new Jo(this,e)},e.prototype.getTransactionId=function(){return this._id},e.prototype.getRequestMethod=function(){return this._request},e.prototype.commit=function(){return zo(this,void 0,void 0,(function(){var e,t;return Xo(this,(function(n){switch(n.label){case 0:return e={transactionId:this._id},[4,this._request.send("database.commitTransaction",e)];case 1:if((t=n.sent()).code)throw t;return this.commited=!0,[2,t]}}))}))},e.prototype.rollback=function(e){return zo(this,void 0,void 0,(function(){var t,n;return Xo(this,(function(r){switch(r.label){case 0:return t={transactionId:this._id},[4,this._request.send("database.abortTransaction",t)];case 1:if((n=r.sent()).code)throw n;return this.aborted=!0,this.abortReason=e,[2,n]}}))}))},e}();function Qo(){return zo(this,void 0,void 0,(function(){var e;return Xo(this,(function(t){switch(t.label){case 0:return[4,(e=new Zo(this)).init()];case 1:return t.sent(),[2,e]}}))}))}function ei(e,t){return void 0===t&&(t=3),zo(this,void 0,void 0,(function(){var n,r,o,i,s=this;return Xo(this,(function(a){switch(a.label){case 0:return a.trys.push([0,4,,10]),[4,(n=new Zo(this)).init()];case 1:return a.sent(),[4,e(n)];case 2:if(r=a.sent(),!0===n.aborted)throw n.abortReason;return[4,n.commit()];case 3:return a.sent(),[2,r];case 4:if(o=a.sent(),!1===n.inited)throw o;return i=function(e){return zo(s,void 0,void 0,(function(){return Xo(this,(function(t){switch(t.label){case 0:if(n.aborted||n.commited)return[3,5];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,n.rollback()];case 2:return t.sent(),[3,4];case 3:return t.sent(),[3,4];case 4:throw e;case 5:if(!0===n.aborted)throw n.abortReason;throw e}}))}))},t<=0?[4,i(o)]:[3,6];case 5:a.sent(),a.label=6;case 6:return o&&o.code===Fo.code?[4,ei.bind(this)(e,--t)]:[3,8];case 7:return[2,a.sent()];case 8:return[4,i(o)];case 9:return a.sent(),[3,10];case 10:return[2]}}))}))}var ti=function(){function e(e){this.config=e,this.Geo=r,this.serverDate=Fr,this.command=Lo,this.RegExp=Uo,this.startTransaction=Qo,this.runTransaction=ei,this.logicCommand=Xr,this.updateCommand=Vr,this.queryCommand=to}return e.prototype.collection=function(e){if(!e)throw new Error("Collection name is required");return new Co(this,e)},e.prototype.createCollection=function(t){var n={collectionName:t};return new e.reqClass(this.config).send("database.addCollection",n)},e}(),ni=function(){return(ni=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};var ri={name:"database",entity:{database:function(e){var t=this.platform,n=t.adapter,r=t.runtime;return ti.reqClass=this.request.constructor,ti.getAccessToken=this.authInstance?this.authInstance.getAccessToken.bind(this.authInstance):function(){return""},ti.runtime=r,this.wsClientClass&&(ti.wsClass=n.wsClass,ti.wsClientClass=this.wsClientClass),ti.ws||(ti.ws=null),new ti(ni(ni({},this.config),e))}}};try{cloudbase.registerComponent(ri)}catch(e){}var oi=n(13).a;ue.registerVersion(oi);try{!function(e){try{e.registerComponent(Ct)}catch(e){console.warn(e)}}(ue),function(e){try{e.registerComponent(Yt)}catch(e){console.warn(e)}}(ue),function(e){try{e.registerComponent(on)}catch(e){console.warn(e)}}(ue),function(e){try{e.registerComponent(ri)}catch(e){console.warn(e)}}(ue),function(e){try{e.registerComponent(Wn),e.registerHook(qn)}catch(e){console.warn(e)}}(ue)}catch(e){}try{window.cloudbase=ue}catch(e){}var ii=ue;window.onload=function(){console.log(ii);const e=ii.init({env:"test-1gotf68l43775c18"});console.log(e),e.auth().weixinAuthProvider({appid:"wx8d091aaf933dd6f3",scope:"snsapi_base"}).signInWithRedirect(),window.app=new s.a({el:"#app",data:{flag:!1,flag2:!1}})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,